//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.PalletGilt;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using Ajuna.ServiceLayer.Attributes;
using Ajuna.ServiceLayer.Storage;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Ajuna.Infrastructure.Storages
{
    
    
    public interface IGiltStorage : IStorage
    {
        
        /// <summary>
        /// >> QueueTotals
        ///  The totals of items and balances within each queue. Saves a lot of storage reads in the
        ///  case of sparsely packed queues.
        /// 
        ///  The vector is indexed by duration in `Period`s, offset by one, so information on the queue
        ///  whose duration is one `Period` would be storage `0`.
        /// </summary>
        BaseVec<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U128>> GetQueueTotals();
        
        /// <summary>
        /// >> Queues
        ///  The queues of bids ready to become gilts. Indexed by duration (in `Period`s).
        /// </summary>
        BaseVec<Ajuna.NetApi.Model.PalletGilt.GiltBid> GetQueues(string key);
        
        /// <summary>
        /// >> ActiveTotal
        ///  Information relating to the gilts currently active.
        /// </summary>
        Ajuna.NetApi.Model.PalletGilt.ActiveGiltsTotal GetActiveTotal();
        
        /// <summary>
        /// >> Active
        ///  The currently active gilts, indexed according to the order of creation.
        /// </summary>
        Ajuna.NetApi.Model.PalletGilt.ActiveGilt GetActive(string key);
    }
    
    public sealed class GiltStorage : IGiltStorage
    {
        
        private TypedStorage<BaseVec<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U128>>> _queueTotalsTypedStorage;
        
        private TypedMapStorage<BaseVec<Ajuna.NetApi.Model.PalletGilt.GiltBid>> _queuesTypedStorage;
        
        private TypedStorage<Ajuna.NetApi.Model.PalletGilt.ActiveGiltsTotal> _activeTotalTypedStorage;
        
        private TypedMapStorage<Ajuna.NetApi.Model.PalletGilt.ActiveGilt> _activeTypedStorage;
        
        public GiltStorage(IStorageChangeDelegate storageChangeDelegate)
        {
            this.QueueTotalsTypedStorage = new TypedStorage<BaseVec<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U128>>>("Gilt.QueueTotals", storageChangeDelegate);
            this.QueuesTypedStorage = new TypedMapStorage<BaseVec<Ajuna.NetApi.Model.PalletGilt.GiltBid>>("Gilt.Queues", storageChangeDelegate);
            this.ActiveTotalTypedStorage = new TypedStorage<Ajuna.NetApi.Model.PalletGilt.ActiveGiltsTotal>("Gilt.ActiveTotal", storageChangeDelegate);
            this.ActiveTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.PalletGilt.ActiveGilt>("Gilt.Active", storageChangeDelegate);
        }
        
        public TypedStorage<BaseVec<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U128>>> QueueTotalsTypedStorage
        {
            get
            {
                return _queueTotalsTypedStorage;
            }
            set
            {
                _queueTotalsTypedStorage = value;
            }
        }
        
        public TypedMapStorage<BaseVec<Ajuna.NetApi.Model.PalletGilt.GiltBid>> QueuesTypedStorage
        {
            get
            {
                return _queuesTypedStorage;
            }
            set
            {
                _queuesTypedStorage = value;
            }
        }
        
        public TypedStorage<Ajuna.NetApi.Model.PalletGilt.ActiveGiltsTotal> ActiveTotalTypedStorage
        {
            get
            {
                return _activeTotalTypedStorage;
            }
            set
            {
                _activeTotalTypedStorage = value;
            }
        }
        
        public TypedMapStorage<Ajuna.NetApi.Model.PalletGilt.ActiveGilt> ActiveTypedStorage
        {
            get
            {
                return _activeTypedStorage;
            }
            set
            {
                _activeTypedStorage = value;
            }
        }
        
        public async Task InitializeAsync(Ajuna.NetApi.SubstrateClient client)
        {
            await QueueTotalsTypedStorage.InitializeAsync(client, "Gilt", "QueueTotals");
            await QueuesTypedStorage.InitializeAsync(client, "Gilt", "Queues");
            await ActiveTotalTypedStorage.InitializeAsync(client, "Gilt", "ActiveTotal");
            await ActiveTypedStorage.InitializeAsync(client, "Gilt", "Active");
        }
        
        [StorageChange("Gilt", "QueueTotals")]
        public void OnUpdateQueueTotals(string data)
        {
            QueueTotalsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> QueueTotals
        ///  The totals of items and balances within each queue. Saves a lot of storage reads in the
        ///  case of sparsely packed queues.
        /// 
        ///  The vector is indexed by duration in `Period`s, offset by one, so information on the queue
        ///  whose duration is one `Period` would be storage `0`.
        /// </summary>
        public BaseVec<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U128>> GetQueueTotals()
        {
            return QueueTotalsTypedStorage.Get();
        }
        
        [StorageChange("Gilt", "Queues")]
        public void OnUpdateQueues(string key, string data)
        {
            QueuesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Queues
        ///  The queues of bids ready to become gilts. Indexed by duration (in `Period`s).
        /// </summary>
        public BaseVec<Ajuna.NetApi.Model.PalletGilt.GiltBid> GetQueues(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (QueuesTypedStorage.Dictionary.TryGetValue(key, out BaseVec<Ajuna.NetApi.Model.PalletGilt.GiltBid> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        [StorageChange("Gilt", "ActiveTotal")]
        public void OnUpdateActiveTotal(string data)
        {
            ActiveTotalTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ActiveTotal
        ///  Information relating to the gilts currently active.
        /// </summary>
        public Ajuna.NetApi.Model.PalletGilt.ActiveGiltsTotal GetActiveTotal()
        {
            return ActiveTotalTypedStorage.Get();
        }
        
        [StorageChange("Gilt", "Active")]
        public void OnUpdateActive(string key, string data)
        {
            ActiveTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Active
        ///  The currently active gilts, indexed according to the order of creation.
        /// </summary>
        public Ajuna.NetApi.Model.PalletGilt.ActiveGilt GetActive(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ActiveTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.PalletGilt.ActiveGilt result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
