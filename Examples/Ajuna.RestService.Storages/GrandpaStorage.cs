//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.PalletGrandpa;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using Ajuna.ServiceLayer.Attributes;
using Ajuna.ServiceLayer.Storage;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Ajuna.Infrastructure.Storages
{
    
    
    public interface IGrandpaStorage : IStorage
    {
        
        /// <summary>
        /// >> State
        ///  State of the current authority set.
        /// </summary>
        Ajuna.NetApi.Model.PalletGrandpa.EnumStoredState GetState();
        
        /// <summary>
        /// >> PendingChange
        ///  Pending change: (signaled at, scheduled change).
        /// </summary>
        Ajuna.NetApi.Model.PalletGrandpa.StoredPendingChange GetPendingChange();
        
        /// <summary>
        /// >> NextForced
        ///  next block number where we can force a change.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetNextForced();
        
        /// <summary>
        /// >> Stalled
        ///  `true` if we are currently stalled.
        /// </summary>
        BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U32> GetStalled();
        
        /// <summary>
        /// >> CurrentSetId
        ///  The number of changes (both in terms of keys and underlying economic responsibilities)
        ///  in the &quot;set&quot; of Grandpa validators from genesis.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U64 GetCurrentSetId();
        
        /// <summary>
        /// >> SetIdSession
        ///  A mapping from grandpa set ID to the index of the *most recent* session for which its
        ///  members were responsible.
        /// 
        ///  TWOX-NOTE: `SetId` is not under user control.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetSetIdSession(string key);
    }
    
    public sealed class GrandpaStorage : IGrandpaStorage
    {
        
        private TypedStorage<Ajuna.NetApi.Model.PalletGrandpa.EnumStoredState> _stateTypedStorage;
        
        private TypedStorage<Ajuna.NetApi.Model.PalletGrandpa.StoredPendingChange> _pendingChangeTypedStorage;
        
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _nextForcedTypedStorage;
        
        private TypedStorage<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U32>> _stalledTypedStorage;
        
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U64> _currentSetIdTypedStorage;
        
        private TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _setIdSessionTypedStorage;
        
        public GrandpaStorage(IStorageChangeDelegate storageChangeDelegate)
        {
            this.StateTypedStorage = new TypedStorage<Ajuna.NetApi.Model.PalletGrandpa.EnumStoredState>("Grandpa.State", storageChangeDelegate);
            this.PendingChangeTypedStorage = new TypedStorage<Ajuna.NetApi.Model.PalletGrandpa.StoredPendingChange>("Grandpa.PendingChange", storageChangeDelegate);
            this.NextForcedTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("Grandpa.NextForced", storageChangeDelegate);
            this.StalledTypedStorage = new TypedStorage<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U32>>("Grandpa.Stalled", storageChangeDelegate);
            this.CurrentSetIdTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U64>("Grandpa.CurrentSetId", storageChangeDelegate);
            this.SetIdSessionTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("Grandpa.SetIdSession", storageChangeDelegate);
        }
        
        public TypedStorage<Ajuna.NetApi.Model.PalletGrandpa.EnumStoredState> StateTypedStorage
        {
            get
            {
                return _stateTypedStorage;
            }
            set
            {
                _stateTypedStorage = value;
            }
        }
        
        public TypedStorage<Ajuna.NetApi.Model.PalletGrandpa.StoredPendingChange> PendingChangeTypedStorage
        {
            get
            {
                return _pendingChangeTypedStorage;
            }
            set
            {
                _pendingChangeTypedStorage = value;
            }
        }
        
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> NextForcedTypedStorage
        {
            get
            {
                return _nextForcedTypedStorage;
            }
            set
            {
                _nextForcedTypedStorage = value;
            }
        }
        
        public TypedStorage<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U32>> StalledTypedStorage
        {
            get
            {
                return _stalledTypedStorage;
            }
            set
            {
                _stalledTypedStorage = value;
            }
        }
        
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U64> CurrentSetIdTypedStorage
        {
            get
            {
                return _currentSetIdTypedStorage;
            }
            set
            {
                _currentSetIdTypedStorage = value;
            }
        }
        
        public TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U32> SetIdSessionTypedStorage
        {
            get
            {
                return _setIdSessionTypedStorage;
            }
            set
            {
                _setIdSessionTypedStorage = value;
            }
        }
        
        public async Task InitializeAsync(Ajuna.NetApi.SubstrateClient client)
        {
            await StateTypedStorage.InitializeAsync(client, "Grandpa", "State");
            await PendingChangeTypedStorage.InitializeAsync(client, "Grandpa", "PendingChange");
            await NextForcedTypedStorage.InitializeAsync(client, "Grandpa", "NextForced");
            await StalledTypedStorage.InitializeAsync(client, "Grandpa", "Stalled");
            await CurrentSetIdTypedStorage.InitializeAsync(client, "Grandpa", "CurrentSetId");
            await SetIdSessionTypedStorage.InitializeAsync(client, "Grandpa", "SetIdSession");
        }
        
        [StorageChange("Grandpa", "State")]
        public void OnUpdateState(string data)
        {
            StateTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> State
        ///  State of the current authority set.
        /// </summary>
        public Ajuna.NetApi.Model.PalletGrandpa.EnumStoredState GetState()
        {
            return StateTypedStorage.Get();
        }
        
        [StorageChange("Grandpa", "PendingChange")]
        public void OnUpdatePendingChange(string data)
        {
            PendingChangeTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> PendingChange
        ///  Pending change: (signaled at, scheduled change).
        /// </summary>
        public Ajuna.NetApi.Model.PalletGrandpa.StoredPendingChange GetPendingChange()
        {
            return PendingChangeTypedStorage.Get();
        }
        
        [StorageChange("Grandpa", "NextForced")]
        public void OnUpdateNextForced(string data)
        {
            NextForcedTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NextForced
        ///  next block number where we can force a change.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetNextForced()
        {
            return NextForcedTypedStorage.Get();
        }
        
        [StorageChange("Grandpa", "Stalled")]
        public void OnUpdateStalled(string data)
        {
            StalledTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Stalled
        ///  `true` if we are currently stalled.
        /// </summary>
        public BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U32> GetStalled()
        {
            return StalledTypedStorage.Get();
        }
        
        [StorageChange("Grandpa", "CurrentSetId")]
        public void OnUpdateCurrentSetId(string data)
        {
            CurrentSetIdTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CurrentSetId
        ///  The number of changes (both in terms of keys and underlying economic responsibilities)
        ///  in the &quot;set&quot; of Grandpa validators from genesis.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U64 GetCurrentSetId()
        {
            return CurrentSetIdTypedStorage.Get();
        }
        
        [StorageChange("Grandpa", "SetIdSession")]
        public void OnUpdateSetIdSession(string key, string data)
        {
            SetIdSessionTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SetIdSession
        ///  A mapping from grandpa set ID to the index of the *most recent* session for which its
        ///  members were responsible.
        /// 
        ///  TWOX-NOTE: `SetId` is not under user control.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetSetIdSession(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SetIdSessionTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
