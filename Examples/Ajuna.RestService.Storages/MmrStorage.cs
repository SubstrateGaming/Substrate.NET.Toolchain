//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.PrimitiveTypes;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using Ajuna.ServiceLayer.Attributes;
using Ajuna.ServiceLayer.Storage;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Ajuna.Infrastructure.Storages
{
    
    
    public interface IMmrStorage : IStorage
    {
        
        /// <summary>
        /// >> RootHash
        ///  Latest MMR Root hash.
        /// </summary>
        Ajuna.NetApi.Model.PrimitiveTypes.H256 GetRootHash();
        
        /// <summary>
        /// >> NumberOfLeaves
        ///  Current size of the MMR (number of leaves).
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U64 GetNumberOfLeaves();
        
        /// <summary>
        /// >> Nodes
        ///  Hashes of the nodes in the MMR.
        /// 
        ///  Note this collection only contains MMR peaks, the inner nodes (and leaves)
        ///  are pruned and only stored in the Offchain DB.
        /// </summary>
        Ajuna.NetApi.Model.PrimitiveTypes.H256 GetNodes(string key);
    }
    
    public sealed class MmrStorage : IMmrStorage
    {
        
        private TypedStorage<Ajuna.NetApi.Model.PrimitiveTypes.H256> _rootHashTypedStorage;
        
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U64> _numberOfLeavesTypedStorage;
        
        private TypedMapStorage<Ajuna.NetApi.Model.PrimitiveTypes.H256> _nodesTypedStorage;
        
        public MmrStorage(IStorageChangeDelegate storageChangeDelegate)
        {
            this.RootHashTypedStorage = new TypedStorage<Ajuna.NetApi.Model.PrimitiveTypes.H256>("Mmr.RootHash", storageChangeDelegate);
            this.NumberOfLeavesTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U64>("Mmr.NumberOfLeaves", storageChangeDelegate);
            this.NodesTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.PrimitiveTypes.H256>("Mmr.Nodes", storageChangeDelegate);
        }
        
        public TypedStorage<Ajuna.NetApi.Model.PrimitiveTypes.H256> RootHashTypedStorage
        {
            get
            {
                return _rootHashTypedStorage;
            }
            set
            {
                _rootHashTypedStorage = value;
            }
        }
        
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U64> NumberOfLeavesTypedStorage
        {
            get
            {
                return _numberOfLeavesTypedStorage;
            }
            set
            {
                _numberOfLeavesTypedStorage = value;
            }
        }
        
        public TypedMapStorage<Ajuna.NetApi.Model.PrimitiveTypes.H256> NodesTypedStorage
        {
            get
            {
                return _nodesTypedStorage;
            }
            set
            {
                _nodesTypedStorage = value;
            }
        }
        
        public async Task InitializeAsync(Ajuna.NetApi.SubstrateClient client)
        {
            await RootHashTypedStorage.InitializeAsync(client, "Mmr", "RootHash");
            await NumberOfLeavesTypedStorage.InitializeAsync(client, "Mmr", "NumberOfLeaves");
            await NodesTypedStorage.InitializeAsync(client, "Mmr", "Nodes");
        }
        
        [StorageChange("Mmr", "RootHash")]
        public void OnUpdateRootHash(string data)
        {
            RootHashTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> RootHash
        ///  Latest MMR Root hash.
        /// </summary>
        public Ajuna.NetApi.Model.PrimitiveTypes.H256 GetRootHash()
        {
            return RootHashTypedStorage.Get();
        }
        
        [StorageChange("Mmr", "NumberOfLeaves")]
        public void OnUpdateNumberOfLeaves(string data)
        {
            NumberOfLeavesTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> NumberOfLeaves
        ///  Current size of the MMR (number of leaves).
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U64 GetNumberOfLeaves()
        {
            return NumberOfLeavesTypedStorage.Get();
        }
        
        [StorageChange("Mmr", "Nodes")]
        public void OnUpdateNodes(string key, string data)
        {
            NodesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Nodes
        ///  Hashes of the nodes in the MMR.
        /// 
        ///  Note this collection only contains MMR peaks, the inner nodes (and leaves)
        ///  are pruned and only stored in the Offchain DB.
        /// </summary>
        public Ajuna.NetApi.Model.PrimitiveTypes.H256 GetNodes(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (NodesTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.PrimitiveTypes.H256 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
