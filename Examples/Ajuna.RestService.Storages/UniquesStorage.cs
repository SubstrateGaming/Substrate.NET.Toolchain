//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.FrameSupport;
using Ajuna.NetApi.Model.PalletUniques;
using Ajuna.NetApi.Model.SpCore;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using Ajuna.ServiceLayer.Attributes;
using Ajuna.ServiceLayer.Storage;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Ajuna.Infrastructure.Storages
{
    
    
    public interface IUniquesStorage : IStorage
    {
        
        /// <summary>
        /// >> Class
        ///  Details of an asset class.
        /// </summary>
        Ajuna.NetApi.Model.PalletUniques.ClassDetails GetClass(string key);
        
        /// <summary>
        /// >> Account
        ///  The assets held by any given account; set out this way so that assets owned by a single
        ///  account can be enumerated.
        /// </summary>
        BaseTuple GetAccount(string key);
        
        /// <summary>
        /// >> Asset
        ///  The assets in existence and their ownership details.
        /// </summary>
        Ajuna.NetApi.Model.PalletUniques.InstanceDetails GetAsset(string key);
        
        /// <summary>
        /// >> ClassMetadataOf
        ///  Metadata of an asset class.
        /// </summary>
        Ajuna.NetApi.Model.PalletUniques.ClassMetadata GetClassMetadataOf(string key);
        
        /// <summary>
        /// >> InstanceMetadataOf
        ///  Metadata of an asset instance.
        /// </summary>
        Ajuna.NetApi.Model.PalletUniques.InstanceMetadata GetInstanceMetadataOf(string key);
        
        /// <summary>
        /// >> Attribute
        ///  Metadata of an asset class.
        /// </summary>
        BaseTuple<Ajuna.NetApi.Model.FrameSupport.BoundedVecT3,Ajuna.NetApi.Model.Types.Primitive.U128> GetAttribute(string key);
    }
    
    public sealed class UniquesStorage : IUniquesStorage
    {
        
        private TypedMapStorage<Ajuna.NetApi.Model.PalletUniques.ClassDetails> _classTypedStorage;
        
        private TypedMapStorage<BaseTuple> _accountTypedStorage;
        
        private TypedMapStorage<Ajuna.NetApi.Model.PalletUniques.InstanceDetails> _assetTypedStorage;
        
        private TypedMapStorage<Ajuna.NetApi.Model.PalletUniques.ClassMetadata> _classMetadataOfTypedStorage;
        
        private TypedMapStorage<Ajuna.NetApi.Model.PalletUniques.InstanceMetadata> _instanceMetadataOfTypedStorage;
        
        private TypedMapStorage<BaseTuple<Ajuna.NetApi.Model.FrameSupport.BoundedVecT3,Ajuna.NetApi.Model.Types.Primitive.U128>> _attributeTypedStorage;
        
        public UniquesStorage(IStorageChangeDelegate storageChangeDelegate)
        {
            this.ClassTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.PalletUniques.ClassDetails>("Uniques.Class", storageChangeDelegate);
            this.AccountTypedStorage = new TypedMapStorage<BaseTuple>("Uniques.Account", storageChangeDelegate);
            this.AssetTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.PalletUniques.InstanceDetails>("Uniques.Asset", storageChangeDelegate);
            this.ClassMetadataOfTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.PalletUniques.ClassMetadata>("Uniques.ClassMetadataOf", storageChangeDelegate);
            this.InstanceMetadataOfTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.PalletUniques.InstanceMetadata>("Uniques.InstanceMetadataOf", storageChangeDelegate);
            this.AttributeTypedStorage = new TypedMapStorage<BaseTuple<Ajuna.NetApi.Model.FrameSupport.BoundedVecT3,Ajuna.NetApi.Model.Types.Primitive.U128>>("Uniques.Attribute", storageChangeDelegate);
        }
        
        public TypedMapStorage<Ajuna.NetApi.Model.PalletUniques.ClassDetails> ClassTypedStorage
        {
            get
            {
                return _classTypedStorage;
            }
            set
            {
                _classTypedStorage = value;
            }
        }
        
        public TypedMapStorage<BaseTuple> AccountTypedStorage
        {
            get
            {
                return _accountTypedStorage;
            }
            set
            {
                _accountTypedStorage = value;
            }
        }
        
        public TypedMapStorage<Ajuna.NetApi.Model.PalletUniques.InstanceDetails> AssetTypedStorage
        {
            get
            {
                return _assetTypedStorage;
            }
            set
            {
                _assetTypedStorage = value;
            }
        }
        
        public TypedMapStorage<Ajuna.NetApi.Model.PalletUniques.ClassMetadata> ClassMetadataOfTypedStorage
        {
            get
            {
                return _classMetadataOfTypedStorage;
            }
            set
            {
                _classMetadataOfTypedStorage = value;
            }
        }
        
        public TypedMapStorage<Ajuna.NetApi.Model.PalletUniques.InstanceMetadata> InstanceMetadataOfTypedStorage
        {
            get
            {
                return _instanceMetadataOfTypedStorage;
            }
            set
            {
                _instanceMetadataOfTypedStorage = value;
            }
        }
        
        public TypedMapStorage<BaseTuple<Ajuna.NetApi.Model.FrameSupport.BoundedVecT3,Ajuna.NetApi.Model.Types.Primitive.U128>> AttributeTypedStorage
        {
            get
            {
                return _attributeTypedStorage;
            }
            set
            {
                _attributeTypedStorage = value;
            }
        }
        
        public async Task InitializeAsync(Ajuna.NetApi.SubstrateClient client)
        {
            await ClassTypedStorage.InitializeAsync(client, "Uniques", "Class");
            await AccountTypedStorage.InitializeAsync(client, "Uniques", "Account");
            await AssetTypedStorage.InitializeAsync(client, "Uniques", "Asset");
            await ClassMetadataOfTypedStorage.InitializeAsync(client, "Uniques", "ClassMetadataOf");
            await InstanceMetadataOfTypedStorage.InitializeAsync(client, "Uniques", "InstanceMetadataOf");
            await AttributeTypedStorage.InitializeAsync(client, "Uniques", "Attribute");
        }
        
        [StorageChange("Uniques", "Class")]
        public void OnUpdateClass(string key, string data)
        {
            ClassTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Class
        ///  Details of an asset class.
        /// </summary>
        public Ajuna.NetApi.Model.PalletUniques.ClassDetails GetClass(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ClassTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.PalletUniques.ClassDetails result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        [StorageChange("Uniques", "Account")]
        public void OnUpdateAccount(string key, string data)
        {
            AccountTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Account
        ///  The assets held by any given account; set out this way so that assets owned by a single
        ///  account can be enumerated.
        /// </summary>
        public BaseTuple GetAccount(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AccountTypedStorage.Dictionary.TryGetValue(key, out BaseTuple result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        [StorageChange("Uniques", "Asset")]
        public void OnUpdateAsset(string key, string data)
        {
            AssetTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Asset
        ///  The assets in existence and their ownership details.
        /// </summary>
        public Ajuna.NetApi.Model.PalletUniques.InstanceDetails GetAsset(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AssetTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.PalletUniques.InstanceDetails result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        [StorageChange("Uniques", "ClassMetadataOf")]
        public void OnUpdateClassMetadataOf(string key, string data)
        {
            ClassMetadataOfTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ClassMetadataOf
        ///  Metadata of an asset class.
        /// </summary>
        public Ajuna.NetApi.Model.PalletUniques.ClassMetadata GetClassMetadataOf(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ClassMetadataOfTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.PalletUniques.ClassMetadata result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        [StorageChange("Uniques", "InstanceMetadataOf")]
        public void OnUpdateInstanceMetadataOf(string key, string data)
        {
            InstanceMetadataOfTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> InstanceMetadataOf
        ///  Metadata of an asset instance.
        /// </summary>
        public Ajuna.NetApi.Model.PalletUniques.InstanceMetadata GetInstanceMetadataOf(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (InstanceMetadataOfTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.PalletUniques.InstanceMetadata result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        [StorageChange("Uniques", "Attribute")]
        public void OnUpdateAttribute(string key, string data)
        {
            AttributeTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Attribute
        ///  Metadata of an asset class.
        /// </summary>
        public BaseTuple<Ajuna.NetApi.Model.FrameSupport.BoundedVecT3,Ajuna.NetApi.Model.Types.Primitive.U128> GetAttribute(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AttributeTypedStorage.Dictionary.TryGetValue(key, out BaseTuple<Ajuna.NetApi.Model.FrameSupport.BoundedVecT3,Ajuna.NetApi.Model.Types.Primitive.U128> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
