//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.NodeRuntime;
using Ajuna.NetApi.Model.SpCore;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using Ajuna.ServiceLayer.Attributes;
using Ajuna.ServiceLayer.Storage;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Ajuna.Infrastructure.Storages
{
    
    
    public interface ISessionStorage : IStorage
    {
        
        /// <summary>
        /// >> Validators
        ///  The current set of validators.
        /// </summary>
        BaseVec<Ajuna.NetApi.Model.SpCore.AccountId32> GetValidators();
        
        /// <summary>
        /// >> CurrentIndex
        ///  Current index of the session.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetCurrentIndex();
        
        /// <summary>
        /// >> QueuedChanged
        ///  True if the underlying economic identities or weighting behind the validators
        ///  has changed in the queued validator set.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.Bool GetQueuedChanged();
        
        /// <summary>
        /// >> QueuedKeys
        ///  The queued keys for the next session. When the next session begins, these keys
        ///  will be used to determine the validator's session keys.
        /// </summary>
        BaseVec<BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32,Ajuna.NetApi.Model.NodeRuntime.SessionKeys>> GetQueuedKeys();
        
        /// <summary>
        /// >> DisabledValidators
        ///  Indices of disabled validators.
        /// 
        ///  The set is cleared when `on_session_ending` returns a new set of identities.
        /// </summary>
        BaseVec<Ajuna.NetApi.Model.Types.Primitive.U32> GetDisabledValidators();
        
        /// <summary>
        /// >> NextKeys
        ///  The next session keys for a validator.
        /// </summary>
        Ajuna.NetApi.Model.NodeRuntime.SessionKeys GetNextKeys(string key);
        
        /// <summary>
        /// >> KeyOwner
        ///  The owner of a key. The key is the `KeyTypeId` + the encoded key.
        /// </summary>
        Ajuna.NetApi.Model.SpCore.AccountId32 GetKeyOwner(string key);
    }
    
    public sealed class SessionStorage : ISessionStorage
    {
        
        private TypedStorage<BaseVec<Ajuna.NetApi.Model.SpCore.AccountId32>> _validatorsTypedStorage;
        
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _currentIndexTypedStorage;
        
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.Bool> _queuedChangedTypedStorage;
        
        private TypedStorage<BaseVec<BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32,Ajuna.NetApi.Model.NodeRuntime.SessionKeys>>> _queuedKeysTypedStorage;
        
        private TypedStorage<BaseVec<Ajuna.NetApi.Model.Types.Primitive.U32>> _disabledValidatorsTypedStorage;
        
        private TypedMapStorage<Ajuna.NetApi.Model.NodeRuntime.SessionKeys> _nextKeysTypedStorage;
        
        private TypedMapStorage<Ajuna.NetApi.Model.SpCore.AccountId32> _keyOwnerTypedStorage;
        
        public SessionStorage(IStorageChangeDelegate storageChangeDelegate)
        {
            this.ValidatorsTypedStorage = new TypedStorage<BaseVec<Ajuna.NetApi.Model.SpCore.AccountId32>>("Session.Validators", storageChangeDelegate);
            this.CurrentIndexTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("Session.CurrentIndex", storageChangeDelegate);
            this.QueuedChangedTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.Bool>("Session.QueuedChanged", storageChangeDelegate);
            this.QueuedKeysTypedStorage = new TypedStorage<BaseVec<BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32,Ajuna.NetApi.Model.NodeRuntime.SessionKeys>>>("Session.QueuedKeys", storageChangeDelegate);
            this.DisabledValidatorsTypedStorage = new TypedStorage<BaseVec<Ajuna.NetApi.Model.Types.Primitive.U32>>("Session.DisabledValidators", storageChangeDelegate);
            this.NextKeysTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.NodeRuntime.SessionKeys>("Session.NextKeys", storageChangeDelegate);
            this.KeyOwnerTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.SpCore.AccountId32>("Session.KeyOwner", storageChangeDelegate);
        }
        
        public TypedStorage<BaseVec<Ajuna.NetApi.Model.SpCore.AccountId32>> ValidatorsTypedStorage
        {
            get
            {
                return _validatorsTypedStorage;
            }
            set
            {
                _validatorsTypedStorage = value;
            }
        }
        
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> CurrentIndexTypedStorage
        {
            get
            {
                return _currentIndexTypedStorage;
            }
            set
            {
                _currentIndexTypedStorage = value;
            }
        }
        
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.Bool> QueuedChangedTypedStorage
        {
            get
            {
                return _queuedChangedTypedStorage;
            }
            set
            {
                _queuedChangedTypedStorage = value;
            }
        }
        
        public TypedStorage<BaseVec<BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32,Ajuna.NetApi.Model.NodeRuntime.SessionKeys>>> QueuedKeysTypedStorage
        {
            get
            {
                return _queuedKeysTypedStorage;
            }
            set
            {
                _queuedKeysTypedStorage = value;
            }
        }
        
        public TypedStorage<BaseVec<Ajuna.NetApi.Model.Types.Primitive.U32>> DisabledValidatorsTypedStorage
        {
            get
            {
                return _disabledValidatorsTypedStorage;
            }
            set
            {
                _disabledValidatorsTypedStorage = value;
            }
        }
        
        public TypedMapStorage<Ajuna.NetApi.Model.NodeRuntime.SessionKeys> NextKeysTypedStorage
        {
            get
            {
                return _nextKeysTypedStorage;
            }
            set
            {
                _nextKeysTypedStorage = value;
            }
        }
        
        public TypedMapStorage<Ajuna.NetApi.Model.SpCore.AccountId32> KeyOwnerTypedStorage
        {
            get
            {
                return _keyOwnerTypedStorage;
            }
            set
            {
                _keyOwnerTypedStorage = value;
            }
        }
        
        public async Task InitializeAsync(Ajuna.NetApi.SubstrateClient client)
        {
            await ValidatorsTypedStorage.InitializeAsync(client, "Session", "Validators");
            await CurrentIndexTypedStorage.InitializeAsync(client, "Session", "CurrentIndex");
            await QueuedChangedTypedStorage.InitializeAsync(client, "Session", "QueuedChanged");
            await QueuedKeysTypedStorage.InitializeAsync(client, "Session", "QueuedKeys");
            await DisabledValidatorsTypedStorage.InitializeAsync(client, "Session", "DisabledValidators");
            await NextKeysTypedStorage.InitializeAsync(client, "Session", "NextKeys");
            await KeyOwnerTypedStorage.InitializeAsync(client, "Session", "KeyOwner");
        }
        
        [StorageChange("Session", "Validators")]
        public void OnUpdateValidators(string data)
        {
            ValidatorsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Validators
        ///  The current set of validators.
        /// </summary>
        public BaseVec<Ajuna.NetApi.Model.SpCore.AccountId32> GetValidators()
        {
            return ValidatorsTypedStorage.Get();
        }
        
        [StorageChange("Session", "CurrentIndex")]
        public void OnUpdateCurrentIndex(string data)
        {
            CurrentIndexTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CurrentIndex
        ///  Current index of the session.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetCurrentIndex()
        {
            return CurrentIndexTypedStorage.Get();
        }
        
        [StorageChange("Session", "QueuedChanged")]
        public void OnUpdateQueuedChanged(string data)
        {
            QueuedChangedTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> QueuedChanged
        ///  True if the underlying economic identities or weighting behind the validators
        ///  has changed in the queued validator set.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.Bool GetQueuedChanged()
        {
            return QueuedChangedTypedStorage.Get();
        }
        
        [StorageChange("Session", "QueuedKeys")]
        public void OnUpdateQueuedKeys(string data)
        {
            QueuedKeysTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> QueuedKeys
        ///  The queued keys for the next session. When the next session begins, these keys
        ///  will be used to determine the validator's session keys.
        /// </summary>
        public BaseVec<BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32,Ajuna.NetApi.Model.NodeRuntime.SessionKeys>> GetQueuedKeys()
        {
            return QueuedKeysTypedStorage.Get();
        }
        
        [StorageChange("Session", "DisabledValidators")]
        public void OnUpdateDisabledValidators(string data)
        {
            DisabledValidatorsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> DisabledValidators
        ///  Indices of disabled validators.
        /// 
        ///  The set is cleared when `on_session_ending` returns a new set of identities.
        /// </summary>
        public BaseVec<Ajuna.NetApi.Model.Types.Primitive.U32> GetDisabledValidators()
        {
            return DisabledValidatorsTypedStorage.Get();
        }
        
        [StorageChange("Session", "NextKeys")]
        public void OnUpdateNextKeys(string key, string data)
        {
            NextKeysTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> NextKeys
        ///  The next session keys for a validator.
        /// </summary>
        public Ajuna.NetApi.Model.NodeRuntime.SessionKeys GetNextKeys(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (NextKeysTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.NodeRuntime.SessionKeys result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        [StorageChange("Session", "KeyOwner")]
        public void OnUpdateKeyOwner(string key, string data)
        {
            KeyOwnerTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> KeyOwner
        ///  The owner of a key. The key is the `KeyTypeId` + the encoded key.
        /// </summary>
        public Ajuna.NetApi.Model.SpCore.AccountId32 GetKeyOwner(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (KeyOwnerTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.SpCore.AccountId32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
