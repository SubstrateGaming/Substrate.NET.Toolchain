//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.FrameSupport;
using Ajuna.NetApi.Model.PalletBalances;
using Ajuna.NetApi.Model.SpCore;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using Ajuna.ServiceLayer.Attributes;
using Ajuna.ServiceLayer.Storage;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Ajuna.Infrastructure.Storages
{
    
    
    public interface IBalancesStorage : IStorage
    {
        
        /// <summary>
        /// >> TotalIssuance
        ///  The total units issued in the system.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U128 GetTotalIssuance();
        
        /// <summary>
        /// >> Account
        ///  The balance of an account.
        /// 
        ///  NOTE: This is only used in the case that this pallet is used to store balances.
        /// </summary>
        Ajuna.NetApi.Model.PalletBalances.AccountData GetAccount(string key);
        
        /// <summary>
        /// >> Locks
        ///  Any liquidity locks on some account balances.
        ///  NOTE: Should only be accessed when setting, changing and freeing a lock.
        /// </summary>
        Ajuna.NetApi.Model.FrameSupport.WeakBoundedVecT2 GetLocks(string key);
        
        /// <summary>
        /// >> Reserves
        ///  Named reserves on some account balances.
        /// </summary>
        Ajuna.NetApi.Model.FrameSupport.BoundedVecT6 GetReserves(string key);
        
        /// <summary>
        /// >> StorageVersion
        ///  Storage version of the pallet.
        /// 
        ///  This is set to v2.0.0 for new networks.
        /// </summary>
        Ajuna.NetApi.Model.PalletBalances.EnumReleases GetStorageVersion();
    }
    
    public sealed class BalancesStorage : IBalancesStorage
    {
        
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U128> _totalIssuanceTypedStorage;
        
        private TypedMapStorage<Ajuna.NetApi.Model.PalletBalances.AccountData> _accountTypedStorage;
        
        private TypedMapStorage<Ajuna.NetApi.Model.FrameSupport.WeakBoundedVecT2> _locksTypedStorage;
        
        private TypedMapStorage<Ajuna.NetApi.Model.FrameSupport.BoundedVecT6> _reservesTypedStorage;
        
        private TypedStorage<Ajuna.NetApi.Model.PalletBalances.EnumReleases> _storageVersionTypedStorage;
        
        public BalancesStorage(IStorageChangeDelegate storageChangeDelegate)
        {
            this.TotalIssuanceTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U128>("Balances.TotalIssuance", storageChangeDelegate);
            this.AccountTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.PalletBalances.AccountData>("Balances.Account", storageChangeDelegate);
            this.LocksTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.FrameSupport.WeakBoundedVecT2>("Balances.Locks", storageChangeDelegate);
            this.ReservesTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.FrameSupport.BoundedVecT6>("Balances.Reserves", storageChangeDelegate);
            this.StorageVersionTypedStorage = new TypedStorage<Ajuna.NetApi.Model.PalletBalances.EnumReleases>("Balances.StorageVersion", storageChangeDelegate);
        }
        
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U128> TotalIssuanceTypedStorage
        {
            get
            {
                return _totalIssuanceTypedStorage;
            }
            set
            {
                _totalIssuanceTypedStorage = value;
            }
        }
        
        public TypedMapStorage<Ajuna.NetApi.Model.PalletBalances.AccountData> AccountTypedStorage
        {
            get
            {
                return _accountTypedStorage;
            }
            set
            {
                _accountTypedStorage = value;
            }
        }
        
        public TypedMapStorage<Ajuna.NetApi.Model.FrameSupport.WeakBoundedVecT2> LocksTypedStorage
        {
            get
            {
                return _locksTypedStorage;
            }
            set
            {
                _locksTypedStorage = value;
            }
        }
        
        public TypedMapStorage<Ajuna.NetApi.Model.FrameSupport.BoundedVecT6> ReservesTypedStorage
        {
            get
            {
                return _reservesTypedStorage;
            }
            set
            {
                _reservesTypedStorage = value;
            }
        }
        
        public TypedStorage<Ajuna.NetApi.Model.PalletBalances.EnumReleases> StorageVersionTypedStorage
        {
            get
            {
                return _storageVersionTypedStorage;
            }
            set
            {
                _storageVersionTypedStorage = value;
            }
        }
        
        public async Task InitializeAsync(Ajuna.NetApi.SubstrateClient client)
        {
            await TotalIssuanceTypedStorage.InitializeAsync(client, "Balances", "TotalIssuance");
            await AccountTypedStorage.InitializeAsync(client, "Balances", "Account");
            await LocksTypedStorage.InitializeAsync(client, "Balances", "Locks");
            await ReservesTypedStorage.InitializeAsync(client, "Balances", "Reserves");
            await StorageVersionTypedStorage.InitializeAsync(client, "Balances", "StorageVersion");
        }
        
        [StorageChange("Balances", "TotalIssuance")]
        public void OnUpdateTotalIssuance(string data)
        {
            TotalIssuanceTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> TotalIssuance
        ///  The total units issued in the system.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U128 GetTotalIssuance()
        {
            return TotalIssuanceTypedStorage.Get();
        }
        
        [StorageChange("Balances", "Account")]
        public void OnUpdateAccount(string key, string data)
        {
            AccountTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Account
        ///  The balance of an account.
        /// 
        ///  NOTE: This is only used in the case that this pallet is used to store balances.
        /// </summary>
        public Ajuna.NetApi.Model.PalletBalances.AccountData GetAccount(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AccountTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.PalletBalances.AccountData result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        [StorageChange("Balances", "Locks")]
        public void OnUpdateLocks(string key, string data)
        {
            LocksTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Locks
        ///  Any liquidity locks on some account balances.
        ///  NOTE: Should only be accessed when setting, changing and freeing a lock.
        /// </summary>
        public Ajuna.NetApi.Model.FrameSupport.WeakBoundedVecT2 GetLocks(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (LocksTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.FrameSupport.WeakBoundedVecT2 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        [StorageChange("Balances", "Reserves")]
        public void OnUpdateReserves(string key, string data)
        {
            ReservesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Reserves
        ///  Named reserves on some account balances.
        /// </summary>
        public Ajuna.NetApi.Model.FrameSupport.BoundedVecT6 GetReserves(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ReservesTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.FrameSupport.BoundedVecT6 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        [StorageChange("Balances", "StorageVersion")]
        public void OnUpdateStorageVersion(string data)
        {
            StorageVersionTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> StorageVersion
        ///  Storage version of the pallet.
        /// 
        ///  This is set to v2.0.0 for new networks.
        /// </summary>
        public Ajuna.NetApi.Model.PalletBalances.EnumReleases GetStorageVersion()
        {
            return StorageVersionTypedStorage.Get();
        }
    }
}
