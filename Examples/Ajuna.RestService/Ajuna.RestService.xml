<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ajuna.RestService</name>
    </assembly>
    <members>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.AssetsController">
            <summary>
            AssetsController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.AssetsController.#ctor(Ajuna.Infrastructure.Storages.IAssetsStorage)">
            <summary>
            AssetsController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.AssetsController.GetAsset(System.String)">
            <summary>
            >> Asset
             Details of an asset.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.AssetsController.GetAccount(System.String)">
            <summary>
            >> Account
             The number of units of assets held by any given account.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.AssetsController.GetApprovals(System.String)">
            <summary>
            >> Approvals
             Approved balance transfers. First balance is the amount approved for transfer. Second
             is the amount of `T::Currency` reserved for storing this.
             First key is the asset ID, second key is the owner and third key is the delegate.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.AssetsController.GetMetadata(System.String)">
            <summary>
            >> Metadata
             Metadata of an asset.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.AuthorshipController">
            <summary>
            AuthorshipController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.AuthorshipController.#ctor(Ajuna.Infrastructure.Storages.IAuthorshipStorage)">
            <summary>
            AuthorshipController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.AuthorshipController.GetUncles">
            <summary>
            >> Uncles
             Uncles
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.AuthorshipController.GetAuthor">
            <summary>
            >> Author
             Author of current block.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.AuthorshipController.GetDidSetUncles">
            <summary>
            >> DidSetUncles
             Whether uncles were already set in this block.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.BabeController">
            <summary>
            BabeController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BabeController.#ctor(Ajuna.Infrastructure.Storages.IBabeStorage)">
            <summary>
            BabeController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BabeController.GetEpochIndex">
            <summary>
            >> EpochIndex
             Current epoch index.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BabeController.GetAuthorities">
            <summary>
            >> Authorities
             Current epoch authorities.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BabeController.GetGenesisSlot">
            <summary>
            >> GenesisSlot
             The slot at which the first epoch actually started. This is 0
             until the first block of the chain.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BabeController.GetCurrentSlot">
            <summary>
            >> CurrentSlot
             Current slot number.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BabeController.GetRandomness">
            <summary>
            >> Randomness
             The epoch randomness for the *current* epoch.
            
             # Security
            
             This MUST NOT be used for gambling, as it can be influenced by a
             malicious validator in the short term. It MAY be used in many
             cryptographic protocols, however, so long as one remembers that this
             (like everything else on-chain) it is public. For example, it can be
             used where a number is needed that cannot have been chosen by an
             adversary, for purposes such as public-coin zero-knowledge proofs.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BabeController.GetPendingEpochConfigChange">
            <summary>
            >> PendingEpochConfigChange
             Pending epoch configuration change that will be applied when the next epoch is enacted.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BabeController.GetNextRandomness">
            <summary>
            >> NextRandomness
             Next epoch randomness.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BabeController.GetNextAuthorities">
            <summary>
            >> NextAuthorities
             Next epoch authorities.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BabeController.GetSegmentIndex">
            <summary>
            >> SegmentIndex
             Randomness under construction.
            
             We make a tradeoff between storage accesses and list length.
             We store the under-construction randomness in segments of up to
             `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.
            
             Once a segment reaches this length, we begin the next one.
             We reset all segments and return to `0` at the beginning of every
             epoch.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BabeController.GetUnderConstruction(System.String)">
            <summary>
            >> UnderConstruction
             TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BabeController.GetInitialized">
            <summary>
            >> Initialized
             Temporary value (cleared at block finalization) which is `Some`
             if per-block initialization has already been called for current block.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BabeController.GetAuthorVrfRandomness">
            <summary>
            >> AuthorVrfRandomness
             This field should always be populated during block processing unless
             secondary plain slots are enabled (which don&#39;t contain a VRF output).
            
             It is set in `on_initialize`, before it will contain the value from the last block.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BabeController.GetEpochStart">
            <summary>
            >> EpochStart
             The block numbers when the last and current epoch have started, respectively `N-1` and
             `N`.
             NOTE: We track this is in order to annotate the block number when a given pool of
             entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in
             slots, which may be skipped, the block numbers may not line up with the slot numbers.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BabeController.GetLateness">
            <summary>
            >> Lateness
             How late the current block is compared to its parent.
            
             This entry is populated as part of block execution and is cleaned up
             on block finalization. Querying this storage entry outside of block
             execution context should always yield zero.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BabeController.GetEpochConfig">
            <summary>
            >> EpochConfig
             The configuration for the current epoch. Should never be `None` as it is initialized in
             genesis.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BabeController.GetNextEpochConfig">
            <summary>
            >> NextEpochConfig
             The configuration for the next epoch, `None` if the config will not change
             (you can fallback to `EpochConfig` instead in that case).
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.BagsListController">
            <summary>
            BagsListController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BagsListController.#ctor(Ajuna.Infrastructure.Storages.IBagsListStorage)">
            <summary>
            BagsListController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BagsListController.GetCounterForListNodes">
            <summary>
            >> CounterForListNodes
             How many ids are registered.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BagsListController.GetListNodes(System.String)">
            <summary>
            >> ListNodes
             A single node, within some bag.
            
             Nodes store links forward and back within their respective bags.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BagsListController.GetListBags(System.String)">
            <summary>
            >> ListBags
             A bag stored in storage.
            
             Stores a `Bag` struct, which stores head and tail pointers to itself.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.BalancesController">
            <summary>
            BalancesController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BalancesController.#ctor(Ajuna.Infrastructure.Storages.IBalancesStorage)">
            <summary>
            BalancesController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BalancesController.GetTotalIssuance">
            <summary>
            >> TotalIssuance
             The total units issued in the system.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BalancesController.GetAccount(System.String)">
            <summary>
            >> Account
             The balance of an account.
            
             NOTE: This is only used in the case that this pallet is used to store balances.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BalancesController.GetLocks(System.String)">
            <summary>
            >> Locks
             Any liquidity locks on some account balances.
             NOTE: Should only be accessed when setting, changing and freeing a lock.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BalancesController.GetReserves(System.String)">
            <summary>
            >> Reserves
             Named reserves on some account balances.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BalancesController.GetStorageVersion">
            <summary>
            >> StorageVersion
             Storage version of the pallet.
            
             This is set to v2.0.0 for new networks.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.BoilerPlateController">
            <summary>
            BoilerPlateController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BoilerPlateController.#ctor(Ajuna.Infrastructure.Storages.IBoilerPlateStorage)">
            <summary>
            BoilerPlateController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BoilerPlateController.GetSomething">
            <summary>
            >> Something
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.BountiesController">
            <summary>
            BountiesController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BountiesController.#ctor(Ajuna.Infrastructure.Storages.IBountiesStorage)">
            <summary>
            BountiesController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BountiesController.GetBountyCount">
            <summary>
            >> BountyCount
             Number of bounty proposals that have been made.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BountiesController.GetBounties(System.String)">
            <summary>
            >> Bounties
             Bounties that have been made.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BountiesController.GetBountyDescriptions(System.String)">
            <summary>
            >> BountyDescriptions
             The description of each bounty.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.BountiesController.GetBountyApprovals">
            <summary>
            >> BountyApprovals
             Bounty indices that have been approved but not yet funded.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.ConnectFourController">
            <summary>
            ConnectFourController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ConnectFourController.#ctor(Ajuna.Infrastructure.Storages.IConnectFourStorage)">
            <summary>
            ConnectFourController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ConnectFourController.GetSomething">
            <summary>
            >> Something
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ConnectFourController.GetFounderKey">
            <summary>
            >> FounderKey
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ConnectFourController.GetBoards(System.String)">
            <summary>
            >> Boards
             Store all boards that are currently being played.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ConnectFourController.GetPlayerBoard(System.String)">
            <summary>
            >> PlayerBoard
             Store players active board, currently only one board per player allowed.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ConnectFourController.GetBoardSchedules(System.String)">
            <summary>
            >> BoardSchedules
             Store boards open schedules.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ConnectFourController.GetNonce">
            <summary>
            >> Nonce
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.ConnectFourMamaController">
            <summary>
            ConnectFourMamaController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ConnectFourMamaController.#ctor(Ajuna.Infrastructure.Storages.IConnectFourMamaStorage)">
            <summary>
            ConnectFourMamaController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ConnectFourMamaController.GetBracketsCount">
            <summary>
            >> BracketsCount
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ConnectFourMamaController.GetBracketIndices(System.String)">
            <summary>
            >> BracketIndices
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ConnectFourMamaController.GetBracketIndexKeyMap(System.String)">
            <summary>
            >> BracketIndexKeyMap
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ConnectFourMamaController.GetBracketKeyValueMap(System.String)">
            <summary>
            >> BracketKeyValueMap
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.ContractsController">
            <summary>
            ContractsController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ContractsController.#ctor(Ajuna.Infrastructure.Storages.IContractsStorage)">
            <summary>
            ContractsController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ContractsController.GetPristineCode(System.String)">
            <summary>
            >> PristineCode
             A mapping from an original code hash to the original code, untouched by instrumentation.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ContractsController.GetCodeStorage(System.String)">
            <summary>
            >> CodeStorage
             A mapping between an original code hash and instrumented wasm code, ready for execution.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ContractsController.GetAccountCounter">
            <summary>
            >> AccountCounter
             The subtrie counter.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ContractsController.GetContractInfoOf(System.String)">
            <summary>
            >> ContractInfoOf
             The code associated with a given account.
            
             TWOX-NOTE: SAFE since `AccountId` is a secure hash.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ContractsController.GetDeletionQueue">
            <summary>
            >> DeletionQueue
             Evicted contracts that await child trie deletion.
            
             Child trie deletion is a heavy operation depending on the amount of storage items
             stored in said trie. Therefore this operation is performed lazily in `on_initialize`.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.CouncilController">
            <summary>
            CouncilController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.CouncilController.#ctor(Ajuna.Infrastructure.Storages.ICouncilStorage)">
            <summary>
            CouncilController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.CouncilController.GetProposals">
            <summary>
            >> Proposals
             The hashes of the active proposals.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.CouncilController.GetProposalOf(System.String)">
            <summary>
            >> ProposalOf
             Actual proposal for a given hash, if it&#39;s current.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.CouncilController.GetVoting(System.String)">
            <summary>
            >> Voting
             Votes on a given proposal, if it is ongoing.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.CouncilController.GetProposalCount">
            <summary>
            >> ProposalCount
             Proposals so far.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.CouncilController.GetMembers">
            <summary>
            >> Members
             The current members of the collective. This is stored sorted (just by value).
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.CouncilController.GetPrime">
            <summary>
            >> Prime
             The prime member that helps determine the default vote behavior in case of absentations.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.DemocracyController">
            <summary>
            DemocracyController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.DemocracyController.#ctor(Ajuna.Infrastructure.Storages.IDemocracyStorage)">
            <summary>
            DemocracyController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.DemocracyController.GetPublicPropCount">
            <summary>
            >> PublicPropCount
             The number of (public) proposals that have been made so far.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.DemocracyController.GetPublicProps">
            <summary>
            >> PublicProps
             The public proposals. Unsorted. The second item is the proposal&#39;s hash.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.DemocracyController.GetDepositOf(System.String)">
            <summary>
            >> DepositOf
             Those who have locked a deposit.
            
             TWOX-NOTE: Safe, as increasing integer keys are safe.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.DemocracyController.GetPreimages(System.String)">
            <summary>
            >> Preimages
             Map of hashes to the proposal preimage, along with who registered it and their deposit.
             The block number is the block at which it was deposited.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.DemocracyController.GetReferendumCount">
            <summary>
            >> ReferendumCount
             The next free referendum index, aka the number of referenda started so far.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.DemocracyController.GetLowestUnbaked">
            <summary>
            >> LowestUnbaked
             The lowest referendum index representing an unbaked referendum. Equal to
             `ReferendumCount` if there isn&#39;t a unbaked referendum.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.DemocracyController.GetReferendumInfoOf(System.String)">
            <summary>
            >> ReferendumInfoOf
             Information concerning any given referendum.
            
             TWOX-NOTE: SAFE as indexes are not under an attacker���s control.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.DemocracyController.GetVotingOf(System.String)">
            <summary>
            >> VotingOf
             All votes for a particular voter. We store the balance for the number of votes that we
             have recorded. The second item is the total amount of delegations, that will be added.
            
             TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.DemocracyController.GetLocks(System.String)">
            <summary>
            >> Locks
             Accounts for which there are locks in action which may be removed at some point in the
             future. The value is the block number at which the lock expires and may be removed.
            
             TWOX-NOTE: OK ��� `AccountId` is a secure hash.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.DemocracyController.GetLastTabledWasExternal">
            <summary>
            >> LastTabledWasExternal
             True if the last referendum tabled was submitted externally. False if it was a public
             proposal.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.DemocracyController.GetNextExternal">
            <summary>
            >> NextExternal
             The referendum to be tabled whenever it would be valid to table an external proposal.
             This happens when a referendum needs to be tabled and one of two conditions are met:
             - `LastTabledWasExternal` is `false`; or
             - `PublicProps` is empty.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.DemocracyController.GetBlacklist(System.String)">
            <summary>
            >> Blacklist
             A record of who vetoed what. Maps proposal hash to a possible existent block number
             (until when it may not be resubmitted) and who vetoed it.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.DemocracyController.GetCancellations(System.String)">
            <summary>
            >> Cancellations
             Record of all proposals that have been subject to emergency cancellation.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.DemocracyController.GetStorageVersion">
            <summary>
            >> StorageVersion
             Storage version of the pallet.
            
             New networks start with last version.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.ElectionProviderMultiPhaseController">
            <summary>
            ElectionProviderMultiPhaseController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ElectionProviderMultiPhaseController.#ctor(Ajuna.Infrastructure.Storages.IElectionProviderMultiPhaseStorage)">
            <summary>
            ElectionProviderMultiPhaseController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ElectionProviderMultiPhaseController.GetRound">
            <summary>
            >> Round
             Internal counter for the number of rounds.
            
             This is useful for de-duplication of transactions submitted to the pool, and general
             diagnostics of the pallet.
            
             This is merely incremented once per every time that an upstream `elect` is called.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ElectionProviderMultiPhaseController.GetCurrentPhase">
            <summary>
            >> CurrentPhase
             Current phase.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ElectionProviderMultiPhaseController.GetQueuedSolution">
            <summary>
            >> QueuedSolution
             Current best solution, signed or unsigned, queued to be returned upon `elect`.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ElectionProviderMultiPhaseController.GetSnapshot">
            <summary>
            >> Snapshot
             Snapshot data of the round.
            
             This is created at the beginning of the signed phase and cleared upon calling `elect`.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ElectionProviderMultiPhaseController.GetDesiredTargets">
            <summary>
            >> DesiredTargets
             Desired number of targets to elect for this round.
            
             Only exists when [`Snapshot`] is present.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ElectionProviderMultiPhaseController.GetSnapshotMetadata">
            <summary>
            >> SnapshotMetadata
             The metadata of the [`RoundSnapshot`]
            
             Only exists when [`Snapshot`] is present.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ElectionProviderMultiPhaseController.GetSignedSubmissionNextIndex">
            <summary>
            >> SignedSubmissionNextIndex
             The next index to be assigned to an incoming signed submission.
            
             Every accepted submission is assigned a unique index; that index is bound to that particular
             submission for the duration of the election. On election finalization, the next index is
             reset to 0.
            
             We can&#39;t just use `SignedSubmissionIndices.len()`, because that&#39;s a bounded set; past its
             capacity, it will simply saturate. We can&#39;t just iterate over `SignedSubmissionsMap`,
             because iteration is slow. Instead, we store the value here.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ElectionProviderMultiPhaseController.GetSignedSubmissionIndices">
            <summary>
            >> SignedSubmissionIndices
             A sorted, bounded set of `(score, index)`, where each `index` points to a value in
             `SignedSubmissions`.
            
             We never need to process more than a single signed submission at a time. Signed submissions
             can be quite large, so we&#39;re willing to pay the cost of multiple database accesses to access
             them one at a time instead of reading and decoding all of them at once.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ElectionProviderMultiPhaseController.GetSignedSubmissionsMap(System.String)">
            <summary>
            >> SignedSubmissionsMap
             Unchecked, signed solutions.
            
             Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while
             allowing us to keep only a single one in memory at a time.
            
             Twox note: the key of the map is an auto-incrementing index which users cannot inspect or
             affect; we shouldn&#39;t need a cryptographically secure hasher.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ElectionProviderMultiPhaseController.GetMinimumUntrustedScore">
            <summary>
            >> MinimumUntrustedScore
             The minimum score that each &#39;untrusted&#39; solution must attain in order to be considered
             feasible.
            
             Can be set via `set_minimum_untrusted_score`.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.ElectionsController">
            <summary>
            ElectionsController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ElectionsController.#ctor(Ajuna.Infrastructure.Storages.IElectionsStorage)">
            <summary>
            ElectionsController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ElectionsController.GetMembers">
            <summary>
            >> Members
             The current elected members.
            
             Invariant: Always sorted based on account id.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ElectionsController.GetRunnersUp">
            <summary>
            >> RunnersUp
             The current reserved runners-up.
            
             Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the
             last (i.e. _best_) runner-up will be replaced.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ElectionsController.GetCandidates">
            <summary>
            >> Candidates
             The present candidate list. A current member or runner-up can never enter this vector
             and is always implicitly assumed to be a candidate.
            
             Second element is the deposit.
            
             Invariant: Always sorted based on account id.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ElectionsController.GetElectionRounds">
            <summary>
            >> ElectionRounds
             The total number of vote rounds that have happened, excluding the upcoming one.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ElectionsController.GetVoting(System.String)">
            <summary>
            >> Voting
             Votes and locked stake of a particular voter.
            
             TWOX-NOTE: SAFE as `AccountId` is a crypto hash.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.GiltController">
            <summary>
            GiltController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.GiltController.#ctor(Ajuna.Infrastructure.Storages.IGiltStorage)">
            <summary>
            GiltController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.GiltController.GetQueueTotals">
            <summary>
            >> QueueTotals
             The totals of items and balances within each queue. Saves a lot of storage reads in the
             case of sparsely packed queues.
            
             The vector is indexed by duration in `Period`s, offset by one, so information on the queue
             whose duration is one `Period` would be storage `0`.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.GiltController.GetQueues(System.String)">
            <summary>
            >> Queues
             The queues of bids ready to become gilts. Indexed by duration (in `Period`s).
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.GiltController.GetActiveTotal">
            <summary>
            >> ActiveTotal
             Information relating to the gilts currently active.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.GiltController.GetActive(System.String)">
            <summary>
            >> Active
             The currently active gilts, indexed according to the order of creation.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.GrandpaController">
            <summary>
            GrandpaController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.GrandpaController.#ctor(Ajuna.Infrastructure.Storages.IGrandpaStorage)">
            <summary>
            GrandpaController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.GrandpaController.GetState">
            <summary>
            >> State
             State of the current authority set.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.GrandpaController.GetPendingChange">
            <summary>
            >> PendingChange
             Pending change: (signaled at, scheduled change).
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.GrandpaController.GetNextForced">
            <summary>
            >> NextForced
             next block number where we can force a change.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.GrandpaController.GetStalled">
            <summary>
            >> Stalled
             `true` if we are currently stalled.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.GrandpaController.GetCurrentSetId">
            <summary>
            >> CurrentSetId
             The number of changes (both in terms of keys and underlying economic responsibilities)
             in the &quot;set&quot; of Grandpa validators from genesis.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.GrandpaController.GetSetIdSession(System.String)">
            <summary>
            >> SetIdSession
             A mapping from grandpa set ID to the index of the *most recent* session for which its
             members were responsible.
            
             TWOX-NOTE: `SetId` is not under user control.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.IdentityController">
            <summary>
            IdentityController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.IdentityController.#ctor(Ajuna.Infrastructure.Storages.IIdentityStorage)">
            <summary>
            IdentityController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.IdentityController.GetIdentityOf(System.String)">
            <summary>
            >> IdentityOf
             Information that is pertinent to identify the entity behind an account.
            
             TWOX-NOTE: OK ��� `AccountId` is a secure hash.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.IdentityController.GetSuperOf(System.String)">
            <summary>
            >> SuperOf
             The super-identity of an alternative &quot;sub&quot; identity together with its name, within that
             context. If the account is not some other account&#39;s sub-identity, then just `None`.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.IdentityController.GetSubsOf(System.String)">
            <summary>
            >> SubsOf
             Alternative &quot;sub&quot; identities of this account.
            
             The first item is the deposit, the second is a vector of the accounts.
            
             TWOX-NOTE: OK ��� `AccountId` is a secure hash.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.IdentityController.GetRegistrars">
            <summary>
            >> Registrars
             The set of registrars. Not expected to get very big as can only be added through a
             special origin (likely a council motion).
            
             The index into this can be cast to `RegistrarIndex` to get a valid value.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.ImOnlineController">
            <summary>
            ImOnlineController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ImOnlineController.#ctor(Ajuna.Infrastructure.Storages.IImOnlineStorage)">
            <summary>
            ImOnlineController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ImOnlineController.GetHeartbeatAfter">
            <summary>
            >> HeartbeatAfter
             The block number after which it&#39;s ok to send heartbeats in the current
             session.
            
             At the beginning of each session we set this to a value that should fall
             roughly in the middle of the session duration. The idea is to first wait for
             the validators to produce a block in the current session, so that the
             heartbeat later on will not be necessary.
            
             This value will only be used as a fallback if we fail to get a proper session
             progress estimate from `NextSessionRotation`, as those estimates should be
             more accurate then the value we calculate for `HeartbeatAfter`.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ImOnlineController.GetKeys">
            <summary>
            >> Keys
             The current set of keys that may issue a heartbeat.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ImOnlineController.GetReceivedHeartbeats(System.String)">
            <summary>
            >> ReceivedHeartbeats
             For each session index, we keep a mapping of &#39;SessionIndex` and `AuthIndex` to
             `WrapperOpaque&lt;BoundedOpaqueNetworkState&gt;`.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ImOnlineController.GetAuthoredBlocks(System.String)">
            <summary>
            >> AuthoredBlocks
             For each session index, we keep a mapping of `ValidatorId&lt;T&gt;` to the
             number of blocks authored by the given authority.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.IndicesController">
            <summary>
            IndicesController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.IndicesController.#ctor(Ajuna.Infrastructure.Storages.IIndicesStorage)">
            <summary>
            IndicesController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.IndicesController.GetAccounts(System.String)">
            <summary>
            >> Accounts
             The lookup from index to account.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.LotteryController">
            <summary>
            LotteryController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.LotteryController.#ctor(Ajuna.Infrastructure.Storages.ILotteryStorage)">
            <summary>
            LotteryController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.LotteryController.GetLotteryIndex">
            <summary>
            >> LotteryIndex
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.LotteryController.GetLottery">
            <summary>
            >> Lottery
             The configuration for the current lottery.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.LotteryController.GetParticipants(System.String)">
            <summary>
            >> Participants
             Users who have purchased a ticket. (Lottery Index, Tickets Purchased)
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.LotteryController.GetTicketsCount">
            <summary>
            >> TicketsCount
             Total number of tickets sold.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.LotteryController.GetTickets(System.String)">
            <summary>
            >> Tickets
             Each ticket&#39;s owner.
            
             May have residual storage from previous lotteries. Use `TicketsCount` to see which ones
             are actually valid ticket mappings.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.LotteryController.GetCallIndices">
            <summary>
            >> CallIndices
             The calls stored in this pallet to be used in an active lottery if configured
             by `Config::ValidateCall`.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.MmrController">
            <summary>
            MmrController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.MmrController.#ctor(Ajuna.Infrastructure.Storages.IMmrStorage)">
            <summary>
            MmrController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.MmrController.GetRootHash">
            <summary>
            >> RootHash
             Latest MMR Root hash.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.MmrController.GetNumberOfLeaves">
            <summary>
            >> NumberOfLeaves
             Current size of the MMR (number of leaves).
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.MmrController.GetNodes(System.String)">
            <summary>
            >> Nodes
             Hashes of the nodes in the MMR.
            
             Note this collection only contains MMR peaks, the inner nodes (and leaves)
             are pruned and only stored in the Offchain DB.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.MultisigController">
            <summary>
            MultisigController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.MultisigController.#ctor(Ajuna.Infrastructure.Storages.IMultisigStorage)">
            <summary>
            MultisigController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.MultisigController.GetMultisigs(System.String)">
            <summary>
            >> Multisigs
             The set of open multisig operations.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.MultisigController.GetCalls(System.String)">
            <summary>
            >> Calls
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.OffencesController">
            <summary>
            OffencesController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.OffencesController.#ctor(Ajuna.Infrastructure.Storages.IOffencesStorage)">
            <summary>
            OffencesController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.OffencesController.GetReports(System.String)">
            <summary>
            >> Reports
             The primary structure that holds all offence records keyed by report identifiers.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.OffencesController.GetConcurrentReportsIndex(System.String)">
            <summary>
            >> ConcurrentReportsIndex
             A vector of reports of the same kind that happened at the same time slot.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.OffencesController.GetReportsByKindIndex(System.String)">
            <summary>
            >> ReportsByKindIndex
             Enumerates all reports of a kind along with the time they happened.
            
             All reports are sorted by the time of offence.
            
             Note that the actual type of this mapping is `Vec&lt;u8&gt;`, this is because values of
             different types are not supported at the moment so we are doing the manual serialization.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.ProxyController">
            <summary>
            ProxyController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ProxyController.#ctor(Ajuna.Infrastructure.Storages.IProxyStorage)">
            <summary>
            ProxyController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ProxyController.GetProxies(System.String)">
            <summary>
            >> Proxies
             The set of account proxies. Maps the account which has delegated to the accounts
             which are being delegated to, together with the amount held on deposit.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.ProxyController.GetAnnouncements(System.String)">
            <summary>
            >> Announcements
             The announcements made by the proxy (key).
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.RandomnessCollectiveFlipController">
            <summary>
            RandomnessCollectiveFlipController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.RandomnessCollectiveFlipController.#ctor(Ajuna.Infrastructure.Storages.IRandomnessCollectiveFlipStorage)">
            <summary>
            RandomnessCollectiveFlipController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.RandomnessCollectiveFlipController.GetRandomMaterial">
            <summary>
            >> RandomMaterial
             Series of block headers from the last 81 blocks that acts as random seed material. This
             is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of
             the oldest hash.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.RecoveryController">
            <summary>
            RecoveryController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.RecoveryController.#ctor(Ajuna.Infrastructure.Storages.IRecoveryStorage)">
            <summary>
            RecoveryController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.RecoveryController.GetRecoverable(System.String)">
            <summary>
            >> Recoverable
             The set of recoverable accounts and their recovery configuration.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.RecoveryController.GetActiveRecoveries(System.String)">
            <summary>
            >> ActiveRecoveries
             Active recovery attempts.
            
             First account is the account to be recovered, and the second account
             is the user trying to recover the account.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.RecoveryController.GetProxy(System.String)">
            <summary>
            >> Proxy
             The list of allowed proxy accounts.
            
             Map from the user who can access it to the recovered account.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.SchedulerController">
            <summary>
            SchedulerController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SchedulerController.#ctor(Ajuna.Infrastructure.Storages.ISchedulerStorage)">
            <summary>
            SchedulerController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SchedulerController.GetAgenda(System.String)">
            <summary>
            >> Agenda
             Items to be executed, indexed by the block number that they should be executed on.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SchedulerController.GetLookup(System.String)">
            <summary>
            >> Lookup
             Lookup from identity to the block number and index of the task.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SchedulerController.GetStorageVersion">
            <summary>
            >> StorageVersion
             Storage version of the pallet.
            
             New networks start with last version.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.SessionController">
            <summary>
            SessionController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SessionController.#ctor(Ajuna.Infrastructure.Storages.ISessionStorage)">
            <summary>
            SessionController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SessionController.GetValidators">
            <summary>
            >> Validators
             The current set of validators.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SessionController.GetCurrentIndex">
            <summary>
            >> CurrentIndex
             Current index of the session.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SessionController.GetQueuedChanged">
            <summary>
            >> QueuedChanged
             True if the underlying economic identities or weighting behind the validators
             has changed in the queued validator set.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SessionController.GetQueuedKeys">
            <summary>
            >> QueuedKeys
             The queued keys for the next session. When the next session begins, these keys
             will be used to determine the validator&#39;s session keys.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SessionController.GetDisabledValidators">
            <summary>
            >> DisabledValidators
             Indices of disabled validators.
            
             The set is cleared when `on_session_ending` returns a new set of identities.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SessionController.GetNextKeys(System.String)">
            <summary>
            >> NextKeys
             The next session keys for a validator.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SessionController.GetKeyOwner(System.String)">
            <summary>
            >> KeyOwner
             The owner of a key. The key is the `KeyTypeId` + the encoded key.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.SocietyController">
            <summary>
            SocietyController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SocietyController.#ctor(Ajuna.Infrastructure.Storages.ISocietyStorage)">
            <summary>
            SocietyController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SocietyController.GetFounder">
            <summary>
            >> Founder
             The first member.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SocietyController.GetRules">
            <summary>
            >> Rules
             A hash of the rules of this society concerning membership. Can only be set once and
             only by the founder.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SocietyController.GetCandidates">
            <summary>
            >> Candidates
             The current set of candidates; bidders that are attempting to become members.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SocietyController.GetSuspendedCandidates(System.String)">
            <summary>
            >> SuspendedCandidates
             The set of suspended candidates.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SocietyController.GetPot">
            <summary>
            >> Pot
             Amount of our account balance that is specifically for the next round&#39;s bid(s).
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SocietyController.GetHead">
            <summary>
            >> Head
             The most primary from the most recently approved members.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SocietyController.GetMembers">
            <summary>
            >> Members
             The current set of members, ordered.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SocietyController.GetSuspendedMembers(System.String)">
            <summary>
            >> SuspendedMembers
             The set of suspended members.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SocietyController.GetBids">
            <summary>
            >> Bids
             The current bids, stored ordered by the value of the bid.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SocietyController.GetVouching(System.String)">
            <summary>
            >> Vouching
             Members currently vouching or banned from vouching again
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SocietyController.GetPayouts(System.String)">
            <summary>
            >> Payouts
             Pending payouts; ordered by block number, with the amount that should be paid out.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SocietyController.GetStrikes(System.String)">
            <summary>
            >> Strikes
             The ongoing number of losing votes cast by the member.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SocietyController.GetVotes(System.String)">
            <summary>
            >> Votes
             Double map from Candidate -&gt; Voter -&gt; (Maybe) Vote.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SocietyController.GetDefender">
            <summary>
            >> Defender
             The defending member currently being challenged.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SocietyController.GetDefenderVotes(System.String)">
            <summary>
            >> DefenderVotes
             Votes for the defender.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SocietyController.GetMaxMembers">
            <summary>
            >> MaxMembers
             The max number of members for the society at one time.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.StakingController">
            <summary>
            StakingController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.#ctor(Ajuna.Infrastructure.Storages.IStakingStorage)">
            <summary>
            StakingController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetHistoryDepth">
            <summary>
            >> HistoryDepth
             Number of eras to keep in history.
            
             Information is kept for eras in `[current_era - history_depth; current_era]`.
            
             Must be more than the number of eras delayed by session otherwise. I.e. active era must
             always be in history. I.e. `active_era &gt; current_era - history_depth` must be
             guaranteed.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetValidatorCount">
            <summary>
            >> ValidatorCount
             The ideal number of staking participants.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetMinimumValidatorCount">
            <summary>
            >> MinimumValidatorCount
             Minimum number of staking participants before emergency conditions are imposed.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetInvulnerables">
            <summary>
            >> Invulnerables
             Any validators that may never be slashed or forcibly kicked. It&#39;s a Vec since they&#39;re
             easy to initialize and the performance hit is minimal (we expect no more than four
             invulnerables) and restricted to testnets.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetBonded(System.String)">
            <summary>
            >> Bonded
             Map from all locked &quot;stash&quot; accounts to the controller account.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetMinNominatorBond">
            <summary>
            >> MinNominatorBond
             The minimum active bond to become and maintain the role of a nominator.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetMinValidatorBond">
            <summary>
            >> MinValidatorBond
             The minimum active bond to become and maintain the role of a validator.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetLedger(System.String)">
            <summary>
            >> Ledger
             Map from all (unlocked) &quot;controller&quot; accounts to the info regarding the staking.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetPayee(System.String)">
            <summary>
            >> Payee
             Where the reward payment should be made. Keyed by stash.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetValidators(System.String)">
            <summary>
            >> Validators
             The map from (wannabe) validator stash key to the preferences of that validator.
            
             When updating this storage item, you must also update the `CounterForValidators`.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetCounterForValidators">
            <summary>
            >> CounterForValidators
             A tracker to keep count of the number of items in the `Validators` map.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetMaxValidatorsCount">
            <summary>
            >> MaxValidatorsCount
             The maximum validator count before we stop allowing new validators to join.
            
             When this value is not set, no limits are enforced.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetNominators(System.String)">
            <summary>
            >> Nominators
             The map from nominator stash key to the set of stash keys of all validators to nominate.
            
             When updating this storage item, you must also update the `CounterForNominators`.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetCounterForNominators">
            <summary>
            >> CounterForNominators
             A tracker to keep count of the number of items in the `Nominators` map.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetMaxNominatorsCount">
            <summary>
            >> MaxNominatorsCount
             The maximum nominator count before we stop allowing new validators to join.
            
             When this value is not set, no limits are enforced.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetCurrentEra">
            <summary>
            >> CurrentEra
             The current era index.
            
             This is the latest planned era, depending on how the Session pallet queues the validator
             set, it might be active or not.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetActiveEra">
            <summary>
            >> ActiveEra
             The active era information, it holds index and start.
            
             The active era is the era being currently rewarded. Validator set of this era must be
             equal to [`SessionInterface::validators`].
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetErasStartSessionIndex(System.String)">
            <summary>
            >> ErasStartSessionIndex
             The session index at which the era start for the last `HISTORY_DEPTH` eras.
            
             Note: This tracks the starting session (i.e. session index when era start being active)
             for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetErasStakers(System.String)">
            <summary>
            >> ErasStakers
             Exposure of validator at era.
            
             This is keyed first by the era index to allow bulk deletion and then the stash account.
            
             Is it removed after `HISTORY_DEPTH` eras.
             If stakers hasn&#39;t been set or has been removed then empty exposure is returned.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetErasStakersClipped(System.String)">
            <summary>
            >> ErasStakersClipped
             Clipped Exposure of validator at era.
            
             This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the
             `T::MaxNominatorRewardedPerValidator` biggest stakers.
             (Note: the field `total` and `own` of the exposure remains unchanged).
             This is used to limit the i/o cost for the nominator payout.
            
             This is keyed fist by the era index to allow bulk deletion and then the stash account.
            
             Is it removed after `HISTORY_DEPTH` eras.
             If stakers hasn&#39;t been set or has been removed then empty exposure is returned.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetErasValidatorPrefs(System.String)">
            <summary>
            >> ErasValidatorPrefs
             Similar to `ErasStakers`, this holds the preferences of validators.
            
             This is keyed first by the era index to allow bulk deletion and then the stash account.
            
             Is it removed after `HISTORY_DEPTH` eras.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetErasValidatorReward(System.String)">
            <summary>
            >> ErasValidatorReward
             The total validator era payout for the last `HISTORY_DEPTH` eras.
            
             Eras that haven&#39;t finished yet or has been removed doesn&#39;t have reward.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetErasRewardPoints(System.String)">
            <summary>
            >> ErasRewardPoints
             Rewards for the last `HISTORY_DEPTH` eras.
             If reward hasn&#39;t been set or has been removed then 0 reward is returned.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetErasTotalStake(System.String)">
            <summary>
            >> ErasTotalStake
             The total amount staked for the last `HISTORY_DEPTH` eras.
             If total hasn&#39;t been set or has been removed then 0 stake is returned.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetForceEra">
            <summary>
            >> ForceEra
             Mode of era forcing.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetSlashRewardFraction">
            <summary>
            >> SlashRewardFraction
             The percentage of the slash that is distributed to reporters.
            
             The rest of the slashed value is handled by the `Slash`.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetCanceledSlashPayout">
            <summary>
            >> CanceledSlashPayout
             The amount of currency given to reporters of a slash event which was
             canceled by extraordinary circumstances (e.g. governance).
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetUnappliedSlashes(System.String)">
            <summary>
            >> UnappliedSlashes
             All unapplied slashes that are queued for later.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetBondedEras">
            <summary>
            >> BondedEras
             A mapping from still-bonded eras to the first session index of that era.
            
             Must contains information for eras for the range:
             `[active_era - bounding_duration; active_era]`
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetValidatorSlashInEra(System.String)">
            <summary>
            >> ValidatorSlashInEra
             All slashing events on validators, mapped by era to the highest slash proportion
             and slash value of the era.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetNominatorSlashInEra(System.String)">
            <summary>
            >> NominatorSlashInEra
             All slashing events on nominators, mapped by era to the highest slash value of the era.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetSlashingSpans(System.String)">
            <summary>
            >> SlashingSpans
             Slashing spans for stash accounts.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetSpanSlash(System.String)">
            <summary>
            >> SpanSlash
             Records information about the maximum slash of a stash within a slashing span,
             as well as how much reward has been paid out.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetEarliestUnappliedSlash">
            <summary>
            >> EarliestUnappliedSlash
             The earliest era for which we have a pending, unapplied slash.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetCurrentPlannedSession">
            <summary>
            >> CurrentPlannedSession
             The last planned session scheduled by the session pallet.
            
             This is basically in sync with the call to [`pallet_session::SessionManager::new_session`].
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetStorageVersion">
            <summary>
            >> StorageVersion
             True if network has been upgraded to this version.
             Storage version of the pallet.
            
             This is set to v7.0.0 for new networks.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.StakingController.GetChillThreshold">
            <summary>
            >> ChillThreshold
             The threshold for when users can start calling `chill_other` for other validators /
             nominators. The threshold is compared to the actual number of validators / nominators
             (`CountFor*`) in the system compared to the configured max (`Max*Count`).
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.SudoController">
            <summary>
            SudoController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SudoController.#ctor(Ajuna.Infrastructure.Storages.ISudoStorage)">
            <summary>
            SudoController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SudoController.GetKey">
            <summary>
            >> Key
             The `AccountId` of the sudo key.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.SystemController">
            <summary>
            SystemController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SystemController.#ctor(Ajuna.Infrastructure.Storages.ISystemStorage)">
            <summary>
            SystemController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SystemController.GetAccount(System.String)">
            <summary>
            >> Account
             The full account information for a particular account ID.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SystemController.GetExtrinsicCount">
            <summary>
            >> ExtrinsicCount
             Total extrinsics count for the current block.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SystemController.GetBlockWeight">
            <summary>
            >> BlockWeight
             The current weight for the block.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SystemController.GetAllExtrinsicsLen">
            <summary>
            >> AllExtrinsicsLen
             Total length (in bytes) for all extrinsics put together, for the current block.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SystemController.GetBlockHash(System.String)">
            <summary>
            >> BlockHash
             Map of block numbers to block hashes.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SystemController.GetExtrinsicData(System.String)">
            <summary>
            >> ExtrinsicData
             Extrinsics data for the current block (maps an extrinsic&#39;s index to its data).
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SystemController.GetNumber">
            <summary>
            >> Number
             The current block number being processed. Set by `execute_block`.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SystemController.GetParentHash">
            <summary>
            >> ParentHash
             Hash of the previous block.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SystemController.GetDigest">
            <summary>
            >> Digest
             Digest of the current block, also part of the block header.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SystemController.GetEvents">
            <summary>
            >> Events
             Events deposited for the current block.
            
             NOTE: This storage item is explicitly unbounded since it is never intended to be read
             from within the runtime.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SystemController.GetEventCount">
            <summary>
            >> EventCount
             The number of events in the `Events&lt;T&gt;` list.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SystemController.GetEventTopics(System.String)">
            <summary>
            >> EventTopics
             Mapping between a topic (represented by T::Hash) and a vector of indexes
             of events in the `&lt;Events&lt;T&gt;&gt;` list.
            
             All topic vectors have deterministic storage locations depending on the topic. This
             allows light-clients to leverage the changes trie storage tracking mechanism and
             in case of changes fetch the list of events of interest.
            
             The value has the type `(T::BlockNumber, EventIndex)` because if we used only just
             the `EventIndex` then in case if the topic has the same contents on the next block
             no notification will be triggered thus the event might be lost.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SystemController.GetLastRuntimeUpgrade">
            <summary>
            >> LastRuntimeUpgrade
             Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SystemController.GetUpgradedToU32RefCount">
            <summary>
            >> UpgradedToU32RefCount
             True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SystemController.GetUpgradedToTripleRefCount">
            <summary>
            >> UpgradedToTripleRefCount
             True if we have upgraded so that AccountInfo contains three types of `RefCount`. False
             (default) if not.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.SystemController.GetExecutionPhase">
            <summary>
            >> ExecutionPhase
             The execution phase of the block.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.TechnicalCommitteeController">
            <summary>
            TechnicalCommitteeController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TechnicalCommitteeController.#ctor(Ajuna.Infrastructure.Storages.ITechnicalCommitteeStorage)">
            <summary>
            TechnicalCommitteeController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TechnicalCommitteeController.GetProposals">
            <summary>
            >> Proposals
             The hashes of the active proposals.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TechnicalCommitteeController.GetProposalOf(System.String)">
            <summary>
            >> ProposalOf
             Actual proposal for a given hash, if it&#39;s current.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TechnicalCommitteeController.GetVoting(System.String)">
            <summary>
            >> Voting
             Votes on a given proposal, if it is ongoing.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TechnicalCommitteeController.GetProposalCount">
            <summary>
            >> ProposalCount
             Proposals so far.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TechnicalCommitteeController.GetMembers">
            <summary>
            >> Members
             The current members of the collective. This is stored sorted (just by value).
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TechnicalCommitteeController.GetPrime">
            <summary>
            >> Prime
             The prime member that helps determine the default vote behavior in case of absentations.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.TechnicalMembershipController">
            <summary>
            TechnicalMembershipController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TechnicalMembershipController.#ctor(Ajuna.Infrastructure.Storages.ITechnicalMembershipStorage)">
            <summary>
            TechnicalMembershipController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TechnicalMembershipController.GetMembers">
            <summary>
            >> Members
             The current membership, stored as an ordered Vec.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TechnicalMembershipController.GetPrime">
            <summary>
            >> Prime
             The current prime member, if one exists.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.TimestampController">
            <summary>
            TimestampController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TimestampController.#ctor(Ajuna.Infrastructure.Storages.ITimestampStorage)">
            <summary>
            TimestampController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TimestampController.GetNow">
            <summary>
            >> Now
             Current time for the current block.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TimestampController.GetDidUpdate">
            <summary>
            >> DidUpdate
             Did the timestamp get updated in this block?
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.TipsController">
            <summary>
            TipsController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TipsController.#ctor(Ajuna.Infrastructure.Storages.ITipsStorage)">
            <summary>
            TipsController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TipsController.GetTips(System.String)">
            <summary>
            >> Tips
             TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.
             This has the insecure enumerable hash function since the key itself is already
             guaranteed to be a secure hash.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TipsController.GetReasons(System.String)">
            <summary>
            >> Reasons
             Simple preimage lookup from the reason&#39;s hash to the original data. Again, has an
             insecure enumerable hash since the key is guaranteed to be the result of a secure hash.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.TransactionPaymentController">
            <summary>
            TransactionPaymentController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TransactionPaymentController.#ctor(Ajuna.Infrastructure.Storages.ITransactionPaymentStorage)">
            <summary>
            TransactionPaymentController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TransactionPaymentController.GetNextFeeMultiplier">
            <summary>
            >> NextFeeMultiplier
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TransactionPaymentController.GetStorageVersion">
            <summary>
            >> StorageVersion
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.TransactionStorageController">
            <summary>
            TransactionStorageController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TransactionStorageController.#ctor(Ajuna.Infrastructure.Storages.ITransactionStorageStorage)">
            <summary>
            TransactionStorageController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TransactionStorageController.GetTransactions(System.String)">
            <summary>
            >> Transactions
             Collection of transaction metadata by block number.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TransactionStorageController.GetChunkCount(System.String)">
            <summary>
            >> ChunkCount
             Count indexed chunks for each block.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TransactionStorageController.GetByteFee">
            <summary>
            >> ByteFee
             Storage fee per byte.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TransactionStorageController.GetEntryFee">
            <summary>
            >> EntryFee
             Storage fee per transaction.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TransactionStorageController.GetMaxTransactionSize">
            <summary>
            >> MaxTransactionSize
             Maximum data set in a single transaction in bytes.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TransactionStorageController.GetMaxBlockTransactions">
            <summary>
            >> MaxBlockTransactions
             Maximum number of indexed transactions in the block.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TransactionStorageController.GetStoragePeriod">
            <summary>
            >> StoragePeriod
             Storage period for data in blocks. Should match `sp_storage_proof::DEFAULT_STORAGE_PERIOD`
             for block authoring.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TransactionStorageController.GetBlockTransactions">
            <summary>
            >> BlockTransactions
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TransactionStorageController.GetProofChecked">
            <summary>
            >> ProofChecked
             Was the proof checked in this block?
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.TreasuryController">
            <summary>
            TreasuryController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TreasuryController.#ctor(Ajuna.Infrastructure.Storages.ITreasuryStorage)">
            <summary>
            TreasuryController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TreasuryController.GetProposalCount">
            <summary>
            >> ProposalCount
             Number of proposals that have been made.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TreasuryController.GetProposals(System.String)">
            <summary>
            >> Proposals
             Proposals that have been made.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.TreasuryController.GetApprovals">
            <summary>
            >> Approvals
             Proposal indices that have been approved but not yet awarded.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.UniquesController">
            <summary>
            UniquesController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.UniquesController.#ctor(Ajuna.Infrastructure.Storages.IUniquesStorage)">
            <summary>
            UniquesController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.UniquesController.GetClass(System.String)">
            <summary>
            >> Class
             Details of an asset class.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.UniquesController.GetAccount(System.String)">
            <summary>
            >> Account
             The assets held by any given account; set out this way so that assets owned by a single
             account can be enumerated.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.UniquesController.GetAsset(System.String)">
            <summary>
            >> Asset
             The assets in existence and their ownership details.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.UniquesController.GetClassMetadataOf(System.String)">
            <summary>
            >> ClassMetadataOf
             Metadata of an asset class.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.UniquesController.GetInstanceMetadataOf(System.String)">
            <summary>
            >> InstanceMetadataOf
             Metadata of an asset instance.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.UniquesController.GetAttribute(System.String)">
            <summary>
            >> Attribute
             Metadata of an asset class.
            </summary>
        </member>
        <member name="T:Ajuna.Infrastructure.RestService.Controller.VestingController">
            <summary>
            VestingController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.VestingController.#ctor(Ajuna.Infrastructure.Storages.IVestingStorage)">
            <summary>
            VestingController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.VestingController.GetVesting(System.String)">
            <summary>
            >> Vesting
             Information regarding the vesting of a given account.
            </summary>
        </member>
        <member name="M:Ajuna.Infrastructure.RestService.Controller.VestingController.GetStorageVersion">
            <summary>
            >> StorageVersion
             Storage version of the pallet.
            
             New networks start with latest version, as determined by the genesis build.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Formatters.AjunaOutputFormatter">
            <summary>
            >> AjunaOutputFormatter
            The AjunaOutputFormatter implements a custom formatter to easily encode any substrate type.
            Types are hex-encoded and uses the media type text/ajuna.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Formatters.AjunaOutputFormatter.#ctor">
            <summary>
            Initializes the custom output formatter.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Formatters.AjunaOutputFormatter.CanWriteType(System.Type)">
            <summary>
            Validates the given runtime type and checks whether it is assignable from BaseType class that is the base
            type of any substrate custom type.
            </summary>
            <param name="type">The given type to check against.</param>
            <returns>Returns true whether the requested type is formattable or not.</returns>
        </member>
        <member name="M:Ajuna.RestService.Formatters.AjunaOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext,System.Text.Encoding)">
            <summary>
            Encodes and writes the given context object to the output stream.
            </summary>
            <param name="context">The given context.</param>
            <param name="selectedEncoding">The given encoding.</param>
        </member>
        <member name="T:Ajuna.RestService.Program">
            <summary>
            >> Program
            Setting up the Rest Service.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Program.Main(System.String[])">
            <summary>
            Entrypoint
            </summary>
            <param name="args">Command line arguments.</param>
        </member>
        <member name="M:Ajuna.RestService.Program.CreateHostBuilder(System.String[])">
            <summary>
            Setup the Rest Service host.
            </summary>
            <param name="args">Command line arguments.</param>
            <returns>The host.</returns>
        </member>
        <member name="T:Ajuna.RestService.Startup">
            <summary>
            This class implements configuration and setting up services.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            >> Startup
            Constructs and initializes the Startup class.
            Stores the configuration object
            </summary>
            <param name="configuration">The service configuration.</param>
        </member>
        <member name="P:Ajuna.RestService.Startup.Configuration">
            <summary>
            Retreives the service configuration.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container. 
            </summary>
            <param name="services">Service collection to configure.</param>
        </member>
        <member name="M:Ajuna.RestService.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Ajuna.AspNetCore.StorageSubscriptionHandler)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline. 
            </summary>
            <param name="app">Application builder</param>
            <param name="env">Service hosting environment</param>
            <param name="handler">Middleware to handle web socket subscriptions</param>
        </member>
    </members>
</doc>
