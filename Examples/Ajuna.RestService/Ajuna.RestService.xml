<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ajuna.RestService</name>
    </assembly>
    <members>
        <member name="T:Ajuna.RestService.Formatters.AjunaOutputFormatter">
            <summary>
            >> AjunaOutputFormatter
            The AjunaOutputFormatter implements a custom formatter to easily encode any substrate type.
            Types are hex-encoded and uses the media type text/ajuna.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Formatters.AjunaOutputFormatter.#ctor">
            <summary>
            Initializes the custom output formatter.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Formatters.AjunaOutputFormatter.CanWriteType(System.Type)">
            <summary>
            Validates the given runtime type and checks whether it is assignable from BaseType class that is the base
            type of any substrate custom type.
            </summary>
            <param name="type">The given type to check against.</param>
            <returns>Returns true whether the requested type is formattable or not.</returns>
        </member>
        <member name="M:Ajuna.RestService.Formatters.AjunaOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext,System.Text.Encoding)">
            <summary>
            Encodes and writes the given context object to the output stream.
            </summary>
            <param name="context">The given context.</param>
            <param name="selectedEncoding">The given encoding.</param>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.AssetsController">
            <summary>
            AssetsController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.AssetsController.#ctor(Ajuna.RestService.Generated.Storage.IAssetsStorage)">
            <summary>
            AssetsController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.AssetsController.GetAsset(System.String)">
            <summary>
            >> Asset
             Details of an asset.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.AssetsController.GetAccount(System.String)">
            <summary>
            >> Account
             The number of units of assets held by any given account.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.AssetsController.GetApprovals(System.String)">
            <summary>
            >> Approvals
             Approved balance transfers. First balance is the amount approved for transfer. Second
             is the amount of `T::Currency` reserved for storing this.
             First key is the asset ID, second key is the owner and third key is the delegate.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.AssetsController.GetMetadata(System.String)">
            <summary>
            >> Metadata
             Metadata of an asset.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.AuthorshipController">
            <summary>
            AuthorshipController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.AuthorshipController.#ctor(Ajuna.RestService.Generated.Storage.IAuthorshipStorage)">
            <summary>
            AuthorshipController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.AuthorshipController.GetUncles">
            <summary>
            >> Uncles
             Uncles
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.AuthorshipController.GetAuthor">
            <summary>
            >> Author
             Author of current block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.AuthorshipController.GetDidSetUncles">
            <summary>
            >> DidSetUncles
             Whether uncles were already set in this block.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.BabeController">
            <summary>
            BabeController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BabeController.#ctor(Ajuna.RestService.Generated.Storage.IBabeStorage)">
            <summary>
            BabeController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BabeController.GetEpochIndex">
            <summary>
            >> EpochIndex
             Current epoch index.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BabeController.GetAuthorities">
            <summary>
            >> Authorities
             Current epoch authorities.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BabeController.GetGenesisSlot">
            <summary>
            >> GenesisSlot
             The slot at which the first epoch actually started. This is 0
             until the first block of the chain.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BabeController.GetCurrentSlot">
            <summary>
            >> CurrentSlot
             Current slot number.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BabeController.GetRandomness">
            <summary>
            >> Randomness
             The epoch randomness for the *current* epoch.
            
             # Security
            
             This MUST NOT be used for gambling, as it can be influenced by a
             malicious validator in the short term. It MAY be used in many
             cryptographic protocols, however, so long as one remembers that this
             (like everything else on-chain) it is public. For example, it can be
             used where a number is needed that cannot have been chosen by an
             adversary, for purposes such as public-coin zero-knowledge proofs.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BabeController.GetPendingEpochConfigChange">
            <summary>
            >> PendingEpochConfigChange
             Pending epoch configuration change that will be applied when the next epoch is enacted.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BabeController.GetNextRandomness">
            <summary>
            >> NextRandomness
             Next epoch randomness.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BabeController.GetNextAuthorities">
            <summary>
            >> NextAuthorities
             Next epoch authorities.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BabeController.GetSegmentIndex">
            <summary>
            >> SegmentIndex
             Randomness under construction.
            
             We make a tradeoff between storage accesses and list length.
             We store the under-construction randomness in segments of up to
             `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.
            
             Once a segment reaches this length, we begin the next one.
             We reset all segments and return to `0` at the beginning of every
             epoch.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BabeController.GetUnderConstruction(System.String)">
            <summary>
            >> UnderConstruction
             TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BabeController.GetInitialized">
            <summary>
            >> Initialized
             Temporary value (cleared at block finalization) which is `Some`
             if per-block initialization has already been called for current block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BabeController.GetAuthorVrfRandomness">
            <summary>
            >> AuthorVrfRandomness
             This field should always be populated during block processing unless
             secondary plain slots are enabled (which don&#39;t contain a VRF output).
            
             It is set in `on_initialize`, before it will contain the value from the last block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BabeController.GetEpochStart">
            <summary>
            >> EpochStart
             The block numbers when the last and current epoch have started, respectively `N-1` and
             `N`.
             NOTE: We track this is in order to annotate the block number when a given pool of
             entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in
             slots, which may be skipped, the block numbers may not line up with the slot numbers.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BabeController.GetLateness">
            <summary>
            >> Lateness
             How late the current block is compared to its parent.
            
             This entry is populated as part of block execution and is cleaned up
             on block finalization. Querying this storage entry outside of block
             execution context should always yield zero.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BabeController.GetEpochConfig">
            <summary>
            >> EpochConfig
             The configuration for the current epoch. Should never be `None` as it is initialized in
             genesis.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BabeController.GetNextEpochConfig">
            <summary>
            >> NextEpochConfig
             The configuration for the next epoch, `None` if the config will not change
             (you can fallback to `EpochConfig` instead in that case).
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.BagsListController">
            <summary>
            BagsListController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BagsListController.#ctor(Ajuna.RestService.Generated.Storage.IBagsListStorage)">
            <summary>
            BagsListController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BagsListController.GetCounterForListNodes">
            <summary>
            >> CounterForListNodes
             How many ids are registered.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BagsListController.GetListNodes(System.String)">
            <summary>
            >> ListNodes
             A single node, within some bag.
            
             Nodes store links forward and back within their respective bags.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BagsListController.GetListBags(System.String)">
            <summary>
            >> ListBags
             A bag stored in storage.
            
             Stores a `Bag` struct, which stores head and tail pointers to itself.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.BalancesController">
            <summary>
            BalancesController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BalancesController.#ctor(Ajuna.RestService.Generated.Storage.IBalancesStorage)">
            <summary>
            BalancesController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BalancesController.GetTotalIssuance">
            <summary>
            >> TotalIssuance
             The total units issued in the system.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BalancesController.GetAccount(System.String)">
            <summary>
            >> Account
             The balance of an account.
            
             NOTE: This is only used in the case that this pallet is used to store balances.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BalancesController.GetLocks(System.String)">
            <summary>
            >> Locks
             Any liquidity locks on some account balances.
             NOTE: Should only be accessed when setting, changing and freeing a lock.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BalancesController.GetReserves(System.String)">
            <summary>
            >> Reserves
             Named reserves on some account balances.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BalancesController.GetStorageVersion">
            <summary>
            >> StorageVersion
             Storage version of the pallet.
            
             This is set to v2.0.0 for new networks.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.BoilerPlateController">
            <summary>
            BoilerPlateController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BoilerPlateController.#ctor(Ajuna.RestService.Generated.Storage.IBoilerPlateStorage)">
            <summary>
            BoilerPlateController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BoilerPlateController.GetSomething">
            <summary>
            >> Something
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.BountiesController">
            <summary>
            BountiesController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BountiesController.#ctor(Ajuna.RestService.Generated.Storage.IBountiesStorage)">
            <summary>
            BountiesController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BountiesController.GetBountyCount">
            <summary>
            >> BountyCount
             Number of bounty proposals that have been made.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BountiesController.GetBounties(System.String)">
            <summary>
            >> Bounties
             Bounties that have been made.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BountiesController.GetBountyDescriptions(System.String)">
            <summary>
            >> BountyDescriptions
             The description of each bounty.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.BountiesController.GetBountyApprovals">
            <summary>
            >> BountyApprovals
             Bounty indices that have been approved but not yet funded.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.ConnectFourController">
            <summary>
            ConnectFourController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ConnectFourController.#ctor(Ajuna.RestService.Generated.Storage.IConnectFourStorage)">
            <summary>
            ConnectFourController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ConnectFourController.GetSomething">
            <summary>
            >> Something
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ConnectFourController.GetFounderKey">
            <summary>
            >> FounderKey
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ConnectFourController.GetBoards(System.String)">
            <summary>
            >> Boards
             Store all boards that are currently being played.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ConnectFourController.GetPlayerBoard(System.String)">
            <summary>
            >> PlayerBoard
             Store players active board, currently only one board per player allowed.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ConnectFourController.GetBoardSchedules(System.String)">
            <summary>
            >> BoardSchedules
             Store boards open schedules.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ConnectFourController.GetNonce">
            <summary>
            >> Nonce
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.ConnectFourMamaController">
            <summary>
            ConnectFourMamaController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ConnectFourMamaController.#ctor(Ajuna.RestService.Generated.Storage.IConnectFourMamaStorage)">
            <summary>
            ConnectFourMamaController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ConnectFourMamaController.GetBracketsCount">
            <summary>
            >> BracketsCount
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ConnectFourMamaController.GetBracketIndices(System.String)">
            <summary>
            >> BracketIndices
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ConnectFourMamaController.GetBracketIndexKeyMap(System.String)">
            <summary>
            >> BracketIndexKeyMap
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ConnectFourMamaController.GetBracketKeyValueMap(System.String)">
            <summary>
            >> BracketKeyValueMap
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.ContractsController">
            <summary>
            ContractsController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ContractsController.#ctor(Ajuna.RestService.Generated.Storage.IContractsStorage)">
            <summary>
            ContractsController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ContractsController.GetPristineCode(System.String)">
            <summary>
            >> PristineCode
             A mapping from an original code hash to the original code, untouched by instrumentation.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ContractsController.GetCodeStorage(System.String)">
            <summary>
            >> CodeStorage
             A mapping between an original code hash and instrumented wasm code, ready for execution.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ContractsController.GetAccountCounter">
            <summary>
            >> AccountCounter
             The subtrie counter.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ContractsController.GetContractInfoOf(System.String)">
            <summary>
            >> ContractInfoOf
             The code associated with a given account.
            
             TWOX-NOTE: SAFE since `AccountId` is a secure hash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ContractsController.GetDeletionQueue">
            <summary>
            >> DeletionQueue
             Evicted contracts that await child trie deletion.
            
             Child trie deletion is a heavy operation depending on the amount of storage items
             stored in said trie. Therefore this operation is performed lazily in `on_initialize`.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.CouncilController">
            <summary>
            CouncilController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.CouncilController.#ctor(Ajuna.RestService.Generated.Storage.ICouncilStorage)">
            <summary>
            CouncilController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.CouncilController.GetProposals">
            <summary>
            >> Proposals
             The hashes of the active proposals.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.CouncilController.GetProposalOf(System.String)">
            <summary>
            >> ProposalOf
             Actual proposal for a given hash, if it&#39;s current.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.CouncilController.GetVoting(System.String)">
            <summary>
            >> Voting
             Votes on a given proposal, if it is ongoing.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.CouncilController.GetProposalCount">
            <summary>
            >> ProposalCount
             Proposals so far.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.CouncilController.GetMembers">
            <summary>
            >> Members
             The current members of the collective. This is stored sorted (just by value).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.CouncilController.GetPrime">
            <summary>
            >> Prime
             The prime member that helps determine the default vote behavior in case of absentations.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.DemocracyController">
            <summary>
            DemocracyController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.DemocracyController.#ctor(Ajuna.RestService.Generated.Storage.IDemocracyStorage)">
            <summary>
            DemocracyController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.DemocracyController.GetPublicPropCount">
            <summary>
            >> PublicPropCount
             The number of (public) proposals that have been made so far.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.DemocracyController.GetPublicProps">
            <summary>
            >> PublicProps
             The public proposals. Unsorted. The second item is the proposal&#39;s hash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.DemocracyController.GetDepositOf(System.String)">
            <summary>
            >> DepositOf
             Those who have locked a deposit.
            
             TWOX-NOTE: Safe, as increasing integer keys are safe.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.DemocracyController.GetPreimages(System.String)">
            <summary>
            >> Preimages
             Map of hashes to the proposal preimage, along with who registered it and their deposit.
             The block number is the block at which it was deposited.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.DemocracyController.GetReferendumCount">
            <summary>
            >> ReferendumCount
             The next free referendum index, aka the number of referenda started so far.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.DemocracyController.GetLowestUnbaked">
            <summary>
            >> LowestUnbaked
             The lowest referendum index representing an unbaked referendum. Equal to
             `ReferendumCount` if there isn&#39;t a unbaked referendum.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.DemocracyController.GetReferendumInfoOf(System.String)">
            <summary>
            >> ReferendumInfoOf
             Information concerning any given referendum.
            
             TWOX-NOTE: SAFE as indexes are not under an attacker���s control.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.DemocracyController.GetVotingOf(System.String)">
            <summary>
            >> VotingOf
             All votes for a particular voter. We store the balance for the number of votes that we
             have recorded. The second item is the total amount of delegations, that will be added.
            
             TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.DemocracyController.GetLocks(System.String)">
            <summary>
            >> Locks
             Accounts for which there are locks in action which may be removed at some point in the
             future. The value is the block number at which the lock expires and may be removed.
            
             TWOX-NOTE: OK ��� `AccountId` is a secure hash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.DemocracyController.GetLastTabledWasExternal">
            <summary>
            >> LastTabledWasExternal
             True if the last referendum tabled was submitted externally. False if it was a public
             proposal.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.DemocracyController.GetNextExternal">
            <summary>
            >> NextExternal
             The referendum to be tabled whenever it would be valid to table an external proposal.
             This happens when a referendum needs to be tabled and one of two conditions are met:
             - `LastTabledWasExternal` is `false`; or
             - `PublicProps` is empty.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.DemocracyController.GetBlacklist(System.String)">
            <summary>
            >> Blacklist
             A record of who vetoed what. Maps proposal hash to a possible existent block number
             (until when it may not be resubmitted) and who vetoed it.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.DemocracyController.GetCancellations(System.String)">
            <summary>
            >> Cancellations
             Record of all proposals that have been subject to emergency cancellation.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.DemocracyController.GetStorageVersion">
            <summary>
            >> StorageVersion
             Storage version of the pallet.
            
             New networks start with last version.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.ElectionProviderMultiPhaseController">
            <summary>
            ElectionProviderMultiPhaseController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ElectionProviderMultiPhaseController.#ctor(Ajuna.RestService.Generated.Storage.IElectionProviderMultiPhaseStorage)">
            <summary>
            ElectionProviderMultiPhaseController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ElectionProviderMultiPhaseController.GetRound">
            <summary>
            >> Round
             Internal counter for the number of rounds.
            
             This is useful for de-duplication of transactions submitted to the pool, and general
             diagnostics of the pallet.
            
             This is merely incremented once per every time that an upstream `elect` is called.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ElectionProviderMultiPhaseController.GetCurrentPhase">
            <summary>
            >> CurrentPhase
             Current phase.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ElectionProviderMultiPhaseController.GetQueuedSolution">
            <summary>
            >> QueuedSolution
             Current best solution, signed or unsigned, queued to be returned upon `elect`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ElectionProviderMultiPhaseController.GetSnapshot">
            <summary>
            >> Snapshot
             Snapshot data of the round.
            
             This is created at the beginning of the signed phase and cleared upon calling `elect`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ElectionProviderMultiPhaseController.GetDesiredTargets">
            <summary>
            >> DesiredTargets
             Desired number of targets to elect for this round.
            
             Only exists when [`Snapshot`] is present.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ElectionProviderMultiPhaseController.GetSnapshotMetadata">
            <summary>
            >> SnapshotMetadata
             The metadata of the [`RoundSnapshot`]
            
             Only exists when [`Snapshot`] is present.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ElectionProviderMultiPhaseController.GetSignedSubmissionNextIndex">
            <summary>
            >> SignedSubmissionNextIndex
             The next index to be assigned to an incoming signed submission.
            
             Every accepted submission is assigned a unique index; that index is bound to that particular
             submission for the duration of the election. On election finalization, the next index is
             reset to 0.
            
             We can&#39;t just use `SignedSubmissionIndices.len()`, because that&#39;s a bounded set; past its
             capacity, it will simply saturate. We can&#39;t just iterate over `SignedSubmissionsMap`,
             because iteration is slow. Instead, we store the value here.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ElectionProviderMultiPhaseController.GetSignedSubmissionIndices">
            <summary>
            >> SignedSubmissionIndices
             A sorted, bounded set of `(score, index)`, where each `index` points to a value in
             `SignedSubmissions`.
            
             We never need to process more than a single signed submission at a time. Signed submissions
             can be quite large, so we&#39;re willing to pay the cost of multiple database accesses to access
             them one at a time instead of reading and decoding all of them at once.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ElectionProviderMultiPhaseController.GetSignedSubmissionsMap(System.String)">
            <summary>
            >> SignedSubmissionsMap
             Unchecked, signed solutions.
            
             Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while
             allowing us to keep only a single one in memory at a time.
            
             Twox note: the key of the map is an auto-incrementing index which users cannot inspect or
             affect; we shouldn&#39;t need a cryptographically secure hasher.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ElectionProviderMultiPhaseController.GetMinimumUntrustedScore">
            <summary>
            >> MinimumUntrustedScore
             The minimum score that each &#39;untrusted&#39; solution must attain in order to be considered
             feasible.
            
             Can be set via `set_minimum_untrusted_score`.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.ElectionsController">
            <summary>
            ElectionsController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ElectionsController.#ctor(Ajuna.RestService.Generated.Storage.IElectionsStorage)">
            <summary>
            ElectionsController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ElectionsController.GetMembers">
            <summary>
            >> Members
             The current elected members.
            
             Invariant: Always sorted based on account id.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ElectionsController.GetRunnersUp">
            <summary>
            >> RunnersUp
             The current reserved runners-up.
            
             Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the
             last (i.e. _best_) runner-up will be replaced.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ElectionsController.GetCandidates">
            <summary>
            >> Candidates
             The present candidate list. A current member or runner-up can never enter this vector
             and is always implicitly assumed to be a candidate.
            
             Second element is the deposit.
            
             Invariant: Always sorted based on account id.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ElectionsController.GetElectionRounds">
            <summary>
            >> ElectionRounds
             The total number of vote rounds that have happened, excluding the upcoming one.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ElectionsController.GetVoting(System.String)">
            <summary>
            >> Voting
             Votes and locked stake of a particular voter.
            
             TWOX-NOTE: SAFE as `AccountId` is a crypto hash.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.GiltController">
            <summary>
            GiltController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.GiltController.#ctor(Ajuna.RestService.Generated.Storage.IGiltStorage)">
            <summary>
            GiltController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.GiltController.GetQueueTotals">
            <summary>
            >> QueueTotals
             The totals of items and balances within each queue. Saves a lot of storage reads in the
             case of sparsely packed queues.
            
             The vector is indexed by duration in `Period`s, offset by one, so information on the queue
             whose duration is one `Period` would be storage `0`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.GiltController.GetQueues(System.String)">
            <summary>
            >> Queues
             The queues of bids ready to become gilts. Indexed by duration (in `Period`s).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.GiltController.GetActiveTotal">
            <summary>
            >> ActiveTotal
             Information relating to the gilts currently active.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.GiltController.GetActive(System.String)">
            <summary>
            >> Active
             The currently active gilts, indexed according to the order of creation.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.GrandpaController">
            <summary>
            GrandpaController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.GrandpaController.#ctor(Ajuna.RestService.Generated.Storage.IGrandpaStorage)">
            <summary>
            GrandpaController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.GrandpaController.GetState">
            <summary>
            >> State
             State of the current authority set.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.GrandpaController.GetPendingChange">
            <summary>
            >> PendingChange
             Pending change: (signaled at, scheduled change).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.GrandpaController.GetNextForced">
            <summary>
            >> NextForced
             next block number where we can force a change.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.GrandpaController.GetStalled">
            <summary>
            >> Stalled
             `true` if we are currently stalled.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.GrandpaController.GetCurrentSetId">
            <summary>
            >> CurrentSetId
             The number of changes (both in terms of keys and underlying economic responsibilities)
             in the &quot;set&quot; of Grandpa validators from genesis.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.GrandpaController.GetSetIdSession(System.String)">
            <summary>
            >> SetIdSession
             A mapping from grandpa set ID to the index of the *most recent* session for which its
             members were responsible.
            
             TWOX-NOTE: `SetId` is not under user control.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.IdentityController">
            <summary>
            IdentityController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.IdentityController.#ctor(Ajuna.RestService.Generated.Storage.IIdentityStorage)">
            <summary>
            IdentityController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.IdentityController.GetIdentityOf(System.String)">
            <summary>
            >> IdentityOf
             Information that is pertinent to identify the entity behind an account.
            
             TWOX-NOTE: OK ��� `AccountId` is a secure hash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.IdentityController.GetSuperOf(System.String)">
            <summary>
            >> SuperOf
             The super-identity of an alternative &quot;sub&quot; identity together with its name, within that
             context. If the account is not some other account&#39;s sub-identity, then just `None`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.IdentityController.GetSubsOf(System.String)">
            <summary>
            >> SubsOf
             Alternative &quot;sub&quot; identities of this account.
            
             The first item is the deposit, the second is a vector of the accounts.
            
             TWOX-NOTE: OK ��� `AccountId` is a secure hash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.IdentityController.GetRegistrars">
            <summary>
            >> Registrars
             The set of registrars. Not expected to get very big as can only be added through a
             special origin (likely a council motion).
            
             The index into this can be cast to `RegistrarIndex` to get a valid value.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.ImOnlineController">
            <summary>
            ImOnlineController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ImOnlineController.#ctor(Ajuna.RestService.Generated.Storage.IImOnlineStorage)">
            <summary>
            ImOnlineController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ImOnlineController.GetHeartbeatAfter">
            <summary>
            >> HeartbeatAfter
             The block number after which it&#39;s ok to send heartbeats in the current
             session.
            
             At the beginning of each session we set this to a value that should fall
             roughly in the middle of the session duration. The idea is to first wait for
             the validators to produce a block in the current session, so that the
             heartbeat later on will not be necessary.
            
             This value will only be used as a fallback if we fail to get a proper session
             progress estimate from `NextSessionRotation`, as those estimates should be
             more accurate then the value we calculate for `HeartbeatAfter`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ImOnlineController.GetKeys">
            <summary>
            >> Keys
             The current set of keys that may issue a heartbeat.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ImOnlineController.GetReceivedHeartbeats(System.String)">
            <summary>
            >> ReceivedHeartbeats
             For each session index, we keep a mapping of &#39;SessionIndex` and `AuthIndex` to
             `WrapperOpaque&lt;BoundedOpaqueNetworkState&gt;`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ImOnlineController.GetAuthoredBlocks(System.String)">
            <summary>
            >> AuthoredBlocks
             For each session index, we keep a mapping of `ValidatorId&lt;T&gt;` to the
             number of blocks authored by the given authority.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.IndicesController">
            <summary>
            IndicesController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.IndicesController.#ctor(Ajuna.RestService.Generated.Storage.IIndicesStorage)">
            <summary>
            IndicesController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.IndicesController.GetAccounts(System.String)">
            <summary>
            >> Accounts
             The lookup from index to account.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.LotteryController">
            <summary>
            LotteryController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.LotteryController.#ctor(Ajuna.RestService.Generated.Storage.ILotteryStorage)">
            <summary>
            LotteryController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.LotteryController.GetLotteryIndex">
            <summary>
            >> LotteryIndex
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.LotteryController.GetLottery">
            <summary>
            >> Lottery
             The configuration for the current lottery.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.LotteryController.GetParticipants(System.String)">
            <summary>
            >> Participants
             Users who have purchased a ticket. (Lottery Index, Tickets Purchased)
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.LotteryController.GetTicketsCount">
            <summary>
            >> TicketsCount
             Total number of tickets sold.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.LotteryController.GetTickets(System.String)">
            <summary>
            >> Tickets
             Each ticket&#39;s owner.
            
             May have residual storage from previous lotteries. Use `TicketsCount` to see which ones
             are actually valid ticket mappings.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.LotteryController.GetCallIndices">
            <summary>
            >> CallIndices
             The calls stored in this pallet to be used in an active lottery if configured
             by `Config::ValidateCall`.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.MmrController">
            <summary>
            MmrController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.MmrController.#ctor(Ajuna.RestService.Generated.Storage.IMmrStorage)">
            <summary>
            MmrController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.MmrController.GetRootHash">
            <summary>
            >> RootHash
             Latest MMR Root hash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.MmrController.GetNumberOfLeaves">
            <summary>
            >> NumberOfLeaves
             Current size of the MMR (number of leaves).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.MmrController.GetNodes(System.String)">
            <summary>
            >> Nodes
             Hashes of the nodes in the MMR.
            
             Note this collection only contains MMR peaks, the inner nodes (and leaves)
             are pruned and only stored in the Offchain DB.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.MultisigController">
            <summary>
            MultisigController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.MultisigController.#ctor(Ajuna.RestService.Generated.Storage.IMultisigStorage)">
            <summary>
            MultisigController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.MultisigController.GetMultisigs(System.String)">
            <summary>
            >> Multisigs
             The set of open multisig operations.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.MultisigController.GetCalls(System.String)">
            <summary>
            >> Calls
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.OffencesController">
            <summary>
            OffencesController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.OffencesController.#ctor(Ajuna.RestService.Generated.Storage.IOffencesStorage)">
            <summary>
            OffencesController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.OffencesController.GetReports(System.String)">
            <summary>
            >> Reports
             The primary structure that holds all offence records keyed by report identifiers.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.OffencesController.GetConcurrentReportsIndex(System.String)">
            <summary>
            >> ConcurrentReportsIndex
             A vector of reports of the same kind that happened at the same time slot.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.OffencesController.GetReportsByKindIndex(System.String)">
            <summary>
            >> ReportsByKindIndex
             Enumerates all reports of a kind along with the time they happened.
            
             All reports are sorted by the time of offence.
            
             Note that the actual type of this mapping is `Vec&lt;u8&gt;`, this is because values of
             different types are not supported at the moment so we are doing the manual serialization.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.ProxyController">
            <summary>
            ProxyController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ProxyController.#ctor(Ajuna.RestService.Generated.Storage.IProxyStorage)">
            <summary>
            ProxyController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ProxyController.GetProxies(System.String)">
            <summary>
            >> Proxies
             The set of account proxies. Maps the account which has delegated to the accounts
             which are being delegated to, together with the amount held on deposit.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.ProxyController.GetAnnouncements(System.String)">
            <summary>
            >> Announcements
             The announcements made by the proxy (key).
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.RandomnessCollectiveFlipController">
            <summary>
            RandomnessCollectiveFlipController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.RandomnessCollectiveFlipController.#ctor(Ajuna.RestService.Generated.Storage.IRandomnessCollectiveFlipStorage)">
            <summary>
            RandomnessCollectiveFlipController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.RandomnessCollectiveFlipController.GetRandomMaterial">
            <summary>
            >> RandomMaterial
             Series of block headers from the last 81 blocks that acts as random seed material. This
             is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of
             the oldest hash.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.RecoveryController">
            <summary>
            RecoveryController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.RecoveryController.#ctor(Ajuna.RestService.Generated.Storage.IRecoveryStorage)">
            <summary>
            RecoveryController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.RecoveryController.GetRecoverable(System.String)">
            <summary>
            >> Recoverable
             The set of recoverable accounts and their recovery configuration.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.RecoveryController.GetActiveRecoveries(System.String)">
            <summary>
            >> ActiveRecoveries
             Active recovery attempts.
            
             First account is the account to be recovered, and the second account
             is the user trying to recover the account.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.RecoveryController.GetProxy(System.String)">
            <summary>
            >> Proxy
             The list of allowed proxy accounts.
            
             Map from the user who can access it to the recovered account.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.SchedulerController">
            <summary>
            SchedulerController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SchedulerController.#ctor(Ajuna.RestService.Generated.Storage.ISchedulerStorage)">
            <summary>
            SchedulerController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SchedulerController.GetAgenda(System.String)">
            <summary>
            >> Agenda
             Items to be executed, indexed by the block number that they should be executed on.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SchedulerController.GetLookup(System.String)">
            <summary>
            >> Lookup
             Lookup from identity to the block number and index of the task.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SchedulerController.GetStorageVersion">
            <summary>
            >> StorageVersion
             Storage version of the pallet.
            
             New networks start with last version.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.SessionController">
            <summary>
            SessionController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SessionController.#ctor(Ajuna.RestService.Generated.Storage.ISessionStorage)">
            <summary>
            SessionController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SessionController.GetValidators">
            <summary>
            >> Validators
             The current set of validators.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SessionController.GetCurrentIndex">
            <summary>
            >> CurrentIndex
             Current index of the session.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SessionController.GetQueuedChanged">
            <summary>
            >> QueuedChanged
             True if the underlying economic identities or weighting behind the validators
             has changed in the queued validator set.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SessionController.GetQueuedKeys">
            <summary>
            >> QueuedKeys
             The queued keys for the next session. When the next session begins, these keys
             will be used to determine the validator&#39;s session keys.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SessionController.GetDisabledValidators">
            <summary>
            >> DisabledValidators
             Indices of disabled validators.
            
             The set is cleared when `on_session_ending` returns a new set of identities.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SessionController.GetNextKeys(System.String)">
            <summary>
            >> NextKeys
             The next session keys for a validator.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SessionController.GetKeyOwner(System.String)">
            <summary>
            >> KeyOwner
             The owner of a key. The key is the `KeyTypeId` + the encoded key.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.SocietyController">
            <summary>
            SocietyController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SocietyController.#ctor(Ajuna.RestService.Generated.Storage.ISocietyStorage)">
            <summary>
            SocietyController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SocietyController.GetFounder">
            <summary>
            >> Founder
             The first member.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SocietyController.GetRules">
            <summary>
            >> Rules
             A hash of the rules of this society concerning membership. Can only be set once and
             only by the founder.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SocietyController.GetCandidates">
            <summary>
            >> Candidates
             The current set of candidates; bidders that are attempting to become members.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SocietyController.GetSuspendedCandidates(System.String)">
            <summary>
            >> SuspendedCandidates
             The set of suspended candidates.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SocietyController.GetPot">
            <summary>
            >> Pot
             Amount of our account balance that is specifically for the next round&#39;s bid(s).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SocietyController.GetHead">
            <summary>
            >> Head
             The most primary from the most recently approved members.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SocietyController.GetMembers">
            <summary>
            >> Members
             The current set of members, ordered.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SocietyController.GetSuspendedMembers(System.String)">
            <summary>
            >> SuspendedMembers
             The set of suspended members.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SocietyController.GetBids">
            <summary>
            >> Bids
             The current bids, stored ordered by the value of the bid.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SocietyController.GetVouching(System.String)">
            <summary>
            >> Vouching
             Members currently vouching or banned from vouching again
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SocietyController.GetPayouts(System.String)">
            <summary>
            >> Payouts
             Pending payouts; ordered by block number, with the amount that should be paid out.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SocietyController.GetStrikes(System.String)">
            <summary>
            >> Strikes
             The ongoing number of losing votes cast by the member.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SocietyController.GetVotes(System.String)">
            <summary>
            >> Votes
             Double map from Candidate -&gt; Voter -&gt; (Maybe) Vote.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SocietyController.GetDefender">
            <summary>
            >> Defender
             The defending member currently being challenged.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SocietyController.GetDefenderVotes(System.String)">
            <summary>
            >> DefenderVotes
             Votes for the defender.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SocietyController.GetMaxMembers">
            <summary>
            >> MaxMembers
             The max number of members for the society at one time.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.StakingController">
            <summary>
            StakingController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.#ctor(Ajuna.RestService.Generated.Storage.IStakingStorage)">
            <summary>
            StakingController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetHistoryDepth">
            <summary>
            >> HistoryDepth
             Number of eras to keep in history.
            
             Information is kept for eras in `[current_era - history_depth; current_era]`.
            
             Must be more than the number of eras delayed by session otherwise. I.e. active era must
             always be in history. I.e. `active_era &gt; current_era - history_depth` must be
             guaranteed.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetValidatorCount">
            <summary>
            >> ValidatorCount
             The ideal number of staking participants.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetMinimumValidatorCount">
            <summary>
            >> MinimumValidatorCount
             Minimum number of staking participants before emergency conditions are imposed.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetInvulnerables">
            <summary>
            >> Invulnerables
             Any validators that may never be slashed or forcibly kicked. It&#39;s a Vec since they&#39;re
             easy to initialize and the performance hit is minimal (we expect no more than four
             invulnerables) and restricted to testnets.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetBonded(System.String)">
            <summary>
            >> Bonded
             Map from all locked &quot;stash&quot; accounts to the controller account.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetMinNominatorBond">
            <summary>
            >> MinNominatorBond
             The minimum active bond to become and maintain the role of a nominator.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetMinValidatorBond">
            <summary>
            >> MinValidatorBond
             The minimum active bond to become and maintain the role of a validator.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetLedger(System.String)">
            <summary>
            >> Ledger
             Map from all (unlocked) &quot;controller&quot; accounts to the info regarding the staking.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetPayee(System.String)">
            <summary>
            >> Payee
             Where the reward payment should be made. Keyed by stash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetValidators(System.String)">
            <summary>
            >> Validators
             The map from (wannabe) validator stash key to the preferences of that validator.
            
             When updating this storage item, you must also update the `CounterForValidators`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetCounterForValidators">
            <summary>
            >> CounterForValidators
             A tracker to keep count of the number of items in the `Validators` map.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetMaxValidatorsCount">
            <summary>
            >> MaxValidatorsCount
             The maximum validator count before we stop allowing new validators to join.
            
             When this value is not set, no limits are enforced.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetNominators(System.String)">
            <summary>
            >> Nominators
             The map from nominator stash key to the set of stash keys of all validators to nominate.
            
             When updating this storage item, you must also update the `CounterForNominators`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetCounterForNominators">
            <summary>
            >> CounterForNominators
             A tracker to keep count of the number of items in the `Nominators` map.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetMaxNominatorsCount">
            <summary>
            >> MaxNominatorsCount
             The maximum nominator count before we stop allowing new validators to join.
            
             When this value is not set, no limits are enforced.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetCurrentEra">
            <summary>
            >> CurrentEra
             The current era index.
            
             This is the latest planned era, depending on how the Session pallet queues the validator
             set, it might be active or not.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetActiveEra">
            <summary>
            >> ActiveEra
             The active era information, it holds index and start.
            
             The active era is the era being currently rewarded. Validator set of this era must be
             equal to [`SessionInterface::validators`].
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetErasStartSessionIndex(System.String)">
            <summary>
            >> ErasStartSessionIndex
             The session index at which the era start for the last `HISTORY_DEPTH` eras.
            
             Note: This tracks the starting session (i.e. session index when era start being active)
             for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetErasStakers(System.String)">
            <summary>
            >> ErasStakers
             Exposure of validator at era.
            
             This is keyed first by the era index to allow bulk deletion and then the stash account.
            
             Is it removed after `HISTORY_DEPTH` eras.
             If stakers hasn&#39;t been set or has been removed then empty exposure is returned.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetErasStakersClipped(System.String)">
            <summary>
            >> ErasStakersClipped
             Clipped Exposure of validator at era.
            
             This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the
             `T::MaxNominatorRewardedPerValidator` biggest stakers.
             (Note: the field `total` and `own` of the exposure remains unchanged).
             This is used to limit the i/o cost for the nominator payout.
            
             This is keyed fist by the era index to allow bulk deletion and then the stash account.
            
             Is it removed after `HISTORY_DEPTH` eras.
             If stakers hasn&#39;t been set or has been removed then empty exposure is returned.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetErasValidatorPrefs(System.String)">
            <summary>
            >> ErasValidatorPrefs
             Similar to `ErasStakers`, this holds the preferences of validators.
            
             This is keyed first by the era index to allow bulk deletion and then the stash account.
            
             Is it removed after `HISTORY_DEPTH` eras.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetErasValidatorReward(System.String)">
            <summary>
            >> ErasValidatorReward
             The total validator era payout for the last `HISTORY_DEPTH` eras.
            
             Eras that haven&#39;t finished yet or has been removed doesn&#39;t have reward.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetErasRewardPoints(System.String)">
            <summary>
            >> ErasRewardPoints
             Rewards for the last `HISTORY_DEPTH` eras.
             If reward hasn&#39;t been set or has been removed then 0 reward is returned.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetErasTotalStake(System.String)">
            <summary>
            >> ErasTotalStake
             The total amount staked for the last `HISTORY_DEPTH` eras.
             If total hasn&#39;t been set or has been removed then 0 stake is returned.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetForceEra">
            <summary>
            >> ForceEra
             Mode of era forcing.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetSlashRewardFraction">
            <summary>
            >> SlashRewardFraction
             The percentage of the slash that is distributed to reporters.
            
             The rest of the slashed value is handled by the `Slash`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetCanceledSlashPayout">
            <summary>
            >> CanceledSlashPayout
             The amount of currency given to reporters of a slash event which was
             canceled by extraordinary circumstances (e.g. governance).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetUnappliedSlashes(System.String)">
            <summary>
            >> UnappliedSlashes
             All unapplied slashes that are queued for later.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetBondedEras">
            <summary>
            >> BondedEras
             A mapping from still-bonded eras to the first session index of that era.
            
             Must contains information for eras for the range:
             `[active_era - bounding_duration; active_era]`
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetValidatorSlashInEra(System.String)">
            <summary>
            >> ValidatorSlashInEra
             All slashing events on validators, mapped by era to the highest slash proportion
             and slash value of the era.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetNominatorSlashInEra(System.String)">
            <summary>
            >> NominatorSlashInEra
             All slashing events on nominators, mapped by era to the highest slash value of the era.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetSlashingSpans(System.String)">
            <summary>
            >> SlashingSpans
             Slashing spans for stash accounts.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetSpanSlash(System.String)">
            <summary>
            >> SpanSlash
             Records information about the maximum slash of a stash within a slashing span,
             as well as how much reward has been paid out.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetEarliestUnappliedSlash">
            <summary>
            >> EarliestUnappliedSlash
             The earliest era for which we have a pending, unapplied slash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetCurrentPlannedSession">
            <summary>
            >> CurrentPlannedSession
             The last planned session scheduled by the session pallet.
            
             This is basically in sync with the call to [`pallet_session::SessionManager::new_session`].
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetStorageVersion">
            <summary>
            >> StorageVersion
             True if network has been upgraded to this version.
             Storage version of the pallet.
            
             This is set to v7.0.0 for new networks.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.StakingController.GetChillThreshold">
            <summary>
            >> ChillThreshold
             The threshold for when users can start calling `chill_other` for other validators /
             nominators. The threshold is compared to the actual number of validators / nominators
             (`CountFor*`) in the system compared to the configured max (`Max*Count`).
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.SudoController">
            <summary>
            SudoController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SudoController.#ctor(Ajuna.RestService.Generated.Storage.ISudoStorage)">
            <summary>
            SudoController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SudoController.GetKey">
            <summary>
            >> Key
             The `AccountId` of the sudo key.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.SystemController">
            <summary>
            SystemController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SystemController.#ctor(Ajuna.RestService.Generated.Storage.ISystemStorage)">
            <summary>
            SystemController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SystemController.GetAccount(System.String)">
            <summary>
            >> Account
             The full account information for a particular account ID.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SystemController.GetExtrinsicCount">
            <summary>
            >> ExtrinsicCount
             Total extrinsics count for the current block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SystemController.GetBlockWeight">
            <summary>
            >> BlockWeight
             The current weight for the block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SystemController.GetAllExtrinsicsLen">
            <summary>
            >> AllExtrinsicsLen
             Total length (in bytes) for all extrinsics put together, for the current block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SystemController.GetBlockHash(System.String)">
            <summary>
            >> BlockHash
             Map of block numbers to block hashes.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SystemController.GetExtrinsicData(System.String)">
            <summary>
            >> ExtrinsicData
             Extrinsics data for the current block (maps an extrinsic&#39;s index to its data).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SystemController.GetNumber">
            <summary>
            >> Number
             The current block number being processed. Set by `execute_block`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SystemController.GetParentHash">
            <summary>
            >> ParentHash
             Hash of the previous block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SystemController.GetDigest">
            <summary>
            >> Digest
             Digest of the current block, also part of the block header.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SystemController.GetEvents">
            <summary>
            >> Events
             Events deposited for the current block.
            
             NOTE: This storage item is explicitly unbounded since it is never intended to be read
             from within the runtime.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SystemController.GetEventCount">
            <summary>
            >> EventCount
             The number of events in the `Events&lt;T&gt;` list.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SystemController.GetEventTopics(System.String)">
            <summary>
            >> EventTopics
             Mapping between a topic (represented by T::Hash) and a vector of indexes
             of events in the `&lt;Events&lt;T&gt;&gt;` list.
            
             All topic vectors have deterministic storage locations depending on the topic. This
             allows light-clients to leverage the changes trie storage tracking mechanism and
             in case of changes fetch the list of events of interest.
            
             The value has the type `(T::BlockNumber, EventIndex)` because if we used only just
             the `EventIndex` then in case if the topic has the same contents on the next block
             no notification will be triggered thus the event might be lost.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SystemController.GetLastRuntimeUpgrade">
            <summary>
            >> LastRuntimeUpgrade
             Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SystemController.GetUpgradedToU32RefCount">
            <summary>
            >> UpgradedToU32RefCount
             True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SystemController.GetUpgradedToTripleRefCount">
            <summary>
            >> UpgradedToTripleRefCount
             True if we have upgraded so that AccountInfo contains three types of `RefCount`. False
             (default) if not.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.SystemController.GetExecutionPhase">
            <summary>
            >> ExecutionPhase
             The execution phase of the block.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.TechnicalCommitteeController">
            <summary>
            TechnicalCommitteeController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TechnicalCommitteeController.#ctor(Ajuna.RestService.Generated.Storage.ITechnicalCommitteeStorage)">
            <summary>
            TechnicalCommitteeController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TechnicalCommitteeController.GetProposals">
            <summary>
            >> Proposals
             The hashes of the active proposals.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TechnicalCommitteeController.GetProposalOf(System.String)">
            <summary>
            >> ProposalOf
             Actual proposal for a given hash, if it&#39;s current.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TechnicalCommitteeController.GetVoting(System.String)">
            <summary>
            >> Voting
             Votes on a given proposal, if it is ongoing.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TechnicalCommitteeController.GetProposalCount">
            <summary>
            >> ProposalCount
             Proposals so far.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TechnicalCommitteeController.GetMembers">
            <summary>
            >> Members
             The current members of the collective. This is stored sorted (just by value).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TechnicalCommitteeController.GetPrime">
            <summary>
            >> Prime
             The prime member that helps determine the default vote behavior in case of absentations.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.TechnicalMembershipController">
            <summary>
            TechnicalMembershipController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TechnicalMembershipController.#ctor(Ajuna.RestService.Generated.Storage.ITechnicalMembershipStorage)">
            <summary>
            TechnicalMembershipController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TechnicalMembershipController.GetMembers">
            <summary>
            >> Members
             The current membership, stored as an ordered Vec.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TechnicalMembershipController.GetPrime">
            <summary>
            >> Prime
             The current prime member, if one exists.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.TimestampController">
            <summary>
            TimestampController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TimestampController.#ctor(Ajuna.RestService.Generated.Storage.ITimestampStorage)">
            <summary>
            TimestampController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TimestampController.GetNow">
            <summary>
            >> Now
             Current time for the current block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TimestampController.GetDidUpdate">
            <summary>
            >> DidUpdate
             Did the timestamp get updated in this block?
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.TipsController">
            <summary>
            TipsController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TipsController.#ctor(Ajuna.RestService.Generated.Storage.ITipsStorage)">
            <summary>
            TipsController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TipsController.GetTips(System.String)">
            <summary>
            >> Tips
             TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.
             This has the insecure enumerable hash function since the key itself is already
             guaranteed to be a secure hash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TipsController.GetReasons(System.String)">
            <summary>
            >> Reasons
             Simple preimage lookup from the reason&#39;s hash to the original data. Again, has an
             insecure enumerable hash since the key is guaranteed to be the result of a secure hash.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.TransactionPaymentController">
            <summary>
            TransactionPaymentController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TransactionPaymentController.#ctor(Ajuna.RestService.Generated.Storage.ITransactionPaymentStorage)">
            <summary>
            TransactionPaymentController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TransactionPaymentController.GetNextFeeMultiplier">
            <summary>
            >> NextFeeMultiplier
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TransactionPaymentController.GetStorageVersion">
            <summary>
            >> StorageVersion
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.TransactionStorageController">
            <summary>
            TransactionStorageController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TransactionStorageController.#ctor(Ajuna.RestService.Generated.Storage.ITransactionStorageStorage)">
            <summary>
            TransactionStorageController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TransactionStorageController.GetTransactions(System.String)">
            <summary>
            >> Transactions
             Collection of transaction metadata by block number.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TransactionStorageController.GetChunkCount(System.String)">
            <summary>
            >> ChunkCount
             Count indexed chunks for each block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TransactionStorageController.GetByteFee">
            <summary>
            >> ByteFee
             Storage fee per byte.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TransactionStorageController.GetEntryFee">
            <summary>
            >> EntryFee
             Storage fee per transaction.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TransactionStorageController.GetMaxTransactionSize">
            <summary>
            >> MaxTransactionSize
             Maximum data set in a single transaction in bytes.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TransactionStorageController.GetMaxBlockTransactions">
            <summary>
            >> MaxBlockTransactions
             Maximum number of indexed transactions in the block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TransactionStorageController.GetStoragePeriod">
            <summary>
            >> StoragePeriod
             Storage period for data in blocks. Should match `sp_storage_proof::DEFAULT_STORAGE_PERIOD`
             for block authoring.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TransactionStorageController.GetBlockTransactions">
            <summary>
            >> BlockTransactions
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TransactionStorageController.GetProofChecked">
            <summary>
            >> ProofChecked
             Was the proof checked in this block?
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.TreasuryController">
            <summary>
            TreasuryController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TreasuryController.#ctor(Ajuna.RestService.Generated.Storage.ITreasuryStorage)">
            <summary>
            TreasuryController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TreasuryController.GetProposalCount">
            <summary>
            >> ProposalCount
             Number of proposals that have been made.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TreasuryController.GetProposals(System.String)">
            <summary>
            >> Proposals
             Proposals that have been made.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.TreasuryController.GetApprovals">
            <summary>
            >> Approvals
             Proposal indices that have been approved but not yet awarded.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.UniquesController">
            <summary>
            UniquesController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.UniquesController.#ctor(Ajuna.RestService.Generated.Storage.IUniquesStorage)">
            <summary>
            UniquesController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.UniquesController.GetClass(System.String)">
            <summary>
            >> Class
             Details of an asset class.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.UniquesController.GetAccount(System.String)">
            <summary>
            >> Account
             The assets held by any given account; set out this way so that assets owned by a single
             account can be enumerated.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.UniquesController.GetAsset(System.String)">
            <summary>
            >> Asset
             The assets in existence and their ownership details.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.UniquesController.GetClassMetadataOf(System.String)">
            <summary>
            >> ClassMetadataOf
             Metadata of an asset class.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.UniquesController.GetInstanceMetadataOf(System.String)">
            <summary>
            >> InstanceMetadataOf
             Metadata of an asset instance.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.UniquesController.GetAttribute(System.String)">
            <summary>
            >> Attribute
             Metadata of an asset class.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Controller.VestingController">
            <summary>
            VestingController controller to access storages.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.VestingController.#ctor(Ajuna.RestService.Generated.Storage.IVestingStorage)">
            <summary>
            VestingController constructor.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.VestingController.GetVesting(System.String)">
            <summary>
            >> Vesting
             Information regarding the vesting of a given account.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Controller.VestingController.GetStorageVersion">
            <summary>
            >> StorageVersion
             Storage version of the pallet.
            
             New networks start with latest version, as determined by the genesis build.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IAssetsStorage">
            <summary>
            IAssetsStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IAssetsStorage.GetAsset(System.String)">
            <summary>
            >> Asset
             Details of an asset.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IAssetsStorage.GetAccount(System.String)">
            <summary>
            >> Account
             The number of units of assets held by any given account.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IAssetsStorage.GetApprovals(System.String)">
            <summary>
            >> Approvals
             Approved balance transfers. First balance is the amount approved for transfer. Second
             is the amount of `T::Currency` reserved for storing this.
             First key is the asset ID, second key is the owner and third key is the delegate.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IAssetsStorage.GetMetadata(System.String)">
            <summary>
            >> Metadata
             Metadata of an asset.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.AssetsStorage">
            <summary>
            AssetsStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.AssetsStorage._assetTypedStorage">
            <summary>
            _assetTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.AssetsStorage._accountTypedStorage">
            <summary>
            _accountTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.AssetsStorage._approvalsTypedStorage">
            <summary>
            _approvalsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.AssetsStorage._metadataTypedStorage">
            <summary>
            _metadataTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.AssetsStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            AssetsStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.AssetsStorage.AssetTypedStorage">
            <summary>
            _assetTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.AssetsStorage.AccountTypedStorage">
            <summary>
            _accountTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.AssetsStorage.ApprovalsTypedStorage">
            <summary>
            _approvalsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.AssetsStorage.MetadataTypedStorage">
            <summary>
            _metadataTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.AssetsStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.AssetsStorage.OnUpdateAsset(System.String,System.String)">
            <summary>
            Implements any storage change for Assets.Asset
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.AssetsStorage.GetAsset(System.String)">
            <summary>
            >> Asset
             Details of an asset.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.AssetsStorage.OnUpdateAccount(System.String,System.String)">
            <summary>
            Implements any storage change for Assets.Account
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.AssetsStorage.GetAccount(System.String)">
            <summary>
            >> Account
             The number of units of assets held by any given account.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.AssetsStorage.OnUpdateApprovals(System.String,System.String)">
            <summary>
            Implements any storage change for Assets.Approvals
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.AssetsStorage.GetApprovals(System.String)">
            <summary>
            >> Approvals
             Approved balance transfers. First balance is the amount approved for transfer. Second
             is the amount of `T::Currency` reserved for storing this.
             First key is the asset ID, second key is the owner and third key is the delegate.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.AssetsStorage.OnUpdateMetadata(System.String,System.String)">
            <summary>
            Implements any storage change for Assets.Metadata
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.AssetsStorage.GetMetadata(System.String)">
            <summary>
            >> Metadata
             Metadata of an asset.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IAuthorshipStorage">
            <summary>
            IAuthorshipStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IAuthorshipStorage.GetUncles">
            <summary>
            >> Uncles
             Uncles
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IAuthorshipStorage.GetAuthor">
            <summary>
            >> Author
             Author of current block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IAuthorshipStorage.GetDidSetUncles">
            <summary>
            >> DidSetUncles
             Whether uncles were already set in this block.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.AuthorshipStorage">
            <summary>
            AuthorshipStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.AuthorshipStorage._unclesTypedStorage">
            <summary>
            _unclesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.AuthorshipStorage._authorTypedStorage">
            <summary>
            _authorTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.AuthorshipStorage._didSetUnclesTypedStorage">
            <summary>
            _didSetUnclesTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.AuthorshipStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            AuthorshipStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.AuthorshipStorage.UnclesTypedStorage">
            <summary>
            _unclesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.AuthorshipStorage.AuthorTypedStorage">
            <summary>
            _authorTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.AuthorshipStorage.DidSetUnclesTypedStorage">
            <summary>
            _didSetUnclesTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.AuthorshipStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.AuthorshipStorage.OnUpdateUncles(System.String)">
            <summary>
            Implements any storage change for Authorship.Uncles
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.AuthorshipStorage.GetUncles">
            <summary>
            >> Uncles
             Uncles
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.AuthorshipStorage.OnUpdateAuthor(System.String)">
            <summary>
            Implements any storage change for Authorship.Author
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.AuthorshipStorage.GetAuthor">
            <summary>
            >> Author
             Author of current block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.AuthorshipStorage.OnUpdateDidSetUncles(System.String)">
            <summary>
            Implements any storage change for Authorship.DidSetUncles
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.AuthorshipStorage.GetDidSetUncles">
            <summary>
            >> DidSetUncles
             Whether uncles were already set in this block.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IBabeStorage">
            <summary>
            IBabeStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBabeStorage.GetEpochIndex">
            <summary>
            >> EpochIndex
             Current epoch index.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBabeStorage.GetAuthorities">
            <summary>
            >> Authorities
             Current epoch authorities.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBabeStorage.GetGenesisSlot">
            <summary>
            >> GenesisSlot
             The slot at which the first epoch actually started. This is 0
             until the first block of the chain.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBabeStorage.GetCurrentSlot">
            <summary>
            >> CurrentSlot
             Current slot number.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBabeStorage.GetRandomness">
            <summary>
            >> Randomness
             The epoch randomness for the *current* epoch.
            
             # Security
            
             This MUST NOT be used for gambling, as it can be influenced by a
             malicious validator in the short term. It MAY be used in many
             cryptographic protocols, however, so long as one remembers that this
             (like everything else on-chain) it is public. For example, it can be
             used where a number is needed that cannot have been chosen by an
             adversary, for purposes such as public-coin zero-knowledge proofs.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBabeStorage.GetPendingEpochConfigChange">
            <summary>
            >> PendingEpochConfigChange
             Pending epoch configuration change that will be applied when the next epoch is enacted.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBabeStorage.GetNextRandomness">
            <summary>
            >> NextRandomness
             Next epoch randomness.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBabeStorage.GetNextAuthorities">
            <summary>
            >> NextAuthorities
             Next epoch authorities.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBabeStorage.GetSegmentIndex">
            <summary>
            >> SegmentIndex
             Randomness under construction.
            
             We make a tradeoff between storage accesses and list length.
             We store the under-construction randomness in segments of up to
             `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.
            
             Once a segment reaches this length, we begin the next one.
             We reset all segments and return to `0` at the beginning of every
             epoch.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBabeStorage.GetUnderConstruction(System.String)">
            <summary>
            >> UnderConstruction
             TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBabeStorage.GetInitialized">
            <summary>
            >> Initialized
             Temporary value (cleared at block finalization) which is `Some`
             if per-block initialization has already been called for current block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBabeStorage.GetAuthorVrfRandomness">
            <summary>
            >> AuthorVrfRandomness
             This field should always be populated during block processing unless
             secondary plain slots are enabled (which don&#39;t contain a VRF output).
            
             It is set in `on_initialize`, before it will contain the value from the last block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBabeStorage.GetEpochStart">
            <summary>
            >> EpochStart
             The block numbers when the last and current epoch have started, respectively `N-1` and
             `N`.
             NOTE: We track this is in order to annotate the block number when a given pool of
             entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in
             slots, which may be skipped, the block numbers may not line up with the slot numbers.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBabeStorage.GetLateness">
            <summary>
            >> Lateness
             How late the current block is compared to its parent.
            
             This entry is populated as part of block execution and is cleaned up
             on block finalization. Querying this storage entry outside of block
             execution context should always yield zero.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBabeStorage.GetEpochConfig">
            <summary>
            >> EpochConfig
             The configuration for the current epoch. Should never be `None` as it is initialized in
             genesis.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBabeStorage.GetNextEpochConfig">
            <summary>
            >> NextEpochConfig
             The configuration for the next epoch, `None` if the config will not change
             (you can fallback to `EpochConfig` instead in that case).
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.BabeStorage">
            <summary>
            BabeStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BabeStorage._epochIndexTypedStorage">
            <summary>
            _epochIndexTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BabeStorage._authoritiesTypedStorage">
            <summary>
            _authoritiesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BabeStorage._genesisSlotTypedStorage">
            <summary>
            _genesisSlotTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BabeStorage._currentSlotTypedStorage">
            <summary>
            _currentSlotTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BabeStorage._randomnessTypedStorage">
            <summary>
            _randomnessTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BabeStorage._pendingEpochConfigChangeTypedStorage">
            <summary>
            _pendingEpochConfigChangeTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BabeStorage._nextRandomnessTypedStorage">
            <summary>
            _nextRandomnessTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BabeStorage._nextAuthoritiesTypedStorage">
            <summary>
            _nextAuthoritiesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BabeStorage._segmentIndexTypedStorage">
            <summary>
            _segmentIndexTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BabeStorage._underConstructionTypedStorage">
            <summary>
            _underConstructionTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BabeStorage._initializedTypedStorage">
            <summary>
            _initializedTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BabeStorage._authorVrfRandomnessTypedStorage">
            <summary>
            _authorVrfRandomnessTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BabeStorage._epochStartTypedStorage">
            <summary>
            _epochStartTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BabeStorage._latenessTypedStorage">
            <summary>
            _latenessTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BabeStorage._epochConfigTypedStorage">
            <summary>
            _epochConfigTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BabeStorage._nextEpochConfigTypedStorage">
            <summary>
            _nextEpochConfigTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            BabeStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BabeStorage.EpochIndexTypedStorage">
            <summary>
            _epochIndexTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BabeStorage.AuthoritiesTypedStorage">
            <summary>
            _authoritiesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BabeStorage.GenesisSlotTypedStorage">
            <summary>
            _genesisSlotTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BabeStorage.CurrentSlotTypedStorage">
            <summary>
            _currentSlotTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BabeStorage.RandomnessTypedStorage">
            <summary>
            _randomnessTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BabeStorage.PendingEpochConfigChangeTypedStorage">
            <summary>
            _pendingEpochConfigChangeTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BabeStorage.NextRandomnessTypedStorage">
            <summary>
            _nextRandomnessTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BabeStorage.NextAuthoritiesTypedStorage">
            <summary>
            _nextAuthoritiesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BabeStorage.SegmentIndexTypedStorage">
            <summary>
            _segmentIndexTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BabeStorage.UnderConstructionTypedStorage">
            <summary>
            _underConstructionTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BabeStorage.InitializedTypedStorage">
            <summary>
            _initializedTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BabeStorage.AuthorVrfRandomnessTypedStorage">
            <summary>
            _authorVrfRandomnessTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BabeStorage.EpochStartTypedStorage">
            <summary>
            _epochStartTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BabeStorage.LatenessTypedStorage">
            <summary>
            _latenessTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BabeStorage.EpochConfigTypedStorage">
            <summary>
            _epochConfigTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BabeStorage.NextEpochConfigTypedStorage">
            <summary>
            _nextEpochConfigTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.OnUpdateEpochIndex(System.String)">
            <summary>
            Implements any storage change for Babe.EpochIndex
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.GetEpochIndex">
            <summary>
            >> EpochIndex
             Current epoch index.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.OnUpdateAuthorities(System.String)">
            <summary>
            Implements any storage change for Babe.Authorities
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.GetAuthorities">
            <summary>
            >> Authorities
             Current epoch authorities.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.OnUpdateGenesisSlot(System.String)">
            <summary>
            Implements any storage change for Babe.GenesisSlot
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.GetGenesisSlot">
            <summary>
            >> GenesisSlot
             The slot at which the first epoch actually started. This is 0
             until the first block of the chain.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.OnUpdateCurrentSlot(System.String)">
            <summary>
            Implements any storage change for Babe.CurrentSlot
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.GetCurrentSlot">
            <summary>
            >> CurrentSlot
             Current slot number.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.OnUpdateRandomness(System.String)">
            <summary>
            Implements any storage change for Babe.Randomness
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.GetRandomness">
            <summary>
            >> Randomness
             The epoch randomness for the *current* epoch.
            
             # Security
            
             This MUST NOT be used for gambling, as it can be influenced by a
             malicious validator in the short term. It MAY be used in many
             cryptographic protocols, however, so long as one remembers that this
             (like everything else on-chain) it is public. For example, it can be
             used where a number is needed that cannot have been chosen by an
             adversary, for purposes such as public-coin zero-knowledge proofs.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.OnUpdatePendingEpochConfigChange(System.String)">
            <summary>
            Implements any storage change for Babe.PendingEpochConfigChange
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.GetPendingEpochConfigChange">
            <summary>
            >> PendingEpochConfigChange
             Pending epoch configuration change that will be applied when the next epoch is enacted.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.OnUpdateNextRandomness(System.String)">
            <summary>
            Implements any storage change for Babe.NextRandomness
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.GetNextRandomness">
            <summary>
            >> NextRandomness
             Next epoch randomness.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.OnUpdateNextAuthorities(System.String)">
            <summary>
            Implements any storage change for Babe.NextAuthorities
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.GetNextAuthorities">
            <summary>
            >> NextAuthorities
             Next epoch authorities.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.OnUpdateSegmentIndex(System.String)">
            <summary>
            Implements any storage change for Babe.SegmentIndex
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.GetSegmentIndex">
            <summary>
            >> SegmentIndex
             Randomness under construction.
            
             We make a tradeoff between storage accesses and list length.
             We store the under-construction randomness in segments of up to
             `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.
            
             Once a segment reaches this length, we begin the next one.
             We reset all segments and return to `0` at the beginning of every
             epoch.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.OnUpdateUnderConstruction(System.String,System.String)">
            <summary>
            Implements any storage change for Babe.UnderConstruction
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.GetUnderConstruction(System.String)">
            <summary>
            >> UnderConstruction
             TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.OnUpdateInitialized(System.String)">
            <summary>
            Implements any storage change for Babe.Initialized
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.GetInitialized">
            <summary>
            >> Initialized
             Temporary value (cleared at block finalization) which is `Some`
             if per-block initialization has already been called for current block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.OnUpdateAuthorVrfRandomness(System.String)">
            <summary>
            Implements any storage change for Babe.AuthorVrfRandomness
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.GetAuthorVrfRandomness">
            <summary>
            >> AuthorVrfRandomness
             This field should always be populated during block processing unless
             secondary plain slots are enabled (which don&#39;t contain a VRF output).
            
             It is set in `on_initialize`, before it will contain the value from the last block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.OnUpdateEpochStart(System.String)">
            <summary>
            Implements any storage change for Babe.EpochStart
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.GetEpochStart">
            <summary>
            >> EpochStart
             The block numbers when the last and current epoch have started, respectively `N-1` and
             `N`.
             NOTE: We track this is in order to annotate the block number when a given pool of
             entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in
             slots, which may be skipped, the block numbers may not line up with the slot numbers.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.OnUpdateLateness(System.String)">
            <summary>
            Implements any storage change for Babe.Lateness
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.GetLateness">
            <summary>
            >> Lateness
             How late the current block is compared to its parent.
            
             This entry is populated as part of block execution and is cleaned up
             on block finalization. Querying this storage entry outside of block
             execution context should always yield zero.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.OnUpdateEpochConfig(System.String)">
            <summary>
            Implements any storage change for Babe.EpochConfig
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.GetEpochConfig">
            <summary>
            >> EpochConfig
             The configuration for the current epoch. Should never be `None` as it is initialized in
             genesis.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.OnUpdateNextEpochConfig(System.String)">
            <summary>
            Implements any storage change for Babe.NextEpochConfig
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BabeStorage.GetNextEpochConfig">
            <summary>
            >> NextEpochConfig
             The configuration for the next epoch, `None` if the config will not change
             (you can fallback to `EpochConfig` instead in that case).
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IBagsListStorage">
            <summary>
            IBagsListStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBagsListStorage.GetCounterForListNodes">
            <summary>
            >> CounterForListNodes
             How many ids are registered.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBagsListStorage.GetListNodes(System.String)">
            <summary>
            >> ListNodes
             A single node, within some bag.
            
             Nodes store links forward and back within their respective bags.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBagsListStorage.GetListBags(System.String)">
            <summary>
            >> ListBags
             A bag stored in storage.
            
             Stores a `Bag` struct, which stores head and tail pointers to itself.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.BagsListStorage">
            <summary>
            BagsListStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BagsListStorage._counterForListNodesTypedStorage">
            <summary>
            _counterForListNodesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BagsListStorage._listNodesTypedStorage">
            <summary>
            _listNodesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BagsListStorage._listBagsTypedStorage">
            <summary>
            _listBagsTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BagsListStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            BagsListStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BagsListStorage.CounterForListNodesTypedStorage">
            <summary>
            _counterForListNodesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BagsListStorage.ListNodesTypedStorage">
            <summary>
            _listNodesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BagsListStorage.ListBagsTypedStorage">
            <summary>
            _listBagsTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BagsListStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BagsListStorage.OnUpdateCounterForListNodes(System.String)">
            <summary>
            Implements any storage change for BagsList.CounterForListNodes
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BagsListStorage.GetCounterForListNodes">
            <summary>
            >> CounterForListNodes
             How many ids are registered.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BagsListStorage.OnUpdateListNodes(System.String,System.String)">
            <summary>
            Implements any storage change for BagsList.ListNodes
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BagsListStorage.GetListNodes(System.String)">
            <summary>
            >> ListNodes
             A single node, within some bag.
            
             Nodes store links forward and back within their respective bags.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BagsListStorage.OnUpdateListBags(System.String,System.String)">
            <summary>
            Implements any storage change for BagsList.ListBags
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BagsListStorage.GetListBags(System.String)">
            <summary>
            >> ListBags
             A bag stored in storage.
            
             Stores a `Bag` struct, which stores head and tail pointers to itself.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IBalancesStorage">
            <summary>
            IBalancesStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBalancesStorage.GetTotalIssuance">
            <summary>
            >> TotalIssuance
             The total units issued in the system.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBalancesStorage.GetAccount(System.String)">
            <summary>
            >> Account
             The balance of an account.
            
             NOTE: This is only used in the case that this pallet is used to store balances.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBalancesStorage.GetLocks(System.String)">
            <summary>
            >> Locks
             Any liquidity locks on some account balances.
             NOTE: Should only be accessed when setting, changing and freeing a lock.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBalancesStorage.GetReserves(System.String)">
            <summary>
            >> Reserves
             Named reserves on some account balances.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBalancesStorage.GetStorageVersion">
            <summary>
            >> StorageVersion
             Storage version of the pallet.
            
             This is set to v2.0.0 for new networks.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.BalancesStorage">
            <summary>
            BalancesStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BalancesStorage._totalIssuanceTypedStorage">
            <summary>
            _totalIssuanceTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BalancesStorage._accountTypedStorage">
            <summary>
            _accountTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BalancesStorage._locksTypedStorage">
            <summary>
            _locksTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BalancesStorage._reservesTypedStorage">
            <summary>
            _reservesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BalancesStorage._storageVersionTypedStorage">
            <summary>
            _storageVersionTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BalancesStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            BalancesStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BalancesStorage.TotalIssuanceTypedStorage">
            <summary>
            _totalIssuanceTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BalancesStorage.AccountTypedStorage">
            <summary>
            _accountTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BalancesStorage.LocksTypedStorage">
            <summary>
            _locksTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BalancesStorage.ReservesTypedStorage">
            <summary>
            _reservesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BalancesStorage.StorageVersionTypedStorage">
            <summary>
            _storageVersionTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BalancesStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BalancesStorage.OnUpdateTotalIssuance(System.String)">
            <summary>
            Implements any storage change for Balances.TotalIssuance
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BalancesStorage.GetTotalIssuance">
            <summary>
            >> TotalIssuance
             The total units issued in the system.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BalancesStorage.OnUpdateAccount(System.String,System.String)">
            <summary>
            Implements any storage change for Balances.Account
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BalancesStorage.GetAccount(System.String)">
            <summary>
            >> Account
             The balance of an account.
            
             NOTE: This is only used in the case that this pallet is used to store balances.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BalancesStorage.OnUpdateLocks(System.String,System.String)">
            <summary>
            Implements any storage change for Balances.Locks
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BalancesStorage.GetLocks(System.String)">
            <summary>
            >> Locks
             Any liquidity locks on some account balances.
             NOTE: Should only be accessed when setting, changing and freeing a lock.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BalancesStorage.OnUpdateReserves(System.String,System.String)">
            <summary>
            Implements any storage change for Balances.Reserves
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BalancesStorage.GetReserves(System.String)">
            <summary>
            >> Reserves
             Named reserves on some account balances.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BalancesStorage.OnUpdateStorageVersion(System.String)">
            <summary>
            Implements any storage change for Balances.StorageVersion
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BalancesStorage.GetStorageVersion">
            <summary>
            >> StorageVersion
             Storage version of the pallet.
            
             This is set to v2.0.0 for new networks.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IBoilerPlateStorage">
            <summary>
            IBoilerPlateStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBoilerPlateStorage.GetSomething">
            <summary>
            >> Something
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.BoilerPlateStorage">
            <summary>
            BoilerPlateStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BoilerPlateStorage._somethingTypedStorage">
            <summary>
            _somethingTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BoilerPlateStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            BoilerPlateStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BoilerPlateStorage.SomethingTypedStorage">
            <summary>
            _somethingTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BoilerPlateStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BoilerPlateStorage.OnUpdateSomething(System.String)">
            <summary>
            Implements any storage change for BoilerPlate.Something
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BoilerPlateStorage.GetSomething">
            <summary>
            >> Something
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IBountiesStorage">
            <summary>
            IBountiesStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBountiesStorage.GetBountyCount">
            <summary>
            >> BountyCount
             Number of bounty proposals that have been made.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBountiesStorage.GetBounties(System.String)">
            <summary>
            >> Bounties
             Bounties that have been made.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBountiesStorage.GetBountyDescriptions(System.String)">
            <summary>
            >> BountyDescriptions
             The description of each bounty.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IBountiesStorage.GetBountyApprovals">
            <summary>
            >> BountyApprovals
             Bounty indices that have been approved but not yet funded.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.BountiesStorage">
            <summary>
            BountiesStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BountiesStorage._bountyCountTypedStorage">
            <summary>
            _bountyCountTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BountiesStorage._bountiesTypedStorage">
            <summary>
            _bountiesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BountiesStorage._bountyDescriptionsTypedStorage">
            <summary>
            _bountyDescriptionsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.BountiesStorage._bountyApprovalsTypedStorage">
            <summary>
            _bountyApprovalsTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BountiesStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            BountiesStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BountiesStorage.BountyCountTypedStorage">
            <summary>
            _bountyCountTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BountiesStorage.BountiesTypedStorage">
            <summary>
            _bountiesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BountiesStorage.BountyDescriptionsTypedStorage">
            <summary>
            _bountyDescriptionsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.BountiesStorage.BountyApprovalsTypedStorage">
            <summary>
            _bountyApprovalsTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BountiesStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BountiesStorage.OnUpdateBountyCount(System.String)">
            <summary>
            Implements any storage change for Bounties.BountyCount
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BountiesStorage.GetBountyCount">
            <summary>
            >> BountyCount
             Number of bounty proposals that have been made.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BountiesStorage.OnUpdateBounties(System.String,System.String)">
            <summary>
            Implements any storage change for Bounties.Bounties
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BountiesStorage.GetBounties(System.String)">
            <summary>
            >> Bounties
             Bounties that have been made.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BountiesStorage.OnUpdateBountyDescriptions(System.String,System.String)">
            <summary>
            Implements any storage change for Bounties.BountyDescriptions
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BountiesStorage.GetBountyDescriptions(System.String)">
            <summary>
            >> BountyDescriptions
             The description of each bounty.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BountiesStorage.OnUpdateBountyApprovals(System.String)">
            <summary>
            Implements any storage change for Bounties.BountyApprovals
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.BountiesStorage.GetBountyApprovals">
            <summary>
            >> BountyApprovals
             Bounty indices that have been approved but not yet funded.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IConnectFourMamaStorage">
            <summary>
            IConnectFourMamaStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IConnectFourMamaStorage.GetBracketsCount">
            <summary>
            >> BracketsCount
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IConnectFourMamaStorage.GetBracketIndices(System.String)">
            <summary>
            >> BracketIndices
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IConnectFourMamaStorage.GetBracketIndexKeyMap(System.String)">
            <summary>
            >> BracketIndexKeyMap
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IConnectFourMamaStorage.GetBracketKeyValueMap(System.String)">
            <summary>
            >> BracketKeyValueMap
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.ConnectFourMamaStorage">
            <summary>
            ConnectFourMamaStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ConnectFourMamaStorage._bracketsCountTypedStorage">
            <summary>
            _bracketsCountTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ConnectFourMamaStorage._bracketIndicesTypedStorage">
            <summary>
            _bracketIndicesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ConnectFourMamaStorage._bracketIndexKeyMapTypedStorage">
            <summary>
            _bracketIndexKeyMapTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ConnectFourMamaStorage._bracketKeyValueMapTypedStorage">
            <summary>
            _bracketKeyValueMapTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourMamaStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            ConnectFourMamaStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ConnectFourMamaStorage.BracketsCountTypedStorage">
            <summary>
            _bracketsCountTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ConnectFourMamaStorage.BracketIndicesTypedStorage">
            <summary>
            _bracketIndicesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ConnectFourMamaStorage.BracketIndexKeyMapTypedStorage">
            <summary>
            _bracketIndexKeyMapTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ConnectFourMamaStorage.BracketKeyValueMapTypedStorage">
            <summary>
            _bracketKeyValueMapTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourMamaStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourMamaStorage.OnUpdateBracketsCount(System.String)">
            <summary>
            Implements any storage change for ConnectFourMama.BracketsCount
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourMamaStorage.GetBracketsCount">
            <summary>
            >> BracketsCount
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourMamaStorage.OnUpdateBracketIndices(System.String,System.String)">
            <summary>
            Implements any storage change for ConnectFourMama.BracketIndices
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourMamaStorage.GetBracketIndices(System.String)">
            <summary>
            >> BracketIndices
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourMamaStorage.OnUpdateBracketIndexKeyMap(System.String,System.String)">
            <summary>
            Implements any storage change for ConnectFourMama.BracketIndexKeyMap
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourMamaStorage.GetBracketIndexKeyMap(System.String)">
            <summary>
            >> BracketIndexKeyMap
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourMamaStorage.OnUpdateBracketKeyValueMap(System.String,System.String)">
            <summary>
            Implements any storage change for ConnectFourMama.BracketKeyValueMap
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourMamaStorage.GetBracketKeyValueMap(System.String)">
            <summary>
            >> BracketKeyValueMap
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IConnectFourStorage">
            <summary>
            IConnectFourStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IConnectFourStorage.GetSomething">
            <summary>
            >> Something
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IConnectFourStorage.GetFounderKey">
            <summary>
            >> FounderKey
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IConnectFourStorage.GetBoards(System.String)">
            <summary>
            >> Boards
             Store all boards that are currently being played.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IConnectFourStorage.GetPlayerBoard(System.String)">
            <summary>
            >> PlayerBoard
             Store players active board, currently only one board per player allowed.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IConnectFourStorage.GetBoardSchedules(System.String)">
            <summary>
            >> BoardSchedules
             Store boards open schedules.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IConnectFourStorage.GetNonce">
            <summary>
            >> Nonce
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.ConnectFourStorage">
            <summary>
            ConnectFourStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ConnectFourStorage._somethingTypedStorage">
            <summary>
            _somethingTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ConnectFourStorage._founderKeyTypedStorage">
            <summary>
            _founderKeyTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ConnectFourStorage._boardsTypedStorage">
            <summary>
            _boardsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ConnectFourStorage._playerBoardTypedStorage">
            <summary>
            _playerBoardTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ConnectFourStorage._boardSchedulesTypedStorage">
            <summary>
            _boardSchedulesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ConnectFourStorage._nonceTypedStorage">
            <summary>
            _nonceTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            ConnectFourStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ConnectFourStorage.SomethingTypedStorage">
            <summary>
            _somethingTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ConnectFourStorage.FounderKeyTypedStorage">
            <summary>
            _founderKeyTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ConnectFourStorage.BoardsTypedStorage">
            <summary>
            _boardsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ConnectFourStorage.PlayerBoardTypedStorage">
            <summary>
            _playerBoardTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ConnectFourStorage.BoardSchedulesTypedStorage">
            <summary>
            _boardSchedulesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ConnectFourStorage.NonceTypedStorage">
            <summary>
            _nonceTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourStorage.OnUpdateSomething(System.String)">
            <summary>
            Implements any storage change for ConnectFour.Something
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourStorage.GetSomething">
            <summary>
            >> Something
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourStorage.OnUpdateFounderKey(System.String)">
            <summary>
            Implements any storage change for ConnectFour.FounderKey
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourStorage.GetFounderKey">
            <summary>
            >> FounderKey
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourStorage.OnUpdateBoards(System.String,System.String)">
            <summary>
            Implements any storage change for ConnectFour.Boards
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourStorage.GetBoards(System.String)">
            <summary>
            >> Boards
             Store all boards that are currently being played.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourStorage.OnUpdatePlayerBoard(System.String,System.String)">
            <summary>
            Implements any storage change for ConnectFour.PlayerBoard
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourStorage.GetPlayerBoard(System.String)">
            <summary>
            >> PlayerBoard
             Store players active board, currently only one board per player allowed.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourStorage.OnUpdateBoardSchedules(System.String,System.String)">
            <summary>
            Implements any storage change for ConnectFour.BoardSchedules
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourStorage.GetBoardSchedules(System.String)">
            <summary>
            >> BoardSchedules
             Store boards open schedules.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourStorage.OnUpdateNonce(System.String)">
            <summary>
            Implements any storage change for ConnectFour.Nonce
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ConnectFourStorage.GetNonce">
            <summary>
            >> Nonce
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IContractsStorage">
            <summary>
            IContractsStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IContractsStorage.GetPristineCode(System.String)">
            <summary>
            >> PristineCode
             A mapping from an original code hash to the original code, untouched by instrumentation.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IContractsStorage.GetCodeStorage(System.String)">
            <summary>
            >> CodeStorage
             A mapping between an original code hash and instrumented wasm code, ready for execution.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IContractsStorage.GetAccountCounter">
            <summary>
            >> AccountCounter
             The subtrie counter.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IContractsStorage.GetContractInfoOf(System.String)">
            <summary>
            >> ContractInfoOf
             The code associated with a given account.
            
             TWOX-NOTE: SAFE since `AccountId` is a secure hash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IContractsStorage.GetDeletionQueue">
            <summary>
            >> DeletionQueue
             Evicted contracts that await child trie deletion.
            
             Child trie deletion is a heavy operation depending on the amount of storage items
             stored in said trie. Therefore this operation is performed lazily in `on_initialize`.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.ContractsStorage">
            <summary>
            ContractsStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ContractsStorage._pristineCodeTypedStorage">
            <summary>
            _pristineCodeTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ContractsStorage._codeStorageTypedStorage">
            <summary>
            _codeStorageTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ContractsStorage._accountCounterTypedStorage">
            <summary>
            _accountCounterTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ContractsStorage._contractInfoOfTypedStorage">
            <summary>
            _contractInfoOfTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ContractsStorage._deletionQueueTypedStorage">
            <summary>
            _deletionQueueTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ContractsStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            ContractsStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ContractsStorage.PristineCodeTypedStorage">
            <summary>
            _pristineCodeTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ContractsStorage.CodeStorageTypedStorage">
            <summary>
            _codeStorageTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ContractsStorage.AccountCounterTypedStorage">
            <summary>
            _accountCounterTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ContractsStorage.ContractInfoOfTypedStorage">
            <summary>
            _contractInfoOfTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ContractsStorage.DeletionQueueTypedStorage">
            <summary>
            _deletionQueueTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ContractsStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ContractsStorage.OnUpdatePristineCode(System.String,System.String)">
            <summary>
            Implements any storage change for Contracts.PristineCode
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ContractsStorage.GetPristineCode(System.String)">
            <summary>
            >> PristineCode
             A mapping from an original code hash to the original code, untouched by instrumentation.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ContractsStorage.OnUpdateCodeStorage(System.String,System.String)">
            <summary>
            Implements any storage change for Contracts.CodeStorage
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ContractsStorage.GetCodeStorage(System.String)">
            <summary>
            >> CodeStorage
             A mapping between an original code hash and instrumented wasm code, ready for execution.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ContractsStorage.OnUpdateAccountCounter(System.String)">
            <summary>
            Implements any storage change for Contracts.AccountCounter
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ContractsStorage.GetAccountCounter">
            <summary>
            >> AccountCounter
             The subtrie counter.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ContractsStorage.OnUpdateContractInfoOf(System.String,System.String)">
            <summary>
            Implements any storage change for Contracts.ContractInfoOf
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ContractsStorage.GetContractInfoOf(System.String)">
            <summary>
            >> ContractInfoOf
             The code associated with a given account.
            
             TWOX-NOTE: SAFE since `AccountId` is a secure hash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ContractsStorage.OnUpdateDeletionQueue(System.String)">
            <summary>
            Implements any storage change for Contracts.DeletionQueue
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ContractsStorage.GetDeletionQueue">
            <summary>
            >> DeletionQueue
             Evicted contracts that await child trie deletion.
            
             Child trie deletion is a heavy operation depending on the amount of storage items
             stored in said trie. Therefore this operation is performed lazily in `on_initialize`.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.ICouncilStorage">
            <summary>
            ICouncilStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ICouncilStorage.GetProposals">
            <summary>
            >> Proposals
             The hashes of the active proposals.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ICouncilStorage.GetProposalOf(System.String)">
            <summary>
            >> ProposalOf
             Actual proposal for a given hash, if it&#39;s current.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ICouncilStorage.GetVoting(System.String)">
            <summary>
            >> Voting
             Votes on a given proposal, if it is ongoing.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ICouncilStorage.GetProposalCount">
            <summary>
            >> ProposalCount
             Proposals so far.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ICouncilStorage.GetMembers">
            <summary>
            >> Members
             The current members of the collective. This is stored sorted (just by value).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ICouncilStorage.GetPrime">
            <summary>
            >> Prime
             The prime member that helps determine the default vote behavior in case of absentations.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.CouncilStorage">
            <summary>
            CouncilStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.CouncilStorage._proposalsTypedStorage">
            <summary>
            _proposalsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.CouncilStorage._proposalOfTypedStorage">
            <summary>
            _proposalOfTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.CouncilStorage._votingTypedStorage">
            <summary>
            _votingTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.CouncilStorage._proposalCountTypedStorage">
            <summary>
            _proposalCountTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.CouncilStorage._membersTypedStorage">
            <summary>
            _membersTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.CouncilStorage._primeTypedStorage">
            <summary>
            _primeTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.CouncilStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            CouncilStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.CouncilStorage.ProposalsTypedStorage">
            <summary>
            _proposalsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.CouncilStorage.ProposalOfTypedStorage">
            <summary>
            _proposalOfTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.CouncilStorage.VotingTypedStorage">
            <summary>
            _votingTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.CouncilStorage.ProposalCountTypedStorage">
            <summary>
            _proposalCountTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.CouncilStorage.MembersTypedStorage">
            <summary>
            _membersTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.CouncilStorage.PrimeTypedStorage">
            <summary>
            _primeTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.CouncilStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.CouncilStorage.OnUpdateProposals(System.String)">
            <summary>
            Implements any storage change for Council.Proposals
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.CouncilStorage.GetProposals">
            <summary>
            >> Proposals
             The hashes of the active proposals.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.CouncilStorage.OnUpdateProposalOf(System.String,System.String)">
            <summary>
            Implements any storage change for Council.ProposalOf
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.CouncilStorage.GetProposalOf(System.String)">
            <summary>
            >> ProposalOf
             Actual proposal for a given hash, if it&#39;s current.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.CouncilStorage.OnUpdateVoting(System.String,System.String)">
            <summary>
            Implements any storage change for Council.Voting
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.CouncilStorage.GetVoting(System.String)">
            <summary>
            >> Voting
             Votes on a given proposal, if it is ongoing.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.CouncilStorage.OnUpdateProposalCount(System.String)">
            <summary>
            Implements any storage change for Council.ProposalCount
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.CouncilStorage.GetProposalCount">
            <summary>
            >> ProposalCount
             Proposals so far.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.CouncilStorage.OnUpdateMembers(System.String)">
            <summary>
            Implements any storage change for Council.Members
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.CouncilStorage.GetMembers">
            <summary>
            >> Members
             The current members of the collective. This is stored sorted (just by value).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.CouncilStorage.OnUpdatePrime(System.String)">
            <summary>
            Implements any storage change for Council.Prime
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.CouncilStorage.GetPrime">
            <summary>
            >> Prime
             The prime member that helps determine the default vote behavior in case of absentations.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IDemocracyStorage">
            <summary>
            IDemocracyStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IDemocracyStorage.GetPublicPropCount">
            <summary>
            >> PublicPropCount
             The number of (public) proposals that have been made so far.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IDemocracyStorage.GetPublicProps">
            <summary>
            >> PublicProps
             The public proposals. Unsorted. The second item is the proposal&#39;s hash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IDemocracyStorage.GetDepositOf(System.String)">
            <summary>
            >> DepositOf
             Those who have locked a deposit.
            
             TWOX-NOTE: Safe, as increasing integer keys are safe.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IDemocracyStorage.GetPreimages(System.String)">
            <summary>
            >> Preimages
             Map of hashes to the proposal preimage, along with who registered it and their deposit.
             The block number is the block at which it was deposited.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IDemocracyStorage.GetReferendumCount">
            <summary>
            >> ReferendumCount
             The next free referendum index, aka the number of referenda started so far.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IDemocracyStorage.GetLowestUnbaked">
            <summary>
            >> LowestUnbaked
             The lowest referendum index representing an unbaked referendum. Equal to
             `ReferendumCount` if there isn&#39;t a unbaked referendum.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IDemocracyStorage.GetReferendumInfoOf(System.String)">
            <summary>
            >> ReferendumInfoOf
             Information concerning any given referendum.
            
             TWOX-NOTE: SAFE as indexes are not under an attacker���s control.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IDemocracyStorage.GetVotingOf(System.String)">
            <summary>
            >> VotingOf
             All votes for a particular voter. We store the balance for the number of votes that we
             have recorded. The second item is the total amount of delegations, that will be added.
            
             TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IDemocracyStorage.GetLocks(System.String)">
            <summary>
            >> Locks
             Accounts for which there are locks in action which may be removed at some point in the
             future. The value is the block number at which the lock expires and may be removed.
            
             TWOX-NOTE: OK ��� `AccountId` is a secure hash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IDemocracyStorage.GetLastTabledWasExternal">
            <summary>
            >> LastTabledWasExternal
             True if the last referendum tabled was submitted externally. False if it was a public
             proposal.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IDemocracyStorage.GetNextExternal">
            <summary>
            >> NextExternal
             The referendum to be tabled whenever it would be valid to table an external proposal.
             This happens when a referendum needs to be tabled and one of two conditions are met:
             - `LastTabledWasExternal` is `false`; or
             - `PublicProps` is empty.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IDemocracyStorage.GetBlacklist(System.String)">
            <summary>
            >> Blacklist
             A record of who vetoed what. Maps proposal hash to a possible existent block number
             (until when it may not be resubmitted) and who vetoed it.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IDemocracyStorage.GetCancellations(System.String)">
            <summary>
            >> Cancellations
             Record of all proposals that have been subject to emergency cancellation.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IDemocracyStorage.GetStorageVersion">
            <summary>
            >> StorageVersion
             Storage version of the pallet.
            
             New networks start with last version.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.DemocracyStorage">
            <summary>
            DemocracyStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.DemocracyStorage._publicPropCountTypedStorage">
            <summary>
            _publicPropCountTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.DemocracyStorage._publicPropsTypedStorage">
            <summary>
            _publicPropsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.DemocracyStorage._depositOfTypedStorage">
            <summary>
            _depositOfTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.DemocracyStorage._preimagesTypedStorage">
            <summary>
            _preimagesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.DemocracyStorage._referendumCountTypedStorage">
            <summary>
            _referendumCountTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.DemocracyStorage._lowestUnbakedTypedStorage">
            <summary>
            _lowestUnbakedTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.DemocracyStorage._referendumInfoOfTypedStorage">
            <summary>
            _referendumInfoOfTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.DemocracyStorage._votingOfTypedStorage">
            <summary>
            _votingOfTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.DemocracyStorage._locksTypedStorage">
            <summary>
            _locksTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.DemocracyStorage._lastTabledWasExternalTypedStorage">
            <summary>
            _lastTabledWasExternalTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.DemocracyStorage._nextExternalTypedStorage">
            <summary>
            _nextExternalTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.DemocracyStorage._blacklistTypedStorage">
            <summary>
            _blacklistTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.DemocracyStorage._cancellationsTypedStorage">
            <summary>
            _cancellationsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.DemocracyStorage._storageVersionTypedStorage">
            <summary>
            _storageVersionTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            DemocracyStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.DemocracyStorage.PublicPropCountTypedStorage">
            <summary>
            _publicPropCountTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.DemocracyStorage.PublicPropsTypedStorage">
            <summary>
            _publicPropsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.DemocracyStorage.DepositOfTypedStorage">
            <summary>
            _depositOfTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.DemocracyStorage.PreimagesTypedStorage">
            <summary>
            _preimagesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.DemocracyStorage.ReferendumCountTypedStorage">
            <summary>
            _referendumCountTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.DemocracyStorage.LowestUnbakedTypedStorage">
            <summary>
            _lowestUnbakedTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.DemocracyStorage.ReferendumInfoOfTypedStorage">
            <summary>
            _referendumInfoOfTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.DemocracyStorage.VotingOfTypedStorage">
            <summary>
            _votingOfTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.DemocracyStorage.LocksTypedStorage">
            <summary>
            _locksTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.DemocracyStorage.LastTabledWasExternalTypedStorage">
            <summary>
            _lastTabledWasExternalTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.DemocracyStorage.NextExternalTypedStorage">
            <summary>
            _nextExternalTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.DemocracyStorage.BlacklistTypedStorage">
            <summary>
            _blacklistTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.DemocracyStorage.CancellationsTypedStorage">
            <summary>
            _cancellationsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.DemocracyStorage.StorageVersionTypedStorage">
            <summary>
            _storageVersionTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.OnUpdatePublicPropCount(System.String)">
            <summary>
            Implements any storage change for Democracy.PublicPropCount
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.GetPublicPropCount">
            <summary>
            >> PublicPropCount
             The number of (public) proposals that have been made so far.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.OnUpdatePublicProps(System.String)">
            <summary>
            Implements any storage change for Democracy.PublicProps
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.GetPublicProps">
            <summary>
            >> PublicProps
             The public proposals. Unsorted. The second item is the proposal&#39;s hash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.OnUpdateDepositOf(System.String,System.String)">
            <summary>
            Implements any storage change for Democracy.DepositOf
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.GetDepositOf(System.String)">
            <summary>
            >> DepositOf
             Those who have locked a deposit.
            
             TWOX-NOTE: Safe, as increasing integer keys are safe.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.OnUpdatePreimages(System.String,System.String)">
            <summary>
            Implements any storage change for Democracy.Preimages
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.GetPreimages(System.String)">
            <summary>
            >> Preimages
             Map of hashes to the proposal preimage, along with who registered it and their deposit.
             The block number is the block at which it was deposited.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.OnUpdateReferendumCount(System.String)">
            <summary>
            Implements any storage change for Democracy.ReferendumCount
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.GetReferendumCount">
            <summary>
            >> ReferendumCount
             The next free referendum index, aka the number of referenda started so far.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.OnUpdateLowestUnbaked(System.String)">
            <summary>
            Implements any storage change for Democracy.LowestUnbaked
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.GetLowestUnbaked">
            <summary>
            >> LowestUnbaked
             The lowest referendum index representing an unbaked referendum. Equal to
             `ReferendumCount` if there isn&#39;t a unbaked referendum.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.OnUpdateReferendumInfoOf(System.String,System.String)">
            <summary>
            Implements any storage change for Democracy.ReferendumInfoOf
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.GetReferendumInfoOf(System.String)">
            <summary>
            >> ReferendumInfoOf
             Information concerning any given referendum.
            
             TWOX-NOTE: SAFE as indexes are not under an attacker���s control.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.OnUpdateVotingOf(System.String,System.String)">
            <summary>
            Implements any storage change for Democracy.VotingOf
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.GetVotingOf(System.String)">
            <summary>
            >> VotingOf
             All votes for a particular voter. We store the balance for the number of votes that we
             have recorded. The second item is the total amount of delegations, that will be added.
            
             TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.OnUpdateLocks(System.String,System.String)">
            <summary>
            Implements any storage change for Democracy.Locks
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.GetLocks(System.String)">
            <summary>
            >> Locks
             Accounts for which there are locks in action which may be removed at some point in the
             future. The value is the block number at which the lock expires and may be removed.
            
             TWOX-NOTE: OK ��� `AccountId` is a secure hash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.OnUpdateLastTabledWasExternal(System.String)">
            <summary>
            Implements any storage change for Democracy.LastTabledWasExternal
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.GetLastTabledWasExternal">
            <summary>
            >> LastTabledWasExternal
             True if the last referendum tabled was submitted externally. False if it was a public
             proposal.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.OnUpdateNextExternal(System.String)">
            <summary>
            Implements any storage change for Democracy.NextExternal
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.GetNextExternal">
            <summary>
            >> NextExternal
             The referendum to be tabled whenever it would be valid to table an external proposal.
             This happens when a referendum needs to be tabled and one of two conditions are met:
             - `LastTabledWasExternal` is `false`; or
             - `PublicProps` is empty.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.OnUpdateBlacklist(System.String,System.String)">
            <summary>
            Implements any storage change for Democracy.Blacklist
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.GetBlacklist(System.String)">
            <summary>
            >> Blacklist
             A record of who vetoed what. Maps proposal hash to a possible existent block number
             (until when it may not be resubmitted) and who vetoed it.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.OnUpdateCancellations(System.String,System.String)">
            <summary>
            Implements any storage change for Democracy.Cancellations
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.GetCancellations(System.String)">
            <summary>
            >> Cancellations
             Record of all proposals that have been subject to emergency cancellation.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.OnUpdateStorageVersion(System.String)">
            <summary>
            Implements any storage change for Democracy.StorageVersion
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.DemocracyStorage.GetStorageVersion">
            <summary>
            >> StorageVersion
             Storage version of the pallet.
            
             New networks start with last version.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IElectionProviderMultiPhaseStorage">
            <summary>
            IElectionProviderMultiPhaseStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IElectionProviderMultiPhaseStorage.GetRound">
            <summary>
            >> Round
             Internal counter for the number of rounds.
            
             This is useful for de-duplication of transactions submitted to the pool, and general
             diagnostics of the pallet.
            
             This is merely incremented once per every time that an upstream `elect` is called.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IElectionProviderMultiPhaseStorage.GetCurrentPhase">
            <summary>
            >> CurrentPhase
             Current phase.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IElectionProviderMultiPhaseStorage.GetQueuedSolution">
            <summary>
            >> QueuedSolution
             Current best solution, signed or unsigned, queued to be returned upon `elect`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IElectionProviderMultiPhaseStorage.GetSnapshot">
            <summary>
            >> Snapshot
             Snapshot data of the round.
            
             This is created at the beginning of the signed phase and cleared upon calling `elect`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IElectionProviderMultiPhaseStorage.GetDesiredTargets">
            <summary>
            >> DesiredTargets
             Desired number of targets to elect for this round.
            
             Only exists when [`Snapshot`] is present.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IElectionProviderMultiPhaseStorage.GetSnapshotMetadata">
            <summary>
            >> SnapshotMetadata
             The metadata of the [`RoundSnapshot`]
            
             Only exists when [`Snapshot`] is present.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IElectionProviderMultiPhaseStorage.GetSignedSubmissionNextIndex">
            <summary>
            >> SignedSubmissionNextIndex
             The next index to be assigned to an incoming signed submission.
            
             Every accepted submission is assigned a unique index; that index is bound to that particular
             submission for the duration of the election. On election finalization, the next index is
             reset to 0.
            
             We can&#39;t just use `SignedSubmissionIndices.len()`, because that&#39;s a bounded set; past its
             capacity, it will simply saturate. We can&#39;t just iterate over `SignedSubmissionsMap`,
             because iteration is slow. Instead, we store the value here.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IElectionProviderMultiPhaseStorage.GetSignedSubmissionIndices">
            <summary>
            >> SignedSubmissionIndices
             A sorted, bounded set of `(score, index)`, where each `index` points to a value in
             `SignedSubmissions`.
            
             We never need to process more than a single signed submission at a time. Signed submissions
             can be quite large, so we&#39;re willing to pay the cost of multiple database accesses to access
             them one at a time instead of reading and decoding all of them at once.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IElectionProviderMultiPhaseStorage.GetSignedSubmissionsMap(System.String)">
            <summary>
            >> SignedSubmissionsMap
             Unchecked, signed solutions.
            
             Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while
             allowing us to keep only a single one in memory at a time.
            
             Twox note: the key of the map is an auto-incrementing index which users cannot inspect or
             affect; we shouldn&#39;t need a cryptographically secure hasher.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IElectionProviderMultiPhaseStorage.GetMinimumUntrustedScore">
            <summary>
            >> MinimumUntrustedScore
             The minimum score that each &#39;untrusted&#39; solution must attain in order to be considered
             feasible.
            
             Can be set via `set_minimum_untrusted_score`.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage">
            <summary>
            ElectionProviderMultiPhaseStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage._roundTypedStorage">
            <summary>
            _roundTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage._currentPhaseTypedStorage">
            <summary>
            _currentPhaseTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage._queuedSolutionTypedStorage">
            <summary>
            _queuedSolutionTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage._snapshotTypedStorage">
            <summary>
            _snapshotTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage._desiredTargetsTypedStorage">
            <summary>
            _desiredTargetsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage._snapshotMetadataTypedStorage">
            <summary>
            _snapshotMetadataTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage._signedSubmissionNextIndexTypedStorage">
            <summary>
            _signedSubmissionNextIndexTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage._signedSubmissionIndicesTypedStorage">
            <summary>
            _signedSubmissionIndicesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage._signedSubmissionsMapTypedStorage">
            <summary>
            _signedSubmissionsMapTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage._minimumUntrustedScoreTypedStorage">
            <summary>
            _minimumUntrustedScoreTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            ElectionProviderMultiPhaseStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.RoundTypedStorage">
            <summary>
            _roundTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.CurrentPhaseTypedStorage">
            <summary>
            _currentPhaseTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.QueuedSolutionTypedStorage">
            <summary>
            _queuedSolutionTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.SnapshotTypedStorage">
            <summary>
            _snapshotTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.DesiredTargetsTypedStorage">
            <summary>
            _desiredTargetsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.SnapshotMetadataTypedStorage">
            <summary>
            _snapshotMetadataTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexTypedStorage">
            <summary>
            _signedSubmissionNextIndexTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesTypedStorage">
            <summary>
            _signedSubmissionIndicesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapTypedStorage">
            <summary>
            _signedSubmissionsMapTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreTypedStorage">
            <summary>
            _minimumUntrustedScoreTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.OnUpdateRound(System.String)">
            <summary>
            Implements any storage change for ElectionProviderMultiPhase.Round
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.GetRound">
            <summary>
            >> Round
             Internal counter for the number of rounds.
            
             This is useful for de-duplication of transactions submitted to the pool, and general
             diagnostics of the pallet.
            
             This is merely incremented once per every time that an upstream `elect` is called.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.OnUpdateCurrentPhase(System.String)">
            <summary>
            Implements any storage change for ElectionProviderMultiPhase.CurrentPhase
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.GetCurrentPhase">
            <summary>
            >> CurrentPhase
             Current phase.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.OnUpdateQueuedSolution(System.String)">
            <summary>
            Implements any storage change for ElectionProviderMultiPhase.QueuedSolution
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.GetQueuedSolution">
            <summary>
            >> QueuedSolution
             Current best solution, signed or unsigned, queued to be returned upon `elect`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.OnUpdateSnapshot(System.String)">
            <summary>
            Implements any storage change for ElectionProviderMultiPhase.Snapshot
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.GetSnapshot">
            <summary>
            >> Snapshot
             Snapshot data of the round.
            
             This is created at the beginning of the signed phase and cleared upon calling `elect`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.OnUpdateDesiredTargets(System.String)">
            <summary>
            Implements any storage change for ElectionProviderMultiPhase.DesiredTargets
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.GetDesiredTargets">
            <summary>
            >> DesiredTargets
             Desired number of targets to elect for this round.
            
             Only exists when [`Snapshot`] is present.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.OnUpdateSnapshotMetadata(System.String)">
            <summary>
            Implements any storage change for ElectionProviderMultiPhase.SnapshotMetadata
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.GetSnapshotMetadata">
            <summary>
            >> SnapshotMetadata
             The metadata of the [`RoundSnapshot`]
            
             Only exists when [`Snapshot`] is present.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.OnUpdateSignedSubmissionNextIndex(System.String)">
            <summary>
            Implements any storage change for ElectionProviderMultiPhase.SignedSubmissionNextIndex
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.GetSignedSubmissionNextIndex">
            <summary>
            >> SignedSubmissionNextIndex
             The next index to be assigned to an incoming signed submission.
            
             Every accepted submission is assigned a unique index; that index is bound to that particular
             submission for the duration of the election. On election finalization, the next index is
             reset to 0.
            
             We can&#39;t just use `SignedSubmissionIndices.len()`, because that&#39;s a bounded set; past its
             capacity, it will simply saturate. We can&#39;t just iterate over `SignedSubmissionsMap`,
             because iteration is slow. Instead, we store the value here.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.OnUpdateSignedSubmissionIndices(System.String)">
            <summary>
            Implements any storage change for ElectionProviderMultiPhase.SignedSubmissionIndices
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.GetSignedSubmissionIndices">
            <summary>
            >> SignedSubmissionIndices
             A sorted, bounded set of `(score, index)`, where each `index` points to a value in
             `SignedSubmissions`.
            
             We never need to process more than a single signed submission at a time. Signed submissions
             can be quite large, so we&#39;re willing to pay the cost of multiple database accesses to access
             them one at a time instead of reading and decoding all of them at once.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.OnUpdateSignedSubmissionsMap(System.String,System.String)">
            <summary>
            Implements any storage change for ElectionProviderMultiPhase.SignedSubmissionsMap
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.GetSignedSubmissionsMap(System.String)">
            <summary>
            >> SignedSubmissionsMap
             Unchecked, signed solutions.
            
             Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while
             allowing us to keep only a single one in memory at a time.
            
             Twox note: the key of the map is an auto-incrementing index which users cannot inspect or
             affect; we shouldn&#39;t need a cryptographically secure hasher.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.OnUpdateMinimumUntrustedScore(System.String)">
            <summary>
            Implements any storage change for ElectionProviderMultiPhase.MinimumUntrustedScore
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionProviderMultiPhaseStorage.GetMinimumUntrustedScore">
            <summary>
            >> MinimumUntrustedScore
             The minimum score that each &#39;untrusted&#39; solution must attain in order to be considered
             feasible.
            
             Can be set via `set_minimum_untrusted_score`.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IElectionsStorage">
            <summary>
            IElectionsStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IElectionsStorage.GetMembers">
            <summary>
            >> Members
             The current elected members.
            
             Invariant: Always sorted based on account id.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IElectionsStorage.GetRunnersUp">
            <summary>
            >> RunnersUp
             The current reserved runners-up.
            
             Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the
             last (i.e. _best_) runner-up will be replaced.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IElectionsStorage.GetCandidates">
            <summary>
            >> Candidates
             The present candidate list. A current member or runner-up can never enter this vector
             and is always implicitly assumed to be a candidate.
            
             Second element is the deposit.
            
             Invariant: Always sorted based on account id.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IElectionsStorage.GetElectionRounds">
            <summary>
            >> ElectionRounds
             The total number of vote rounds that have happened, excluding the upcoming one.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IElectionsStorage.GetVoting(System.String)">
            <summary>
            >> Voting
             Votes and locked stake of a particular voter.
            
             TWOX-NOTE: SAFE as `AccountId` is a crypto hash.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.ElectionsStorage">
            <summary>
            ElectionsStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ElectionsStorage._membersTypedStorage">
            <summary>
            _membersTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ElectionsStorage._runnersUpTypedStorage">
            <summary>
            _runnersUpTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ElectionsStorage._candidatesTypedStorage">
            <summary>
            _candidatesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ElectionsStorage._electionRoundsTypedStorage">
            <summary>
            _electionRoundsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ElectionsStorage._votingTypedStorage">
            <summary>
            _votingTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionsStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            ElectionsStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ElectionsStorage.MembersTypedStorage">
            <summary>
            _membersTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ElectionsStorage.RunnersUpTypedStorage">
            <summary>
            _runnersUpTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ElectionsStorage.CandidatesTypedStorage">
            <summary>
            _candidatesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ElectionsStorage.ElectionRoundsTypedStorage">
            <summary>
            _electionRoundsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ElectionsStorage.VotingTypedStorage">
            <summary>
            _votingTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionsStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionsStorage.OnUpdateMembers(System.String)">
            <summary>
            Implements any storage change for Elections.Members
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionsStorage.GetMembers">
            <summary>
            >> Members
             The current elected members.
            
             Invariant: Always sorted based on account id.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionsStorage.OnUpdateRunnersUp(System.String)">
            <summary>
            Implements any storage change for Elections.RunnersUp
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionsStorage.GetRunnersUp">
            <summary>
            >> RunnersUp
             The current reserved runners-up.
            
             Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the
             last (i.e. _best_) runner-up will be replaced.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionsStorage.OnUpdateCandidates(System.String)">
            <summary>
            Implements any storage change for Elections.Candidates
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionsStorage.GetCandidates">
            <summary>
            >> Candidates
             The present candidate list. A current member or runner-up can never enter this vector
             and is always implicitly assumed to be a candidate.
            
             Second element is the deposit.
            
             Invariant: Always sorted based on account id.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionsStorage.OnUpdateElectionRounds(System.String)">
            <summary>
            Implements any storage change for Elections.ElectionRounds
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionsStorage.GetElectionRounds">
            <summary>
            >> ElectionRounds
             The total number of vote rounds that have happened, excluding the upcoming one.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionsStorage.OnUpdateVoting(System.String,System.String)">
            <summary>
            Implements any storage change for Elections.Voting
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ElectionsStorage.GetVoting(System.String)">
            <summary>
            >> Voting
             Votes and locked stake of a particular voter.
            
             TWOX-NOTE: SAFE as `AccountId` is a crypto hash.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IGiltStorage">
            <summary>
            IGiltStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IGiltStorage.GetQueueTotals">
            <summary>
            >> QueueTotals
             The totals of items and balances within each queue. Saves a lot of storage reads in the
             case of sparsely packed queues.
            
             The vector is indexed by duration in `Period`s, offset by one, so information on the queue
             whose duration is one `Period` would be storage `0`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IGiltStorage.GetQueues(System.String)">
            <summary>
            >> Queues
             The queues of bids ready to become gilts. Indexed by duration (in `Period`s).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IGiltStorage.GetActiveTotal">
            <summary>
            >> ActiveTotal
             Information relating to the gilts currently active.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IGiltStorage.GetActive(System.String)">
            <summary>
            >> Active
             The currently active gilts, indexed according to the order of creation.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.GiltStorage">
            <summary>
            GiltStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.GiltStorage._queueTotalsTypedStorage">
            <summary>
            _queueTotalsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.GiltStorage._queuesTypedStorage">
            <summary>
            _queuesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.GiltStorage._activeTotalTypedStorage">
            <summary>
            _activeTotalTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.GiltStorage._activeTypedStorage">
            <summary>
            _activeTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GiltStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            GiltStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.GiltStorage.QueueTotalsTypedStorage">
            <summary>
            _queueTotalsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.GiltStorage.QueuesTypedStorage">
            <summary>
            _queuesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.GiltStorage.ActiveTotalTypedStorage">
            <summary>
            _activeTotalTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.GiltStorage.ActiveTypedStorage">
            <summary>
            _activeTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GiltStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GiltStorage.OnUpdateQueueTotals(System.String)">
            <summary>
            Implements any storage change for Gilt.QueueTotals
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GiltStorage.GetQueueTotals">
            <summary>
            >> QueueTotals
             The totals of items and balances within each queue. Saves a lot of storage reads in the
             case of sparsely packed queues.
            
             The vector is indexed by duration in `Period`s, offset by one, so information on the queue
             whose duration is one `Period` would be storage `0`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GiltStorage.OnUpdateQueues(System.String,System.String)">
            <summary>
            Implements any storage change for Gilt.Queues
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GiltStorage.GetQueues(System.String)">
            <summary>
            >> Queues
             The queues of bids ready to become gilts. Indexed by duration (in `Period`s).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GiltStorage.OnUpdateActiveTotal(System.String)">
            <summary>
            Implements any storage change for Gilt.ActiveTotal
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GiltStorage.GetActiveTotal">
            <summary>
            >> ActiveTotal
             Information relating to the gilts currently active.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GiltStorage.OnUpdateActive(System.String,System.String)">
            <summary>
            Implements any storage change for Gilt.Active
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GiltStorage.GetActive(System.String)">
            <summary>
            >> Active
             The currently active gilts, indexed according to the order of creation.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IGrandpaStorage">
            <summary>
            IGrandpaStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IGrandpaStorage.GetState">
            <summary>
            >> State
             State of the current authority set.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IGrandpaStorage.GetPendingChange">
            <summary>
            >> PendingChange
             Pending change: (signaled at, scheduled change).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IGrandpaStorage.GetNextForced">
            <summary>
            >> NextForced
             next block number where we can force a change.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IGrandpaStorage.GetStalled">
            <summary>
            >> Stalled
             `true` if we are currently stalled.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IGrandpaStorage.GetCurrentSetId">
            <summary>
            >> CurrentSetId
             The number of changes (both in terms of keys and underlying economic responsibilities)
             in the &quot;set&quot; of Grandpa validators from genesis.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IGrandpaStorage.GetSetIdSession(System.String)">
            <summary>
            >> SetIdSession
             A mapping from grandpa set ID to the index of the *most recent* session for which its
             members were responsible.
            
             TWOX-NOTE: `SetId` is not under user control.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.GrandpaStorage">
            <summary>
            GrandpaStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.GrandpaStorage._stateTypedStorage">
            <summary>
            _stateTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.GrandpaStorage._pendingChangeTypedStorage">
            <summary>
            _pendingChangeTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.GrandpaStorage._nextForcedTypedStorage">
            <summary>
            _nextForcedTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.GrandpaStorage._stalledTypedStorage">
            <summary>
            _stalledTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.GrandpaStorage._currentSetIdTypedStorage">
            <summary>
            _currentSetIdTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.GrandpaStorage._setIdSessionTypedStorage">
            <summary>
            _setIdSessionTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GrandpaStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            GrandpaStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.GrandpaStorage.StateTypedStorage">
            <summary>
            _stateTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.GrandpaStorage.PendingChangeTypedStorage">
            <summary>
            _pendingChangeTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.GrandpaStorage.NextForcedTypedStorage">
            <summary>
            _nextForcedTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.GrandpaStorage.StalledTypedStorage">
            <summary>
            _stalledTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.GrandpaStorage.CurrentSetIdTypedStorage">
            <summary>
            _currentSetIdTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.GrandpaStorage.SetIdSessionTypedStorage">
            <summary>
            _setIdSessionTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GrandpaStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GrandpaStorage.OnUpdateState(System.String)">
            <summary>
            Implements any storage change for Grandpa.State
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GrandpaStorage.GetState">
            <summary>
            >> State
             State of the current authority set.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GrandpaStorage.OnUpdatePendingChange(System.String)">
            <summary>
            Implements any storage change for Grandpa.PendingChange
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GrandpaStorage.GetPendingChange">
            <summary>
            >> PendingChange
             Pending change: (signaled at, scheduled change).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GrandpaStorage.OnUpdateNextForced(System.String)">
            <summary>
            Implements any storage change for Grandpa.NextForced
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GrandpaStorage.GetNextForced">
            <summary>
            >> NextForced
             next block number where we can force a change.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GrandpaStorage.OnUpdateStalled(System.String)">
            <summary>
            Implements any storage change for Grandpa.Stalled
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GrandpaStorage.GetStalled">
            <summary>
            >> Stalled
             `true` if we are currently stalled.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GrandpaStorage.OnUpdateCurrentSetId(System.String)">
            <summary>
            Implements any storage change for Grandpa.CurrentSetId
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GrandpaStorage.GetCurrentSetId">
            <summary>
            >> CurrentSetId
             The number of changes (both in terms of keys and underlying economic responsibilities)
             in the &quot;set&quot; of Grandpa validators from genesis.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GrandpaStorage.OnUpdateSetIdSession(System.String,System.String)">
            <summary>
            Implements any storage change for Grandpa.SetIdSession
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.GrandpaStorage.GetSetIdSession(System.String)">
            <summary>
            >> SetIdSession
             A mapping from grandpa set ID to the index of the *most recent* session for which its
             members were responsible.
            
             TWOX-NOTE: `SetId` is not under user control.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IIdentityStorage">
            <summary>
            IIdentityStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IIdentityStorage.GetIdentityOf(System.String)">
            <summary>
            >> IdentityOf
             Information that is pertinent to identify the entity behind an account.
            
             TWOX-NOTE: OK ��� `AccountId` is a secure hash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IIdentityStorage.GetSuperOf(System.String)">
            <summary>
            >> SuperOf
             The super-identity of an alternative &quot;sub&quot; identity together with its name, within that
             context. If the account is not some other account&#39;s sub-identity, then just `None`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IIdentityStorage.GetSubsOf(System.String)">
            <summary>
            >> SubsOf
             Alternative &quot;sub&quot; identities of this account.
            
             The first item is the deposit, the second is a vector of the accounts.
            
             TWOX-NOTE: OK ��� `AccountId` is a secure hash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IIdentityStorage.GetRegistrars">
            <summary>
            >> Registrars
             The set of registrars. Not expected to get very big as can only be added through a
             special origin (likely a council motion).
            
             The index into this can be cast to `RegistrarIndex` to get a valid value.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IdentityStorage">
            <summary>
            IdentityStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.IdentityStorage._identityOfTypedStorage">
            <summary>
            _identityOfTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.IdentityStorage._superOfTypedStorage">
            <summary>
            _superOfTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.IdentityStorage._subsOfTypedStorage">
            <summary>
            _subsOfTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.IdentityStorage._registrarsTypedStorage">
            <summary>
            _registrarsTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IdentityStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            IdentityStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.IdentityStorage.IdentityOfTypedStorage">
            <summary>
            _identityOfTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.IdentityStorage.SuperOfTypedStorage">
            <summary>
            _superOfTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.IdentityStorage.SubsOfTypedStorage">
            <summary>
            _subsOfTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.IdentityStorage.RegistrarsTypedStorage">
            <summary>
            _registrarsTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IdentityStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IdentityStorage.OnUpdateIdentityOf(System.String,System.String)">
            <summary>
            Implements any storage change for Identity.IdentityOf
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IdentityStorage.GetIdentityOf(System.String)">
            <summary>
            >> IdentityOf
             Information that is pertinent to identify the entity behind an account.
            
             TWOX-NOTE: OK ��� `AccountId` is a secure hash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IdentityStorage.OnUpdateSuperOf(System.String,System.String)">
            <summary>
            Implements any storage change for Identity.SuperOf
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IdentityStorage.GetSuperOf(System.String)">
            <summary>
            >> SuperOf
             The super-identity of an alternative &quot;sub&quot; identity together with its name, within that
             context. If the account is not some other account&#39;s sub-identity, then just `None`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IdentityStorage.OnUpdateSubsOf(System.String,System.String)">
            <summary>
            Implements any storage change for Identity.SubsOf
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IdentityStorage.GetSubsOf(System.String)">
            <summary>
            >> SubsOf
             Alternative &quot;sub&quot; identities of this account.
            
             The first item is the deposit, the second is a vector of the accounts.
            
             TWOX-NOTE: OK ��� `AccountId` is a secure hash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IdentityStorage.OnUpdateRegistrars(System.String)">
            <summary>
            Implements any storage change for Identity.Registrars
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IdentityStorage.GetRegistrars">
            <summary>
            >> Registrars
             The set of registrars. Not expected to get very big as can only be added through a
             special origin (likely a council motion).
            
             The index into this can be cast to `RegistrarIndex` to get a valid value.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IImOnlineStorage">
            <summary>
            IImOnlineStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IImOnlineStorage.GetHeartbeatAfter">
            <summary>
            >> HeartbeatAfter
             The block number after which it&#39;s ok to send heartbeats in the current
             session.
            
             At the beginning of each session we set this to a value that should fall
             roughly in the middle of the session duration. The idea is to first wait for
             the validators to produce a block in the current session, so that the
             heartbeat later on will not be necessary.
            
             This value will only be used as a fallback if we fail to get a proper session
             progress estimate from `NextSessionRotation`, as those estimates should be
             more accurate then the value we calculate for `HeartbeatAfter`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IImOnlineStorage.GetKeys">
            <summary>
            >> Keys
             The current set of keys that may issue a heartbeat.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IImOnlineStorage.GetReceivedHeartbeats(System.String)">
            <summary>
            >> ReceivedHeartbeats
             For each session index, we keep a mapping of &#39;SessionIndex` and `AuthIndex` to
             `WrapperOpaque&lt;BoundedOpaqueNetworkState&gt;`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IImOnlineStorage.GetAuthoredBlocks(System.String)">
            <summary>
            >> AuthoredBlocks
             For each session index, we keep a mapping of `ValidatorId&lt;T&gt;` to the
             number of blocks authored by the given authority.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.ImOnlineStorage">
            <summary>
            ImOnlineStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ImOnlineStorage._heartbeatAfterTypedStorage">
            <summary>
            _heartbeatAfterTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ImOnlineStorage._keysTypedStorage">
            <summary>
            _keysTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ImOnlineStorage._receivedHeartbeatsTypedStorage">
            <summary>
            _receivedHeartbeatsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ImOnlineStorage._authoredBlocksTypedStorage">
            <summary>
            _authoredBlocksTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ImOnlineStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            ImOnlineStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ImOnlineStorage.HeartbeatAfterTypedStorage">
            <summary>
            _heartbeatAfterTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ImOnlineStorage.KeysTypedStorage">
            <summary>
            _keysTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ImOnlineStorage.ReceivedHeartbeatsTypedStorage">
            <summary>
            _receivedHeartbeatsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ImOnlineStorage.AuthoredBlocksTypedStorage">
            <summary>
            _authoredBlocksTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ImOnlineStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ImOnlineStorage.OnUpdateHeartbeatAfter(System.String)">
            <summary>
            Implements any storage change for ImOnline.HeartbeatAfter
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ImOnlineStorage.GetHeartbeatAfter">
            <summary>
            >> HeartbeatAfter
             The block number after which it&#39;s ok to send heartbeats in the current
             session.
            
             At the beginning of each session we set this to a value that should fall
             roughly in the middle of the session duration. The idea is to first wait for
             the validators to produce a block in the current session, so that the
             heartbeat later on will not be necessary.
            
             This value will only be used as a fallback if we fail to get a proper session
             progress estimate from `NextSessionRotation`, as those estimates should be
             more accurate then the value we calculate for `HeartbeatAfter`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ImOnlineStorage.OnUpdateKeys(System.String)">
            <summary>
            Implements any storage change for ImOnline.Keys
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ImOnlineStorage.GetKeys">
            <summary>
            >> Keys
             The current set of keys that may issue a heartbeat.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ImOnlineStorage.OnUpdateReceivedHeartbeats(System.String,System.String)">
            <summary>
            Implements any storage change for ImOnline.ReceivedHeartbeats
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ImOnlineStorage.GetReceivedHeartbeats(System.String)">
            <summary>
            >> ReceivedHeartbeats
             For each session index, we keep a mapping of &#39;SessionIndex` and `AuthIndex` to
             `WrapperOpaque&lt;BoundedOpaqueNetworkState&gt;`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ImOnlineStorage.OnUpdateAuthoredBlocks(System.String,System.String)">
            <summary>
            Implements any storage change for ImOnline.AuthoredBlocks
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ImOnlineStorage.GetAuthoredBlocks(System.String)">
            <summary>
            >> AuthoredBlocks
             For each session index, we keep a mapping of `ValidatorId&lt;T&gt;` to the
             number of blocks authored by the given authority.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IIndicesStorage">
            <summary>
            IIndicesStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IIndicesStorage.GetAccounts(System.String)">
            <summary>
            >> Accounts
             The lookup from index to account.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IndicesStorage">
            <summary>
            IndicesStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.IndicesStorage._accountsTypedStorage">
            <summary>
            _accountsTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IndicesStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            IndicesStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.IndicesStorage.AccountsTypedStorage">
            <summary>
            _accountsTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IndicesStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IndicesStorage.OnUpdateAccounts(System.String,System.String)">
            <summary>
            Implements any storage change for Indices.Accounts
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IndicesStorage.GetAccounts(System.String)">
            <summary>
            >> Accounts
             The lookup from index to account.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.ILotteryStorage">
            <summary>
            ILotteryStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ILotteryStorage.GetLotteryIndex">
            <summary>
            >> LotteryIndex
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ILotteryStorage.GetLottery">
            <summary>
            >> Lottery
             The configuration for the current lottery.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ILotteryStorage.GetParticipants(System.String)">
            <summary>
            >> Participants
             Users who have purchased a ticket. (Lottery Index, Tickets Purchased)
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ILotteryStorage.GetTicketsCount">
            <summary>
            >> TicketsCount
             Total number of tickets sold.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ILotteryStorage.GetTickets(System.String)">
            <summary>
            >> Tickets
             Each ticket&#39;s owner.
            
             May have residual storage from previous lotteries. Use `TicketsCount` to see which ones
             are actually valid ticket mappings.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ILotteryStorage.GetCallIndices">
            <summary>
            >> CallIndices
             The calls stored in this pallet to be used in an active lottery if configured
             by `Config::ValidateCall`.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.LotteryStorage">
            <summary>
            LotteryStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.LotteryStorage._lotteryIndexTypedStorage">
            <summary>
            _lotteryIndexTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.LotteryStorage._lotteryTypedStorage">
            <summary>
            _lotteryTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.LotteryStorage._participantsTypedStorage">
            <summary>
            _participantsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.LotteryStorage._ticketsCountTypedStorage">
            <summary>
            _ticketsCountTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.LotteryStorage._ticketsTypedStorage">
            <summary>
            _ticketsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.LotteryStorage._callIndicesTypedStorage">
            <summary>
            _callIndicesTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.LotteryStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            LotteryStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.LotteryStorage.LotteryIndexTypedStorage">
            <summary>
            _lotteryIndexTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.LotteryStorage.LotteryTypedStorage">
            <summary>
            _lotteryTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.LotteryStorage.ParticipantsTypedStorage">
            <summary>
            _participantsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.LotteryStorage.TicketsCountTypedStorage">
            <summary>
            _ticketsCountTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.LotteryStorage.TicketsTypedStorage">
            <summary>
            _ticketsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.LotteryStorage.CallIndicesTypedStorage">
            <summary>
            _callIndicesTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.LotteryStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.LotteryStorage.OnUpdateLotteryIndex(System.String)">
            <summary>
            Implements any storage change for Lottery.LotteryIndex
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.LotteryStorage.GetLotteryIndex">
            <summary>
            >> LotteryIndex
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.LotteryStorage.OnUpdateLottery(System.String)">
            <summary>
            Implements any storage change for Lottery.Lottery
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.LotteryStorage.GetLottery">
            <summary>
            >> Lottery
             The configuration for the current lottery.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.LotteryStorage.OnUpdateParticipants(System.String,System.String)">
            <summary>
            Implements any storage change for Lottery.Participants
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.LotteryStorage.GetParticipants(System.String)">
            <summary>
            >> Participants
             Users who have purchased a ticket. (Lottery Index, Tickets Purchased)
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.LotteryStorage.OnUpdateTicketsCount(System.String)">
            <summary>
            Implements any storage change for Lottery.TicketsCount
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.LotteryStorage.GetTicketsCount">
            <summary>
            >> TicketsCount
             Total number of tickets sold.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.LotteryStorage.OnUpdateTickets(System.String,System.String)">
            <summary>
            Implements any storage change for Lottery.Tickets
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.LotteryStorage.GetTickets(System.String)">
            <summary>
            >> Tickets
             Each ticket&#39;s owner.
            
             May have residual storage from previous lotteries. Use `TicketsCount` to see which ones
             are actually valid ticket mappings.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.LotteryStorage.OnUpdateCallIndices(System.String)">
            <summary>
            Implements any storage change for Lottery.CallIndices
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.LotteryStorage.GetCallIndices">
            <summary>
            >> CallIndices
             The calls stored in this pallet to be used in an active lottery if configured
             by `Config::ValidateCall`.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IMmrStorage">
            <summary>
            IMmrStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IMmrStorage.GetRootHash">
            <summary>
            >> RootHash
             Latest MMR Root hash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IMmrStorage.GetNumberOfLeaves">
            <summary>
            >> NumberOfLeaves
             Current size of the MMR (number of leaves).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IMmrStorage.GetNodes(System.String)">
            <summary>
            >> Nodes
             Hashes of the nodes in the MMR.
            
             Note this collection only contains MMR peaks, the inner nodes (and leaves)
             are pruned and only stored in the Offchain DB.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.MmrStorage">
            <summary>
            MmrStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.MmrStorage._rootHashTypedStorage">
            <summary>
            _rootHashTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.MmrStorage._numberOfLeavesTypedStorage">
            <summary>
            _numberOfLeavesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.MmrStorage._nodesTypedStorage">
            <summary>
            _nodesTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.MmrStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            MmrStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.MmrStorage.RootHashTypedStorage">
            <summary>
            _rootHashTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.MmrStorage.NumberOfLeavesTypedStorage">
            <summary>
            _numberOfLeavesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.MmrStorage.NodesTypedStorage">
            <summary>
            _nodesTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.MmrStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.MmrStorage.OnUpdateRootHash(System.String)">
            <summary>
            Implements any storage change for Mmr.RootHash
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.MmrStorage.GetRootHash">
            <summary>
            >> RootHash
             Latest MMR Root hash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.MmrStorage.OnUpdateNumberOfLeaves(System.String)">
            <summary>
            Implements any storage change for Mmr.NumberOfLeaves
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.MmrStorage.GetNumberOfLeaves">
            <summary>
            >> NumberOfLeaves
             Current size of the MMR (number of leaves).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.MmrStorage.OnUpdateNodes(System.String,System.String)">
            <summary>
            Implements any storage change for Mmr.Nodes
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.MmrStorage.GetNodes(System.String)">
            <summary>
            >> Nodes
             Hashes of the nodes in the MMR.
            
             Note this collection only contains MMR peaks, the inner nodes (and leaves)
             are pruned and only stored in the Offchain DB.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IMultisigStorage">
            <summary>
            IMultisigStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IMultisigStorage.GetMultisigs(System.String)">
            <summary>
            >> Multisigs
             The set of open multisig operations.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IMultisigStorage.GetCalls(System.String)">
            <summary>
            >> Calls
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.MultisigStorage">
            <summary>
            MultisigStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.MultisigStorage._multisigsTypedStorage">
            <summary>
            _multisigsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.MultisigStorage._callsTypedStorage">
            <summary>
            _callsTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.MultisigStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            MultisigStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.MultisigStorage.MultisigsTypedStorage">
            <summary>
            _multisigsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.MultisigStorage.CallsTypedStorage">
            <summary>
            _callsTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.MultisigStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.MultisigStorage.OnUpdateMultisigs(System.String,System.String)">
            <summary>
            Implements any storage change for Multisig.Multisigs
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.MultisigStorage.GetMultisigs(System.String)">
            <summary>
            >> Multisigs
             The set of open multisig operations.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.MultisigStorage.OnUpdateCalls(System.String,System.String)">
            <summary>
            Implements any storage change for Multisig.Calls
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.MultisigStorage.GetCalls(System.String)">
            <summary>
            >> Calls
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IOffencesStorage">
            <summary>
            IOffencesStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IOffencesStorage.GetReports(System.String)">
            <summary>
            >> Reports
             The primary structure that holds all offence records keyed by report identifiers.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IOffencesStorage.GetConcurrentReportsIndex(System.String)">
            <summary>
            >> ConcurrentReportsIndex
             A vector of reports of the same kind that happened at the same time slot.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IOffencesStorage.GetReportsByKindIndex(System.String)">
            <summary>
            >> ReportsByKindIndex
             Enumerates all reports of a kind along with the time they happened.
            
             All reports are sorted by the time of offence.
            
             Note that the actual type of this mapping is `Vec&lt;u8&gt;`, this is because values of
             different types are not supported at the moment so we are doing the manual serialization.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.OffencesStorage">
            <summary>
            OffencesStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.OffencesStorage._reportsTypedStorage">
            <summary>
            _reportsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.OffencesStorage._concurrentReportsIndexTypedStorage">
            <summary>
            _concurrentReportsIndexTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.OffencesStorage._reportsByKindIndexTypedStorage">
            <summary>
            _reportsByKindIndexTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.OffencesStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            OffencesStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.OffencesStorage.ReportsTypedStorage">
            <summary>
            _reportsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.OffencesStorage.ConcurrentReportsIndexTypedStorage">
            <summary>
            _concurrentReportsIndexTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.OffencesStorage.ReportsByKindIndexTypedStorage">
            <summary>
            _reportsByKindIndexTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.OffencesStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.OffencesStorage.OnUpdateReports(System.String,System.String)">
            <summary>
            Implements any storage change for Offences.Reports
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.OffencesStorage.GetReports(System.String)">
            <summary>
            >> Reports
             The primary structure that holds all offence records keyed by report identifiers.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.OffencesStorage.OnUpdateConcurrentReportsIndex(System.String,System.String)">
            <summary>
            Implements any storage change for Offences.ConcurrentReportsIndex
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.OffencesStorage.GetConcurrentReportsIndex(System.String)">
            <summary>
            >> ConcurrentReportsIndex
             A vector of reports of the same kind that happened at the same time slot.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.OffencesStorage.OnUpdateReportsByKindIndex(System.String,System.String)">
            <summary>
            Implements any storage change for Offences.ReportsByKindIndex
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.OffencesStorage.GetReportsByKindIndex(System.String)">
            <summary>
            >> ReportsByKindIndex
             Enumerates all reports of a kind along with the time they happened.
            
             All reports are sorted by the time of offence.
            
             Note that the actual type of this mapping is `Vec&lt;u8&gt;`, this is because values of
             different types are not supported at the moment so we are doing the manual serialization.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IProxyStorage">
            <summary>
            IProxyStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IProxyStorage.GetProxies(System.String)">
            <summary>
            >> Proxies
             The set of account proxies. Maps the account which has delegated to the accounts
             which are being delegated to, together with the amount held on deposit.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IProxyStorage.GetAnnouncements(System.String)">
            <summary>
            >> Announcements
             The announcements made by the proxy (key).
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.ProxyStorage">
            <summary>
            ProxyStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ProxyStorage._proxiesTypedStorage">
            <summary>
            _proxiesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.ProxyStorage._announcementsTypedStorage">
            <summary>
            _announcementsTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ProxyStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            ProxyStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ProxyStorage.ProxiesTypedStorage">
            <summary>
            _proxiesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.ProxyStorage.AnnouncementsTypedStorage">
            <summary>
            _announcementsTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ProxyStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ProxyStorage.OnUpdateProxies(System.String,System.String)">
            <summary>
            Implements any storage change for Proxy.Proxies
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ProxyStorage.GetProxies(System.String)">
            <summary>
            >> Proxies
             The set of account proxies. Maps the account which has delegated to the accounts
             which are being delegated to, together with the amount held on deposit.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ProxyStorage.OnUpdateAnnouncements(System.String,System.String)">
            <summary>
            Implements any storage change for Proxy.Announcements
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ProxyStorage.GetAnnouncements(System.String)">
            <summary>
            >> Announcements
             The announcements made by the proxy (key).
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IRandomnessCollectiveFlipStorage">
            <summary>
            IRandomnessCollectiveFlipStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IRandomnessCollectiveFlipStorage.GetRandomMaterial">
            <summary>
            >> RandomMaterial
             Series of block headers from the last 81 blocks that acts as random seed material. This
             is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of
             the oldest hash.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.RandomnessCollectiveFlipStorage">
            <summary>
            RandomnessCollectiveFlipStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.RandomnessCollectiveFlipStorage._randomMaterialTypedStorage">
            <summary>
            _randomMaterialTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.RandomnessCollectiveFlipStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            RandomnessCollectiveFlipStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.RandomnessCollectiveFlipStorage.RandomMaterialTypedStorage">
            <summary>
            _randomMaterialTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.RandomnessCollectiveFlipStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.RandomnessCollectiveFlipStorage.OnUpdateRandomMaterial(System.String)">
            <summary>
            Implements any storage change for RandomnessCollectiveFlip.RandomMaterial
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.RandomnessCollectiveFlipStorage.GetRandomMaterial">
            <summary>
            >> RandomMaterial
             Series of block headers from the last 81 blocks that acts as random seed material. This
             is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of
             the oldest hash.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IRecoveryStorage">
            <summary>
            IRecoveryStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IRecoveryStorage.GetRecoverable(System.String)">
            <summary>
            >> Recoverable
             The set of recoverable accounts and their recovery configuration.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IRecoveryStorage.GetActiveRecoveries(System.String)">
            <summary>
            >> ActiveRecoveries
             Active recovery attempts.
            
             First account is the account to be recovered, and the second account
             is the user trying to recover the account.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IRecoveryStorage.GetProxy(System.String)">
            <summary>
            >> Proxy
             The list of allowed proxy accounts.
            
             Map from the user who can access it to the recovered account.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.RecoveryStorage">
            <summary>
            RecoveryStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.RecoveryStorage._recoverableTypedStorage">
            <summary>
            _recoverableTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.RecoveryStorage._activeRecoveriesTypedStorage">
            <summary>
            _activeRecoveriesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.RecoveryStorage._proxyTypedStorage">
            <summary>
            _proxyTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.RecoveryStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            RecoveryStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.RecoveryStorage.RecoverableTypedStorage">
            <summary>
            _recoverableTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.RecoveryStorage.ActiveRecoveriesTypedStorage">
            <summary>
            _activeRecoveriesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.RecoveryStorage.ProxyTypedStorage">
            <summary>
            _proxyTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.RecoveryStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.RecoveryStorage.OnUpdateRecoverable(System.String,System.String)">
            <summary>
            Implements any storage change for Recovery.Recoverable
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.RecoveryStorage.GetRecoverable(System.String)">
            <summary>
            >> Recoverable
             The set of recoverable accounts and their recovery configuration.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.RecoveryStorage.OnUpdateActiveRecoveries(System.String,System.String)">
            <summary>
            Implements any storage change for Recovery.ActiveRecoveries
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.RecoveryStorage.GetActiveRecoveries(System.String)">
            <summary>
            >> ActiveRecoveries
             Active recovery attempts.
            
             First account is the account to be recovered, and the second account
             is the user trying to recover the account.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.RecoveryStorage.OnUpdateProxy(System.String,System.String)">
            <summary>
            Implements any storage change for Recovery.Proxy
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.RecoveryStorage.GetProxy(System.String)">
            <summary>
            >> Proxy
             The list of allowed proxy accounts.
            
             Map from the user who can access it to the recovered account.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.ISchedulerStorage">
            <summary>
            ISchedulerStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISchedulerStorage.GetAgenda(System.String)">
            <summary>
            >> Agenda
             Items to be executed, indexed by the block number that they should be executed on.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISchedulerStorage.GetLookup(System.String)">
            <summary>
            >> Lookup
             Lookup from identity to the block number and index of the task.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISchedulerStorage.GetStorageVersion">
            <summary>
            >> StorageVersion
             Storage version of the pallet.
            
             New networks start with last version.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.SchedulerStorage">
            <summary>
            SchedulerStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SchedulerStorage._agendaTypedStorage">
            <summary>
            _agendaTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SchedulerStorage._lookupTypedStorage">
            <summary>
            _lookupTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SchedulerStorage._storageVersionTypedStorage">
            <summary>
            _storageVersionTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SchedulerStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            SchedulerStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SchedulerStorage.AgendaTypedStorage">
            <summary>
            _agendaTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SchedulerStorage.LookupTypedStorage">
            <summary>
            _lookupTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SchedulerStorage.StorageVersionTypedStorage">
            <summary>
            _storageVersionTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SchedulerStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SchedulerStorage.OnUpdateAgenda(System.String,System.String)">
            <summary>
            Implements any storage change for Scheduler.Agenda
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SchedulerStorage.GetAgenda(System.String)">
            <summary>
            >> Agenda
             Items to be executed, indexed by the block number that they should be executed on.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SchedulerStorage.OnUpdateLookup(System.String,System.String)">
            <summary>
            Implements any storage change for Scheduler.Lookup
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SchedulerStorage.GetLookup(System.String)">
            <summary>
            >> Lookup
             Lookup from identity to the block number and index of the task.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SchedulerStorage.OnUpdateStorageVersion(System.String)">
            <summary>
            Implements any storage change for Scheduler.StorageVersion
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SchedulerStorage.GetStorageVersion">
            <summary>
            >> StorageVersion
             Storage version of the pallet.
            
             New networks start with last version.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.ISessionStorage">
            <summary>
            ISessionStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISessionStorage.GetValidators">
            <summary>
            >> Validators
             The current set of validators.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISessionStorage.GetCurrentIndex">
            <summary>
            >> CurrentIndex
             Current index of the session.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISessionStorage.GetQueuedChanged">
            <summary>
            >> QueuedChanged
             True if the underlying economic identities or weighting behind the validators
             has changed in the queued validator set.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISessionStorage.GetQueuedKeys">
            <summary>
            >> QueuedKeys
             The queued keys for the next session. When the next session begins, these keys
             will be used to determine the validator&#39;s session keys.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISessionStorage.GetDisabledValidators">
            <summary>
            >> DisabledValidators
             Indices of disabled validators.
            
             The set is cleared when `on_session_ending` returns a new set of identities.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISessionStorage.GetNextKeys(System.String)">
            <summary>
            >> NextKeys
             The next session keys for a validator.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISessionStorage.GetKeyOwner(System.String)">
            <summary>
            >> KeyOwner
             The owner of a key. The key is the `KeyTypeId` + the encoded key.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.SessionStorage">
            <summary>
            SessionStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SessionStorage._validatorsTypedStorage">
            <summary>
            _validatorsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SessionStorage._currentIndexTypedStorage">
            <summary>
            _currentIndexTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SessionStorage._queuedChangedTypedStorage">
            <summary>
            _queuedChangedTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SessionStorage._queuedKeysTypedStorage">
            <summary>
            _queuedKeysTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SessionStorage._disabledValidatorsTypedStorage">
            <summary>
            _disabledValidatorsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SessionStorage._nextKeysTypedStorage">
            <summary>
            _nextKeysTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SessionStorage._keyOwnerTypedStorage">
            <summary>
            _keyOwnerTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SessionStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            SessionStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SessionStorage.ValidatorsTypedStorage">
            <summary>
            _validatorsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SessionStorage.CurrentIndexTypedStorage">
            <summary>
            _currentIndexTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SessionStorage.QueuedChangedTypedStorage">
            <summary>
            _queuedChangedTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SessionStorage.QueuedKeysTypedStorage">
            <summary>
            _queuedKeysTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SessionStorage.DisabledValidatorsTypedStorage">
            <summary>
            _disabledValidatorsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SessionStorage.NextKeysTypedStorage">
            <summary>
            _nextKeysTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SessionStorage.KeyOwnerTypedStorage">
            <summary>
            _keyOwnerTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SessionStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SessionStorage.OnUpdateValidators(System.String)">
            <summary>
            Implements any storage change for Session.Validators
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SessionStorage.GetValidators">
            <summary>
            >> Validators
             The current set of validators.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SessionStorage.OnUpdateCurrentIndex(System.String)">
            <summary>
            Implements any storage change for Session.CurrentIndex
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SessionStorage.GetCurrentIndex">
            <summary>
            >> CurrentIndex
             Current index of the session.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SessionStorage.OnUpdateQueuedChanged(System.String)">
            <summary>
            Implements any storage change for Session.QueuedChanged
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SessionStorage.GetQueuedChanged">
            <summary>
            >> QueuedChanged
             True if the underlying economic identities or weighting behind the validators
             has changed in the queued validator set.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SessionStorage.OnUpdateQueuedKeys(System.String)">
            <summary>
            Implements any storage change for Session.QueuedKeys
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SessionStorage.GetQueuedKeys">
            <summary>
            >> QueuedKeys
             The queued keys for the next session. When the next session begins, these keys
             will be used to determine the validator&#39;s session keys.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SessionStorage.OnUpdateDisabledValidators(System.String)">
            <summary>
            Implements any storage change for Session.DisabledValidators
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SessionStorage.GetDisabledValidators">
            <summary>
            >> DisabledValidators
             Indices of disabled validators.
            
             The set is cleared when `on_session_ending` returns a new set of identities.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SessionStorage.OnUpdateNextKeys(System.String,System.String)">
            <summary>
            Implements any storage change for Session.NextKeys
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SessionStorage.GetNextKeys(System.String)">
            <summary>
            >> NextKeys
             The next session keys for a validator.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SessionStorage.OnUpdateKeyOwner(System.String,System.String)">
            <summary>
            Implements any storage change for Session.KeyOwner
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SessionStorage.GetKeyOwner(System.String)">
            <summary>
            >> KeyOwner
             The owner of a key. The key is the `KeyTypeId` + the encoded key.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.ISocietyStorage">
            <summary>
            ISocietyStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISocietyStorage.GetFounder">
            <summary>
            >> Founder
             The first member.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISocietyStorage.GetRules">
            <summary>
            >> Rules
             A hash of the rules of this society concerning membership. Can only be set once and
             only by the founder.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISocietyStorage.GetCandidates">
            <summary>
            >> Candidates
             The current set of candidates; bidders that are attempting to become members.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISocietyStorage.GetSuspendedCandidates(System.String)">
            <summary>
            >> SuspendedCandidates
             The set of suspended candidates.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISocietyStorage.GetPot">
            <summary>
            >> Pot
             Amount of our account balance that is specifically for the next round&#39;s bid(s).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISocietyStorage.GetHead">
            <summary>
            >> Head
             The most primary from the most recently approved members.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISocietyStorage.GetMembers">
            <summary>
            >> Members
             The current set of members, ordered.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISocietyStorage.GetSuspendedMembers(System.String)">
            <summary>
            >> SuspendedMembers
             The set of suspended members.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISocietyStorage.GetBids">
            <summary>
            >> Bids
             The current bids, stored ordered by the value of the bid.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISocietyStorage.GetVouching(System.String)">
            <summary>
            >> Vouching
             Members currently vouching or banned from vouching again
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISocietyStorage.GetPayouts(System.String)">
            <summary>
            >> Payouts
             Pending payouts; ordered by block number, with the amount that should be paid out.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISocietyStorage.GetStrikes(System.String)">
            <summary>
            >> Strikes
             The ongoing number of losing votes cast by the member.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISocietyStorage.GetVotes(System.String)">
            <summary>
            >> Votes
             Double map from Candidate -&gt; Voter -&gt; (Maybe) Vote.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISocietyStorage.GetDefender">
            <summary>
            >> Defender
             The defending member currently being challenged.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISocietyStorage.GetDefenderVotes(System.String)">
            <summary>
            >> DefenderVotes
             Votes for the defender.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISocietyStorage.GetMaxMembers">
            <summary>
            >> MaxMembers
             The max number of members for the society at one time.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.SocietyStorage">
            <summary>
            SocietyStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SocietyStorage._founderTypedStorage">
            <summary>
            _founderTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SocietyStorage._rulesTypedStorage">
            <summary>
            _rulesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SocietyStorage._candidatesTypedStorage">
            <summary>
            _candidatesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SocietyStorage._suspendedCandidatesTypedStorage">
            <summary>
            _suspendedCandidatesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SocietyStorage._potTypedStorage">
            <summary>
            _potTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SocietyStorage._headTypedStorage">
            <summary>
            _headTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SocietyStorage._membersTypedStorage">
            <summary>
            _membersTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SocietyStorage._suspendedMembersTypedStorage">
            <summary>
            _suspendedMembersTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SocietyStorage._bidsTypedStorage">
            <summary>
            _bidsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SocietyStorage._vouchingTypedStorage">
            <summary>
            _vouchingTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SocietyStorage._payoutsTypedStorage">
            <summary>
            _payoutsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SocietyStorage._strikesTypedStorage">
            <summary>
            _strikesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SocietyStorage._votesTypedStorage">
            <summary>
            _votesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SocietyStorage._defenderTypedStorage">
            <summary>
            _defenderTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SocietyStorage._defenderVotesTypedStorage">
            <summary>
            _defenderVotesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SocietyStorage._maxMembersTypedStorage">
            <summary>
            _maxMembersTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            SocietyStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SocietyStorage.FounderTypedStorage">
            <summary>
            _founderTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SocietyStorage.RulesTypedStorage">
            <summary>
            _rulesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SocietyStorage.CandidatesTypedStorage">
            <summary>
            _candidatesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SocietyStorage.SuspendedCandidatesTypedStorage">
            <summary>
            _suspendedCandidatesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SocietyStorage.PotTypedStorage">
            <summary>
            _potTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SocietyStorage.HeadTypedStorage">
            <summary>
            _headTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SocietyStorage.MembersTypedStorage">
            <summary>
            _membersTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SocietyStorage.SuspendedMembersTypedStorage">
            <summary>
            _suspendedMembersTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SocietyStorage.BidsTypedStorage">
            <summary>
            _bidsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SocietyStorage.VouchingTypedStorage">
            <summary>
            _vouchingTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SocietyStorage.PayoutsTypedStorage">
            <summary>
            _payoutsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SocietyStorage.StrikesTypedStorage">
            <summary>
            _strikesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SocietyStorage.VotesTypedStorage">
            <summary>
            _votesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SocietyStorage.DefenderTypedStorage">
            <summary>
            _defenderTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SocietyStorage.DefenderVotesTypedStorage">
            <summary>
            _defenderVotesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SocietyStorage.MaxMembersTypedStorage">
            <summary>
            _maxMembersTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.OnUpdateFounder(System.String)">
            <summary>
            Implements any storage change for Society.Founder
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.GetFounder">
            <summary>
            >> Founder
             The first member.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.OnUpdateRules(System.String)">
            <summary>
            Implements any storage change for Society.Rules
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.GetRules">
            <summary>
            >> Rules
             A hash of the rules of this society concerning membership. Can only be set once and
             only by the founder.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.OnUpdateCandidates(System.String)">
            <summary>
            Implements any storage change for Society.Candidates
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.GetCandidates">
            <summary>
            >> Candidates
             The current set of candidates; bidders that are attempting to become members.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.OnUpdateSuspendedCandidates(System.String,System.String)">
            <summary>
            Implements any storage change for Society.SuspendedCandidates
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.GetSuspendedCandidates(System.String)">
            <summary>
            >> SuspendedCandidates
             The set of suspended candidates.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.OnUpdatePot(System.String)">
            <summary>
            Implements any storage change for Society.Pot
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.GetPot">
            <summary>
            >> Pot
             Amount of our account balance that is specifically for the next round&#39;s bid(s).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.OnUpdateHead(System.String)">
            <summary>
            Implements any storage change for Society.Head
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.GetHead">
            <summary>
            >> Head
             The most primary from the most recently approved members.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.OnUpdateMembers(System.String)">
            <summary>
            Implements any storage change for Society.Members
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.GetMembers">
            <summary>
            >> Members
             The current set of members, ordered.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.OnUpdateSuspendedMembers(System.String,System.String)">
            <summary>
            Implements any storage change for Society.SuspendedMembers
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.GetSuspendedMembers(System.String)">
            <summary>
            >> SuspendedMembers
             The set of suspended members.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.OnUpdateBids(System.String)">
            <summary>
            Implements any storage change for Society.Bids
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.GetBids">
            <summary>
            >> Bids
             The current bids, stored ordered by the value of the bid.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.OnUpdateVouching(System.String,System.String)">
            <summary>
            Implements any storage change for Society.Vouching
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.GetVouching(System.String)">
            <summary>
            >> Vouching
             Members currently vouching or banned from vouching again
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.OnUpdatePayouts(System.String,System.String)">
            <summary>
            Implements any storage change for Society.Payouts
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.GetPayouts(System.String)">
            <summary>
            >> Payouts
             Pending payouts; ordered by block number, with the amount that should be paid out.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.OnUpdateStrikes(System.String,System.String)">
            <summary>
            Implements any storage change for Society.Strikes
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.GetStrikes(System.String)">
            <summary>
            >> Strikes
             The ongoing number of losing votes cast by the member.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.OnUpdateVotes(System.String,System.String)">
            <summary>
            Implements any storage change for Society.Votes
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.GetVotes(System.String)">
            <summary>
            >> Votes
             Double map from Candidate -&gt; Voter -&gt; (Maybe) Vote.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.OnUpdateDefender(System.String)">
            <summary>
            Implements any storage change for Society.Defender
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.GetDefender">
            <summary>
            >> Defender
             The defending member currently being challenged.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.OnUpdateDefenderVotes(System.String,System.String)">
            <summary>
            Implements any storage change for Society.DefenderVotes
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.GetDefenderVotes(System.String)">
            <summary>
            >> DefenderVotes
             Votes for the defender.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.OnUpdateMaxMembers(System.String)">
            <summary>
            Implements any storage change for Society.MaxMembers
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SocietyStorage.GetMaxMembers">
            <summary>
            >> MaxMembers
             The max number of members for the society at one time.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IStakingStorage">
            <summary>
            IStakingStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetHistoryDepth">
            <summary>
            >> HistoryDepth
             Number of eras to keep in history.
            
             Information is kept for eras in `[current_era - history_depth; current_era]`.
            
             Must be more than the number of eras delayed by session otherwise. I.e. active era must
             always be in history. I.e. `active_era &gt; current_era - history_depth` must be
             guaranteed.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetValidatorCount">
            <summary>
            >> ValidatorCount
             The ideal number of staking participants.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetMinimumValidatorCount">
            <summary>
            >> MinimumValidatorCount
             Minimum number of staking participants before emergency conditions are imposed.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetInvulnerables">
            <summary>
            >> Invulnerables
             Any validators that may never be slashed or forcibly kicked. It&#39;s a Vec since they&#39;re
             easy to initialize and the performance hit is minimal (we expect no more than four
             invulnerables) and restricted to testnets.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetBonded(System.String)">
            <summary>
            >> Bonded
             Map from all locked &quot;stash&quot; accounts to the controller account.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetMinNominatorBond">
            <summary>
            >> MinNominatorBond
             The minimum active bond to become and maintain the role of a nominator.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetMinValidatorBond">
            <summary>
            >> MinValidatorBond
             The minimum active bond to become and maintain the role of a validator.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetLedger(System.String)">
            <summary>
            >> Ledger
             Map from all (unlocked) &quot;controller&quot; accounts to the info regarding the staking.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetPayee(System.String)">
            <summary>
            >> Payee
             Where the reward payment should be made. Keyed by stash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetValidators(System.String)">
            <summary>
            >> Validators
             The map from (wannabe) validator stash key to the preferences of that validator.
            
             When updating this storage item, you must also update the `CounterForValidators`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetCounterForValidators">
            <summary>
            >> CounterForValidators
             A tracker to keep count of the number of items in the `Validators` map.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetMaxValidatorsCount">
            <summary>
            >> MaxValidatorsCount
             The maximum validator count before we stop allowing new validators to join.
            
             When this value is not set, no limits are enforced.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetNominators(System.String)">
            <summary>
            >> Nominators
             The map from nominator stash key to the set of stash keys of all validators to nominate.
            
             When updating this storage item, you must also update the `CounterForNominators`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetCounterForNominators">
            <summary>
            >> CounterForNominators
             A tracker to keep count of the number of items in the `Nominators` map.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetMaxNominatorsCount">
            <summary>
            >> MaxNominatorsCount
             The maximum nominator count before we stop allowing new validators to join.
            
             When this value is not set, no limits are enforced.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetCurrentEra">
            <summary>
            >> CurrentEra
             The current era index.
            
             This is the latest planned era, depending on how the Session pallet queues the validator
             set, it might be active or not.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetActiveEra">
            <summary>
            >> ActiveEra
             The active era information, it holds index and start.
            
             The active era is the era being currently rewarded. Validator set of this era must be
             equal to [`SessionInterface::validators`].
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetErasStartSessionIndex(System.String)">
            <summary>
            >> ErasStartSessionIndex
             The session index at which the era start for the last `HISTORY_DEPTH` eras.
            
             Note: This tracks the starting session (i.e. session index when era start being active)
             for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetErasStakers(System.String)">
            <summary>
            >> ErasStakers
             Exposure of validator at era.
            
             This is keyed first by the era index to allow bulk deletion and then the stash account.
            
             Is it removed after `HISTORY_DEPTH` eras.
             If stakers hasn&#39;t been set or has been removed then empty exposure is returned.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetErasStakersClipped(System.String)">
            <summary>
            >> ErasStakersClipped
             Clipped Exposure of validator at era.
            
             This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the
             `T::MaxNominatorRewardedPerValidator` biggest stakers.
             (Note: the field `total` and `own` of the exposure remains unchanged).
             This is used to limit the i/o cost for the nominator payout.
            
             This is keyed fist by the era index to allow bulk deletion and then the stash account.
            
             Is it removed after `HISTORY_DEPTH` eras.
             If stakers hasn&#39;t been set or has been removed then empty exposure is returned.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetErasValidatorPrefs(System.String)">
            <summary>
            >> ErasValidatorPrefs
             Similar to `ErasStakers`, this holds the preferences of validators.
            
             This is keyed first by the era index to allow bulk deletion and then the stash account.
            
             Is it removed after `HISTORY_DEPTH` eras.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetErasValidatorReward(System.String)">
            <summary>
            >> ErasValidatorReward
             The total validator era payout for the last `HISTORY_DEPTH` eras.
            
             Eras that haven&#39;t finished yet or has been removed doesn&#39;t have reward.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetErasRewardPoints(System.String)">
            <summary>
            >> ErasRewardPoints
             Rewards for the last `HISTORY_DEPTH` eras.
             If reward hasn&#39;t been set or has been removed then 0 reward is returned.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetErasTotalStake(System.String)">
            <summary>
            >> ErasTotalStake
             The total amount staked for the last `HISTORY_DEPTH` eras.
             If total hasn&#39;t been set or has been removed then 0 stake is returned.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetForceEra">
            <summary>
            >> ForceEra
             Mode of era forcing.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetSlashRewardFraction">
            <summary>
            >> SlashRewardFraction
             The percentage of the slash that is distributed to reporters.
            
             The rest of the slashed value is handled by the `Slash`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetCanceledSlashPayout">
            <summary>
            >> CanceledSlashPayout
             The amount of currency given to reporters of a slash event which was
             canceled by extraordinary circumstances (e.g. governance).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetUnappliedSlashes(System.String)">
            <summary>
            >> UnappliedSlashes
             All unapplied slashes that are queued for later.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetBondedEras">
            <summary>
            >> BondedEras
             A mapping from still-bonded eras to the first session index of that era.
            
             Must contains information for eras for the range:
             `[active_era - bounding_duration; active_era]`
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetValidatorSlashInEra(System.String)">
            <summary>
            >> ValidatorSlashInEra
             All slashing events on validators, mapped by era to the highest slash proportion
             and slash value of the era.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetNominatorSlashInEra(System.String)">
            <summary>
            >> NominatorSlashInEra
             All slashing events on nominators, mapped by era to the highest slash value of the era.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetSlashingSpans(System.String)">
            <summary>
            >> SlashingSpans
             Slashing spans for stash accounts.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetSpanSlash(System.String)">
            <summary>
            >> SpanSlash
             Records information about the maximum slash of a stash within a slashing span,
             as well as how much reward has been paid out.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetEarliestUnappliedSlash">
            <summary>
            >> EarliestUnappliedSlash
             The earliest era for which we have a pending, unapplied slash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetCurrentPlannedSession">
            <summary>
            >> CurrentPlannedSession
             The last planned session scheduled by the session pallet.
            
             This is basically in sync with the call to [`pallet_session::SessionManager::new_session`].
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetStorageVersion">
            <summary>
            >> StorageVersion
             True if network has been upgraded to this version.
             Storage version of the pallet.
            
             This is set to v7.0.0 for new networks.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IStakingStorage.GetChillThreshold">
            <summary>
            >> ChillThreshold
             The threshold for when users can start calling `chill_other` for other validators /
             nominators. The threshold is compared to the actual number of validators / nominators
             (`CountFor*`) in the system compared to the configured max (`Max*Count`).
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.StakingStorage">
            <summary>
            StakingStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._historyDepthTypedStorage">
            <summary>
            _historyDepthTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._validatorCountTypedStorage">
            <summary>
            _validatorCountTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._minimumValidatorCountTypedStorage">
            <summary>
            _minimumValidatorCountTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._invulnerablesTypedStorage">
            <summary>
            _invulnerablesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._bondedTypedStorage">
            <summary>
            _bondedTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._minNominatorBondTypedStorage">
            <summary>
            _minNominatorBondTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._minValidatorBondTypedStorage">
            <summary>
            _minValidatorBondTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._ledgerTypedStorage">
            <summary>
            _ledgerTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._payeeTypedStorage">
            <summary>
            _payeeTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._validatorsTypedStorage">
            <summary>
            _validatorsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._counterForValidatorsTypedStorage">
            <summary>
            _counterForValidatorsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._maxValidatorsCountTypedStorage">
            <summary>
            _maxValidatorsCountTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._nominatorsTypedStorage">
            <summary>
            _nominatorsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._counterForNominatorsTypedStorage">
            <summary>
            _counterForNominatorsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._maxNominatorsCountTypedStorage">
            <summary>
            _maxNominatorsCountTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._currentEraTypedStorage">
            <summary>
            _currentEraTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._activeEraTypedStorage">
            <summary>
            _activeEraTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._erasStartSessionIndexTypedStorage">
            <summary>
            _erasStartSessionIndexTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._erasStakersTypedStorage">
            <summary>
            _erasStakersTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._erasStakersClippedTypedStorage">
            <summary>
            _erasStakersClippedTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._erasValidatorPrefsTypedStorage">
            <summary>
            _erasValidatorPrefsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._erasValidatorRewardTypedStorage">
            <summary>
            _erasValidatorRewardTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._erasRewardPointsTypedStorage">
            <summary>
            _erasRewardPointsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._erasTotalStakeTypedStorage">
            <summary>
            _erasTotalStakeTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._forceEraTypedStorage">
            <summary>
            _forceEraTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._slashRewardFractionTypedStorage">
            <summary>
            _slashRewardFractionTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._canceledSlashPayoutTypedStorage">
            <summary>
            _canceledSlashPayoutTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._unappliedSlashesTypedStorage">
            <summary>
            _unappliedSlashesTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._bondedErasTypedStorage">
            <summary>
            _bondedErasTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._validatorSlashInEraTypedStorage">
            <summary>
            _validatorSlashInEraTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._nominatorSlashInEraTypedStorage">
            <summary>
            _nominatorSlashInEraTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._slashingSpansTypedStorage">
            <summary>
            _slashingSpansTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._spanSlashTypedStorage">
            <summary>
            _spanSlashTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._earliestUnappliedSlashTypedStorage">
            <summary>
            _earliestUnappliedSlashTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._currentPlannedSessionTypedStorage">
            <summary>
            _currentPlannedSessionTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._storageVersionTypedStorage">
            <summary>
            _storageVersionTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.StakingStorage._chillThresholdTypedStorage">
            <summary>
            _chillThresholdTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            StakingStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.HistoryDepthTypedStorage">
            <summary>
            _historyDepthTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.ValidatorCountTypedStorage">
            <summary>
            _validatorCountTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.MinimumValidatorCountTypedStorage">
            <summary>
            _minimumValidatorCountTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.InvulnerablesTypedStorage">
            <summary>
            _invulnerablesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.BondedTypedStorage">
            <summary>
            _bondedTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.MinNominatorBondTypedStorage">
            <summary>
            _minNominatorBondTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.MinValidatorBondTypedStorage">
            <summary>
            _minValidatorBondTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.LedgerTypedStorage">
            <summary>
            _ledgerTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.PayeeTypedStorage">
            <summary>
            _payeeTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.ValidatorsTypedStorage">
            <summary>
            _validatorsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.CounterForValidatorsTypedStorage">
            <summary>
            _counterForValidatorsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.MaxValidatorsCountTypedStorage">
            <summary>
            _maxValidatorsCountTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.NominatorsTypedStorage">
            <summary>
            _nominatorsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.CounterForNominatorsTypedStorage">
            <summary>
            _counterForNominatorsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.MaxNominatorsCountTypedStorage">
            <summary>
            _maxNominatorsCountTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.CurrentEraTypedStorage">
            <summary>
            _currentEraTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.ActiveEraTypedStorage">
            <summary>
            _activeEraTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.ErasStartSessionIndexTypedStorage">
            <summary>
            _erasStartSessionIndexTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.ErasStakersTypedStorage">
            <summary>
            _erasStakersTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.ErasStakersClippedTypedStorage">
            <summary>
            _erasStakersClippedTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.ErasValidatorPrefsTypedStorage">
            <summary>
            _erasValidatorPrefsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.ErasValidatorRewardTypedStorage">
            <summary>
            _erasValidatorRewardTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.ErasRewardPointsTypedStorage">
            <summary>
            _erasRewardPointsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.ErasTotalStakeTypedStorage">
            <summary>
            _erasTotalStakeTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.ForceEraTypedStorage">
            <summary>
            _forceEraTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.SlashRewardFractionTypedStorage">
            <summary>
            _slashRewardFractionTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.CanceledSlashPayoutTypedStorage">
            <summary>
            _canceledSlashPayoutTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.UnappliedSlashesTypedStorage">
            <summary>
            _unappliedSlashesTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.BondedErasTypedStorage">
            <summary>
            _bondedErasTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.ValidatorSlashInEraTypedStorage">
            <summary>
            _validatorSlashInEraTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.NominatorSlashInEraTypedStorage">
            <summary>
            _nominatorSlashInEraTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.SlashingSpansTypedStorage">
            <summary>
            _slashingSpansTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.SpanSlashTypedStorage">
            <summary>
            _spanSlashTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.EarliestUnappliedSlashTypedStorage">
            <summary>
            _earliestUnappliedSlashTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.CurrentPlannedSessionTypedStorage">
            <summary>
            _currentPlannedSessionTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.StorageVersionTypedStorage">
            <summary>
            _storageVersionTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.StakingStorage.ChillThresholdTypedStorage">
            <summary>
            _chillThresholdTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateHistoryDepth(System.String)">
            <summary>
            Implements any storage change for Staking.HistoryDepth
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetHistoryDepth">
            <summary>
            >> HistoryDepth
             Number of eras to keep in history.
            
             Information is kept for eras in `[current_era - history_depth; current_era]`.
            
             Must be more than the number of eras delayed by session otherwise. I.e. active era must
             always be in history. I.e. `active_era &gt; current_era - history_depth` must be
             guaranteed.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateValidatorCount(System.String)">
            <summary>
            Implements any storage change for Staking.ValidatorCount
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetValidatorCount">
            <summary>
            >> ValidatorCount
             The ideal number of staking participants.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateMinimumValidatorCount(System.String)">
            <summary>
            Implements any storage change for Staking.MinimumValidatorCount
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetMinimumValidatorCount">
            <summary>
            >> MinimumValidatorCount
             Minimum number of staking participants before emergency conditions are imposed.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateInvulnerables(System.String)">
            <summary>
            Implements any storage change for Staking.Invulnerables
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetInvulnerables">
            <summary>
            >> Invulnerables
             Any validators that may never be slashed or forcibly kicked. It&#39;s a Vec since they&#39;re
             easy to initialize and the performance hit is minimal (we expect no more than four
             invulnerables) and restricted to testnets.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateBonded(System.String,System.String)">
            <summary>
            Implements any storage change for Staking.Bonded
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetBonded(System.String)">
            <summary>
            >> Bonded
             Map from all locked &quot;stash&quot; accounts to the controller account.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateMinNominatorBond(System.String)">
            <summary>
            Implements any storage change for Staking.MinNominatorBond
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetMinNominatorBond">
            <summary>
            >> MinNominatorBond
             The minimum active bond to become and maintain the role of a nominator.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateMinValidatorBond(System.String)">
            <summary>
            Implements any storage change for Staking.MinValidatorBond
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetMinValidatorBond">
            <summary>
            >> MinValidatorBond
             The minimum active bond to become and maintain the role of a validator.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateLedger(System.String,System.String)">
            <summary>
            Implements any storage change for Staking.Ledger
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetLedger(System.String)">
            <summary>
            >> Ledger
             Map from all (unlocked) &quot;controller&quot; accounts to the info regarding the staking.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdatePayee(System.String,System.String)">
            <summary>
            Implements any storage change for Staking.Payee
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetPayee(System.String)">
            <summary>
            >> Payee
             Where the reward payment should be made. Keyed by stash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateValidators(System.String,System.String)">
            <summary>
            Implements any storage change for Staking.Validators
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetValidators(System.String)">
            <summary>
            >> Validators
             The map from (wannabe) validator stash key to the preferences of that validator.
            
             When updating this storage item, you must also update the `CounterForValidators`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateCounterForValidators(System.String)">
            <summary>
            Implements any storage change for Staking.CounterForValidators
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetCounterForValidators">
            <summary>
            >> CounterForValidators
             A tracker to keep count of the number of items in the `Validators` map.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateMaxValidatorsCount(System.String)">
            <summary>
            Implements any storage change for Staking.MaxValidatorsCount
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetMaxValidatorsCount">
            <summary>
            >> MaxValidatorsCount
             The maximum validator count before we stop allowing new validators to join.
            
             When this value is not set, no limits are enforced.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateNominators(System.String,System.String)">
            <summary>
            Implements any storage change for Staking.Nominators
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetNominators(System.String)">
            <summary>
            >> Nominators
             The map from nominator stash key to the set of stash keys of all validators to nominate.
            
             When updating this storage item, you must also update the `CounterForNominators`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateCounterForNominators(System.String)">
            <summary>
            Implements any storage change for Staking.CounterForNominators
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetCounterForNominators">
            <summary>
            >> CounterForNominators
             A tracker to keep count of the number of items in the `Nominators` map.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateMaxNominatorsCount(System.String)">
            <summary>
            Implements any storage change for Staking.MaxNominatorsCount
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetMaxNominatorsCount">
            <summary>
            >> MaxNominatorsCount
             The maximum nominator count before we stop allowing new validators to join.
            
             When this value is not set, no limits are enforced.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateCurrentEra(System.String)">
            <summary>
            Implements any storage change for Staking.CurrentEra
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetCurrentEra">
            <summary>
            >> CurrentEra
             The current era index.
            
             This is the latest planned era, depending on how the Session pallet queues the validator
             set, it might be active or not.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateActiveEra(System.String)">
            <summary>
            Implements any storage change for Staking.ActiveEra
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetActiveEra">
            <summary>
            >> ActiveEra
             The active era information, it holds index and start.
            
             The active era is the era being currently rewarded. Validator set of this era must be
             equal to [`SessionInterface::validators`].
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateErasStartSessionIndex(System.String,System.String)">
            <summary>
            Implements any storage change for Staking.ErasStartSessionIndex
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetErasStartSessionIndex(System.String)">
            <summary>
            >> ErasStartSessionIndex
             The session index at which the era start for the last `HISTORY_DEPTH` eras.
            
             Note: This tracks the starting session (i.e. session index when era start being active)
             for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateErasStakers(System.String,System.String)">
            <summary>
            Implements any storage change for Staking.ErasStakers
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetErasStakers(System.String)">
            <summary>
            >> ErasStakers
             Exposure of validator at era.
            
             This is keyed first by the era index to allow bulk deletion and then the stash account.
            
             Is it removed after `HISTORY_DEPTH` eras.
             If stakers hasn&#39;t been set or has been removed then empty exposure is returned.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateErasStakersClipped(System.String,System.String)">
            <summary>
            Implements any storage change for Staking.ErasStakersClipped
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetErasStakersClipped(System.String)">
            <summary>
            >> ErasStakersClipped
             Clipped Exposure of validator at era.
            
             This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the
             `T::MaxNominatorRewardedPerValidator` biggest stakers.
             (Note: the field `total` and `own` of the exposure remains unchanged).
             This is used to limit the i/o cost for the nominator payout.
            
             This is keyed fist by the era index to allow bulk deletion and then the stash account.
            
             Is it removed after `HISTORY_DEPTH` eras.
             If stakers hasn&#39;t been set or has been removed then empty exposure is returned.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateErasValidatorPrefs(System.String,System.String)">
            <summary>
            Implements any storage change for Staking.ErasValidatorPrefs
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetErasValidatorPrefs(System.String)">
            <summary>
            >> ErasValidatorPrefs
             Similar to `ErasStakers`, this holds the preferences of validators.
            
             This is keyed first by the era index to allow bulk deletion and then the stash account.
            
             Is it removed after `HISTORY_DEPTH` eras.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateErasValidatorReward(System.String,System.String)">
            <summary>
            Implements any storage change for Staking.ErasValidatorReward
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetErasValidatorReward(System.String)">
            <summary>
            >> ErasValidatorReward
             The total validator era payout for the last `HISTORY_DEPTH` eras.
            
             Eras that haven&#39;t finished yet or has been removed doesn&#39;t have reward.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateErasRewardPoints(System.String,System.String)">
            <summary>
            Implements any storage change for Staking.ErasRewardPoints
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetErasRewardPoints(System.String)">
            <summary>
            >> ErasRewardPoints
             Rewards for the last `HISTORY_DEPTH` eras.
             If reward hasn&#39;t been set or has been removed then 0 reward is returned.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateErasTotalStake(System.String,System.String)">
            <summary>
            Implements any storage change for Staking.ErasTotalStake
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetErasTotalStake(System.String)">
            <summary>
            >> ErasTotalStake
             The total amount staked for the last `HISTORY_DEPTH` eras.
             If total hasn&#39;t been set or has been removed then 0 stake is returned.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateForceEra(System.String)">
            <summary>
            Implements any storage change for Staking.ForceEra
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetForceEra">
            <summary>
            >> ForceEra
             Mode of era forcing.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateSlashRewardFraction(System.String)">
            <summary>
            Implements any storage change for Staking.SlashRewardFraction
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetSlashRewardFraction">
            <summary>
            >> SlashRewardFraction
             The percentage of the slash that is distributed to reporters.
            
             The rest of the slashed value is handled by the `Slash`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateCanceledSlashPayout(System.String)">
            <summary>
            Implements any storage change for Staking.CanceledSlashPayout
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetCanceledSlashPayout">
            <summary>
            >> CanceledSlashPayout
             The amount of currency given to reporters of a slash event which was
             canceled by extraordinary circumstances (e.g. governance).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateUnappliedSlashes(System.String,System.String)">
            <summary>
            Implements any storage change for Staking.UnappliedSlashes
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetUnappliedSlashes(System.String)">
            <summary>
            >> UnappliedSlashes
             All unapplied slashes that are queued for later.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateBondedEras(System.String)">
            <summary>
            Implements any storage change for Staking.BondedEras
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetBondedEras">
            <summary>
            >> BondedEras
             A mapping from still-bonded eras to the first session index of that era.
            
             Must contains information for eras for the range:
             `[active_era - bounding_duration; active_era]`
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateValidatorSlashInEra(System.String,System.String)">
            <summary>
            Implements any storage change for Staking.ValidatorSlashInEra
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetValidatorSlashInEra(System.String)">
            <summary>
            >> ValidatorSlashInEra
             All slashing events on validators, mapped by era to the highest slash proportion
             and slash value of the era.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateNominatorSlashInEra(System.String,System.String)">
            <summary>
            Implements any storage change for Staking.NominatorSlashInEra
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetNominatorSlashInEra(System.String)">
            <summary>
            >> NominatorSlashInEra
             All slashing events on nominators, mapped by era to the highest slash value of the era.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateSlashingSpans(System.String,System.String)">
            <summary>
            Implements any storage change for Staking.SlashingSpans
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetSlashingSpans(System.String)">
            <summary>
            >> SlashingSpans
             Slashing spans for stash accounts.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateSpanSlash(System.String,System.String)">
            <summary>
            Implements any storage change for Staking.SpanSlash
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetSpanSlash(System.String)">
            <summary>
            >> SpanSlash
             Records information about the maximum slash of a stash within a slashing span,
             as well as how much reward has been paid out.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateEarliestUnappliedSlash(System.String)">
            <summary>
            Implements any storage change for Staking.EarliestUnappliedSlash
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetEarliestUnappliedSlash">
            <summary>
            >> EarliestUnappliedSlash
             The earliest era for which we have a pending, unapplied slash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateCurrentPlannedSession(System.String)">
            <summary>
            Implements any storage change for Staking.CurrentPlannedSession
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetCurrentPlannedSession">
            <summary>
            >> CurrentPlannedSession
             The last planned session scheduled by the session pallet.
            
             This is basically in sync with the call to [`pallet_session::SessionManager::new_session`].
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateStorageVersion(System.String)">
            <summary>
            Implements any storage change for Staking.StorageVersion
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetStorageVersion">
            <summary>
            >> StorageVersion
             True if network has been upgraded to this version.
             Storage version of the pallet.
            
             This is set to v7.0.0 for new networks.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.OnUpdateChillThreshold(System.String)">
            <summary>
            Implements any storage change for Staking.ChillThreshold
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.StakingStorage.GetChillThreshold">
            <summary>
            >> ChillThreshold
             The threshold for when users can start calling `chill_other` for other validators /
             nominators. The threshold is compared to the actual number of validators / nominators
             (`CountFor*`) in the system compared to the configured max (`Max*Count`).
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.ISudoStorage">
            <summary>
            ISudoStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISudoStorage.GetKey">
            <summary>
            >> Key
             The `AccountId` of the sudo key.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.SudoStorage">
            <summary>
            SudoStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SudoStorage._keyTypedStorage">
            <summary>
            _keyTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SudoStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            SudoStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SudoStorage.KeyTypedStorage">
            <summary>
            _keyTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SudoStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SudoStorage.OnUpdateKey(System.String)">
            <summary>
            Implements any storage change for Sudo.Key
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SudoStorage.GetKey">
            <summary>
            >> Key
             The `AccountId` of the sudo key.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.ISystemStorage">
            <summary>
            ISystemStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISystemStorage.GetAccount(System.String)">
            <summary>
            >> Account
             The full account information for a particular account ID.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISystemStorage.GetExtrinsicCount">
            <summary>
            >> ExtrinsicCount
             Total extrinsics count for the current block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISystemStorage.GetBlockWeight">
            <summary>
            >> BlockWeight
             The current weight for the block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISystemStorage.GetAllExtrinsicsLen">
            <summary>
            >> AllExtrinsicsLen
             Total length (in bytes) for all extrinsics put together, for the current block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISystemStorage.GetBlockHash(System.String)">
            <summary>
            >> BlockHash
             Map of block numbers to block hashes.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISystemStorage.GetExtrinsicData(System.String)">
            <summary>
            >> ExtrinsicData
             Extrinsics data for the current block (maps an extrinsic&#39;s index to its data).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISystemStorage.GetNumber">
            <summary>
            >> Number
             The current block number being processed. Set by `execute_block`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISystemStorage.GetParentHash">
            <summary>
            >> ParentHash
             Hash of the previous block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISystemStorage.GetDigest">
            <summary>
            >> Digest
             Digest of the current block, also part of the block header.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISystemStorage.GetEvents">
            <summary>
            >> Events
             Events deposited for the current block.
            
             NOTE: This storage item is explicitly unbounded since it is never intended to be read
             from within the runtime.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISystemStorage.GetEventCount">
            <summary>
            >> EventCount
             The number of events in the `Events&lt;T&gt;` list.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISystemStorage.GetEventTopics(System.String)">
            <summary>
            >> EventTopics
             Mapping between a topic (represented by T::Hash) and a vector of indexes
             of events in the `&lt;Events&lt;T&gt;&gt;` list.
            
             All topic vectors have deterministic storage locations depending on the topic. This
             allows light-clients to leverage the changes trie storage tracking mechanism and
             in case of changes fetch the list of events of interest.
            
             The value has the type `(T::BlockNumber, EventIndex)` because if we used only just
             the `EventIndex` then in case if the topic has the same contents on the next block
             no notification will be triggered thus the event might be lost.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISystemStorage.GetLastRuntimeUpgrade">
            <summary>
            >> LastRuntimeUpgrade
             Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISystemStorage.GetUpgradedToU32RefCount">
            <summary>
            >> UpgradedToU32RefCount
             True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISystemStorage.GetUpgradedToTripleRefCount">
            <summary>
            >> UpgradedToTripleRefCount
             True if we have upgraded so that AccountInfo contains three types of `RefCount`. False
             (default) if not.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ISystemStorage.GetExecutionPhase">
            <summary>
            >> ExecutionPhase
             The execution phase of the block.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.SystemStorage">
            <summary>
            SystemStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SystemStorage._accountTypedStorage">
            <summary>
            _accountTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SystemStorage._extrinsicCountTypedStorage">
            <summary>
            _extrinsicCountTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SystemStorage._blockWeightTypedStorage">
            <summary>
            _blockWeightTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SystemStorage._allExtrinsicsLenTypedStorage">
            <summary>
            _allExtrinsicsLenTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SystemStorage._blockHashTypedStorage">
            <summary>
            _blockHashTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SystemStorage._extrinsicDataTypedStorage">
            <summary>
            _extrinsicDataTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SystemStorage._numberTypedStorage">
            <summary>
            _numberTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SystemStorage._parentHashTypedStorage">
            <summary>
            _parentHashTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SystemStorage._digestTypedStorage">
            <summary>
            _digestTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SystemStorage._eventsTypedStorage">
            <summary>
            _eventsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SystemStorage._eventCountTypedStorage">
            <summary>
            _eventCountTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SystemStorage._eventTopicsTypedStorage">
            <summary>
            _eventTopicsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SystemStorage._lastRuntimeUpgradeTypedStorage">
            <summary>
            _lastRuntimeUpgradeTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SystemStorage._upgradedToU32RefCountTypedStorage">
            <summary>
            _upgradedToU32RefCountTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SystemStorage._upgradedToTripleRefCountTypedStorage">
            <summary>
            _upgradedToTripleRefCountTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.SystemStorage._executionPhaseTypedStorage">
            <summary>
            _executionPhaseTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            SystemStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SystemStorage.AccountTypedStorage">
            <summary>
            _accountTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SystemStorage.ExtrinsicCountTypedStorage">
            <summary>
            _extrinsicCountTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SystemStorage.BlockWeightTypedStorage">
            <summary>
            _blockWeightTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SystemStorage.AllExtrinsicsLenTypedStorage">
            <summary>
            _allExtrinsicsLenTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SystemStorage.BlockHashTypedStorage">
            <summary>
            _blockHashTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SystemStorage.ExtrinsicDataTypedStorage">
            <summary>
            _extrinsicDataTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SystemStorage.NumberTypedStorage">
            <summary>
            _numberTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SystemStorage.ParentHashTypedStorage">
            <summary>
            _parentHashTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SystemStorage.DigestTypedStorage">
            <summary>
            _digestTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SystemStorage.EventsTypedStorage">
            <summary>
            _eventsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SystemStorage.EventCountTypedStorage">
            <summary>
            _eventCountTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SystemStorage.EventTopicsTypedStorage">
            <summary>
            _eventTopicsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SystemStorage.LastRuntimeUpgradeTypedStorage">
            <summary>
            _lastRuntimeUpgradeTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SystemStorage.UpgradedToU32RefCountTypedStorage">
            <summary>
            _upgradedToU32RefCountTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SystemStorage.UpgradedToTripleRefCountTypedStorage">
            <summary>
            _upgradedToTripleRefCountTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.SystemStorage.ExecutionPhaseTypedStorage">
            <summary>
            _executionPhaseTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.OnUpdateAccount(System.String,System.String)">
            <summary>
            Implements any storage change for System.Account
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.GetAccount(System.String)">
            <summary>
            >> Account
             The full account information for a particular account ID.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.OnUpdateExtrinsicCount(System.String)">
            <summary>
            Implements any storage change for System.ExtrinsicCount
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.GetExtrinsicCount">
            <summary>
            >> ExtrinsicCount
             Total extrinsics count for the current block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.OnUpdateBlockWeight(System.String)">
            <summary>
            Implements any storage change for System.BlockWeight
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.GetBlockWeight">
            <summary>
            >> BlockWeight
             The current weight for the block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.OnUpdateAllExtrinsicsLen(System.String)">
            <summary>
            Implements any storage change for System.AllExtrinsicsLen
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.GetAllExtrinsicsLen">
            <summary>
            >> AllExtrinsicsLen
             Total length (in bytes) for all extrinsics put together, for the current block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.OnUpdateBlockHash(System.String,System.String)">
            <summary>
            Implements any storage change for System.BlockHash
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.GetBlockHash(System.String)">
            <summary>
            >> BlockHash
             Map of block numbers to block hashes.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.OnUpdateExtrinsicData(System.String,System.String)">
            <summary>
            Implements any storage change for System.ExtrinsicData
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.GetExtrinsicData(System.String)">
            <summary>
            >> ExtrinsicData
             Extrinsics data for the current block (maps an extrinsic&#39;s index to its data).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.OnUpdateNumber(System.String)">
            <summary>
            Implements any storage change for System.Number
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.GetNumber">
            <summary>
            >> Number
             The current block number being processed. Set by `execute_block`.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.OnUpdateParentHash(System.String)">
            <summary>
            Implements any storage change for System.ParentHash
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.GetParentHash">
            <summary>
            >> ParentHash
             Hash of the previous block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.OnUpdateDigest(System.String)">
            <summary>
            Implements any storage change for System.Digest
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.GetDigest">
            <summary>
            >> Digest
             Digest of the current block, also part of the block header.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.OnUpdateEvents(System.String)">
            <summary>
            Implements any storage change for System.Events
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.GetEvents">
            <summary>
            >> Events
             Events deposited for the current block.
            
             NOTE: This storage item is explicitly unbounded since it is never intended to be read
             from within the runtime.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.OnUpdateEventCount(System.String)">
            <summary>
            Implements any storage change for System.EventCount
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.GetEventCount">
            <summary>
            >> EventCount
             The number of events in the `Events&lt;T&gt;` list.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.OnUpdateEventTopics(System.String,System.String)">
            <summary>
            Implements any storage change for System.EventTopics
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.GetEventTopics(System.String)">
            <summary>
            >> EventTopics
             Mapping between a topic (represented by T::Hash) and a vector of indexes
             of events in the `&lt;Events&lt;T&gt;&gt;` list.
            
             All topic vectors have deterministic storage locations depending on the topic. This
             allows light-clients to leverage the changes trie storage tracking mechanism and
             in case of changes fetch the list of events of interest.
            
             The value has the type `(T::BlockNumber, EventIndex)` because if we used only just
             the `EventIndex` then in case if the topic has the same contents on the next block
             no notification will be triggered thus the event might be lost.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.OnUpdateLastRuntimeUpgrade(System.String)">
            <summary>
            Implements any storage change for System.LastRuntimeUpgrade
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.GetLastRuntimeUpgrade">
            <summary>
            >> LastRuntimeUpgrade
             Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.OnUpdateUpgradedToU32RefCount(System.String)">
            <summary>
            Implements any storage change for System.UpgradedToU32RefCount
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.GetUpgradedToU32RefCount">
            <summary>
            >> UpgradedToU32RefCount
             True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.OnUpdateUpgradedToTripleRefCount(System.String)">
            <summary>
            Implements any storage change for System.UpgradedToTripleRefCount
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.GetUpgradedToTripleRefCount">
            <summary>
            >> UpgradedToTripleRefCount
             True if we have upgraded so that AccountInfo contains three types of `RefCount`. False
             (default) if not.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.OnUpdateExecutionPhase(System.String)">
            <summary>
            Implements any storage change for System.ExecutionPhase
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.SystemStorage.GetExecutionPhase">
            <summary>
            >> ExecutionPhase
             The execution phase of the block.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.ITechnicalCommitteeStorage">
            <summary>
            ITechnicalCommitteeStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITechnicalCommitteeStorage.GetProposals">
            <summary>
            >> Proposals
             The hashes of the active proposals.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITechnicalCommitteeStorage.GetProposalOf(System.String)">
            <summary>
            >> ProposalOf
             Actual proposal for a given hash, if it&#39;s current.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITechnicalCommitteeStorage.GetVoting(System.String)">
            <summary>
            >> Voting
             Votes on a given proposal, if it is ongoing.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITechnicalCommitteeStorage.GetProposalCount">
            <summary>
            >> ProposalCount
             Proposals so far.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITechnicalCommitteeStorage.GetMembers">
            <summary>
            >> Members
             The current members of the collective. This is stored sorted (just by value).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITechnicalCommitteeStorage.GetPrime">
            <summary>
            >> Prime
             The prime member that helps determine the default vote behavior in case of absentations.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage">
            <summary>
            TechnicalCommitteeStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage._proposalsTypedStorage">
            <summary>
            _proposalsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage._proposalOfTypedStorage">
            <summary>
            _proposalOfTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage._votingTypedStorage">
            <summary>
            _votingTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage._proposalCountTypedStorage">
            <summary>
            _proposalCountTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage._membersTypedStorage">
            <summary>
            _membersTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage._primeTypedStorage">
            <summary>
            _primeTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            TechnicalCommitteeStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage.ProposalsTypedStorage">
            <summary>
            _proposalsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage.ProposalOfTypedStorage">
            <summary>
            _proposalOfTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage.VotingTypedStorage">
            <summary>
            _votingTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage.ProposalCountTypedStorage">
            <summary>
            _proposalCountTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage.MembersTypedStorage">
            <summary>
            _membersTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage.PrimeTypedStorage">
            <summary>
            _primeTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage.OnUpdateProposals(System.String)">
            <summary>
            Implements any storage change for TechnicalCommittee.Proposals
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage.GetProposals">
            <summary>
            >> Proposals
             The hashes of the active proposals.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage.OnUpdateProposalOf(System.String,System.String)">
            <summary>
            Implements any storage change for TechnicalCommittee.ProposalOf
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage.GetProposalOf(System.String)">
            <summary>
            >> ProposalOf
             Actual proposal for a given hash, if it&#39;s current.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage.OnUpdateVoting(System.String,System.String)">
            <summary>
            Implements any storage change for TechnicalCommittee.Voting
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage.GetVoting(System.String)">
            <summary>
            >> Voting
             Votes on a given proposal, if it is ongoing.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage.OnUpdateProposalCount(System.String)">
            <summary>
            Implements any storage change for TechnicalCommittee.ProposalCount
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage.GetProposalCount">
            <summary>
            >> ProposalCount
             Proposals so far.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage.OnUpdateMembers(System.String)">
            <summary>
            Implements any storage change for TechnicalCommittee.Members
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage.GetMembers">
            <summary>
            >> Members
             The current members of the collective. This is stored sorted (just by value).
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage.OnUpdatePrime(System.String)">
            <summary>
            Implements any storage change for TechnicalCommittee.Prime
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TechnicalCommitteeStorage.GetPrime">
            <summary>
            >> Prime
             The prime member that helps determine the default vote behavior in case of absentations.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.ITechnicalMembershipStorage">
            <summary>
            ITechnicalMembershipStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITechnicalMembershipStorage.GetMembers">
            <summary>
            >> Members
             The current membership, stored as an ordered Vec.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITechnicalMembershipStorage.GetPrime">
            <summary>
            >> Prime
             The current prime member, if one exists.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.TechnicalMembershipStorage">
            <summary>
            TechnicalMembershipStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TechnicalMembershipStorage._membersTypedStorage">
            <summary>
            _membersTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TechnicalMembershipStorage._primeTypedStorage">
            <summary>
            _primeTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TechnicalMembershipStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            TechnicalMembershipStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TechnicalMembershipStorage.MembersTypedStorage">
            <summary>
            _membersTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TechnicalMembershipStorage.PrimeTypedStorage">
            <summary>
            _primeTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TechnicalMembershipStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TechnicalMembershipStorage.OnUpdateMembers(System.String)">
            <summary>
            Implements any storage change for TechnicalMembership.Members
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TechnicalMembershipStorage.GetMembers">
            <summary>
            >> Members
             The current membership, stored as an ordered Vec.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TechnicalMembershipStorage.OnUpdatePrime(System.String)">
            <summary>
            Implements any storage change for TechnicalMembership.Prime
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TechnicalMembershipStorage.GetPrime">
            <summary>
            >> Prime
             The current prime member, if one exists.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.ITimestampStorage">
            <summary>
            ITimestampStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITimestampStorage.GetNow">
            <summary>
            >> Now
             Current time for the current block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITimestampStorage.GetDidUpdate">
            <summary>
            >> DidUpdate
             Did the timestamp get updated in this block?
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.TimestampStorage">
            <summary>
            TimestampStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TimestampStorage._nowTypedStorage">
            <summary>
            _nowTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TimestampStorage._didUpdateTypedStorage">
            <summary>
            _didUpdateTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TimestampStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            TimestampStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TimestampStorage.NowTypedStorage">
            <summary>
            _nowTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TimestampStorage.DidUpdateTypedStorage">
            <summary>
            _didUpdateTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TimestampStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TimestampStorage.OnUpdateNow(System.String)">
            <summary>
            Implements any storage change for Timestamp.Now
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TimestampStorage.GetNow">
            <summary>
            >> Now
             Current time for the current block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TimestampStorage.OnUpdateDidUpdate(System.String)">
            <summary>
            Implements any storage change for Timestamp.DidUpdate
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TimestampStorage.GetDidUpdate">
            <summary>
            >> DidUpdate
             Did the timestamp get updated in this block?
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.ITipsStorage">
            <summary>
            ITipsStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITipsStorage.GetTips(System.String)">
            <summary>
            >> Tips
             TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.
             This has the insecure enumerable hash function since the key itself is already
             guaranteed to be a secure hash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITipsStorage.GetReasons(System.String)">
            <summary>
            >> Reasons
             Simple preimage lookup from the reason&#39;s hash to the original data. Again, has an
             insecure enumerable hash since the key is guaranteed to be the result of a secure hash.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.TipsStorage">
            <summary>
            TipsStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TipsStorage._tipsTypedStorage">
            <summary>
            _tipsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TipsStorage._reasonsTypedStorage">
            <summary>
            _reasonsTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TipsStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            TipsStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TipsStorage.TipsTypedStorage">
            <summary>
            _tipsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TipsStorage.ReasonsTypedStorage">
            <summary>
            _reasonsTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TipsStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TipsStorage.OnUpdateTips(System.String,System.String)">
            <summary>
            Implements any storage change for Tips.Tips
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TipsStorage.GetTips(System.String)">
            <summary>
            >> Tips
             TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.
             This has the insecure enumerable hash function since the key itself is already
             guaranteed to be a secure hash.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TipsStorage.OnUpdateReasons(System.String,System.String)">
            <summary>
            Implements any storage change for Tips.Reasons
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TipsStorage.GetReasons(System.String)">
            <summary>
            >> Reasons
             Simple preimage lookup from the reason&#39;s hash to the original data. Again, has an
             insecure enumerable hash since the key is guaranteed to be the result of a secure hash.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.ITransactionPaymentStorage">
            <summary>
            ITransactionPaymentStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITransactionPaymentStorage.GetNextFeeMultiplier">
            <summary>
            >> NextFeeMultiplier
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITransactionPaymentStorage.GetStorageVersion">
            <summary>
            >> StorageVersion
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.TransactionPaymentStorage">
            <summary>
            TransactionPaymentStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TransactionPaymentStorage._nextFeeMultiplierTypedStorage">
            <summary>
            _nextFeeMultiplierTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TransactionPaymentStorage._storageVersionTypedStorage">
            <summary>
            _storageVersionTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionPaymentStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            TransactionPaymentStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TransactionPaymentStorage.NextFeeMultiplierTypedStorage">
            <summary>
            _nextFeeMultiplierTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TransactionPaymentStorage.StorageVersionTypedStorage">
            <summary>
            _storageVersionTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionPaymentStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionPaymentStorage.OnUpdateNextFeeMultiplier(System.String)">
            <summary>
            Implements any storage change for TransactionPayment.NextFeeMultiplier
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionPaymentStorage.GetNextFeeMultiplier">
            <summary>
            >> NextFeeMultiplier
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionPaymentStorage.OnUpdateStorageVersion(System.String)">
            <summary>
            Implements any storage change for TransactionPayment.StorageVersion
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionPaymentStorage.GetStorageVersion">
            <summary>
            >> StorageVersion
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.ITransactionStorageStorage">
            <summary>
            ITransactionStorageStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITransactionStorageStorage.GetTransactions(System.String)">
            <summary>
            >> Transactions
             Collection of transaction metadata by block number.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITransactionStorageStorage.GetChunkCount(System.String)">
            <summary>
            >> ChunkCount
             Count indexed chunks for each block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITransactionStorageStorage.GetByteFee">
            <summary>
            >> ByteFee
             Storage fee per byte.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITransactionStorageStorage.GetEntryFee">
            <summary>
            >> EntryFee
             Storage fee per transaction.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITransactionStorageStorage.GetMaxTransactionSize">
            <summary>
            >> MaxTransactionSize
             Maximum data set in a single transaction in bytes.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITransactionStorageStorage.GetMaxBlockTransactions">
            <summary>
            >> MaxBlockTransactions
             Maximum number of indexed transactions in the block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITransactionStorageStorage.GetStoragePeriod">
            <summary>
            >> StoragePeriod
             Storage period for data in blocks. Should match `sp_storage_proof::DEFAULT_STORAGE_PERIOD`
             for block authoring.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITransactionStorageStorage.GetBlockTransactions">
            <summary>
            >> BlockTransactions
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITransactionStorageStorage.GetProofChecked">
            <summary>
            >> ProofChecked
             Was the proof checked in this block?
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.TransactionStorageStorage">
            <summary>
            TransactionStorageStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TransactionStorageStorage._transactionsTypedStorage">
            <summary>
            _transactionsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TransactionStorageStorage._chunkCountTypedStorage">
            <summary>
            _chunkCountTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TransactionStorageStorage._byteFeeTypedStorage">
            <summary>
            _byteFeeTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TransactionStorageStorage._entryFeeTypedStorage">
            <summary>
            _entryFeeTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TransactionStorageStorage._maxTransactionSizeTypedStorage">
            <summary>
            _maxTransactionSizeTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TransactionStorageStorage._maxBlockTransactionsTypedStorage">
            <summary>
            _maxBlockTransactionsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TransactionStorageStorage._storagePeriodTypedStorage">
            <summary>
            _storagePeriodTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TransactionStorageStorage._blockTransactionsTypedStorage">
            <summary>
            _blockTransactionsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TransactionStorageStorage._proofCheckedTypedStorage">
            <summary>
            _proofCheckedTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            TransactionStorageStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.TransactionsTypedStorage">
            <summary>
            _transactionsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.ChunkCountTypedStorage">
            <summary>
            _chunkCountTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.ByteFeeTypedStorage">
            <summary>
            _byteFeeTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.EntryFeeTypedStorage">
            <summary>
            _entryFeeTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.MaxTransactionSizeTypedStorage">
            <summary>
            _maxTransactionSizeTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.MaxBlockTransactionsTypedStorage">
            <summary>
            _maxBlockTransactionsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.StoragePeriodTypedStorage">
            <summary>
            _storagePeriodTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.BlockTransactionsTypedStorage">
            <summary>
            _blockTransactionsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.ProofCheckedTypedStorage">
            <summary>
            _proofCheckedTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.OnUpdateTransactions(System.String,System.String)">
            <summary>
            Implements any storage change for TransactionStorage.Transactions
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.GetTransactions(System.String)">
            <summary>
            >> Transactions
             Collection of transaction metadata by block number.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.OnUpdateChunkCount(System.String,System.String)">
            <summary>
            Implements any storage change for TransactionStorage.ChunkCount
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.GetChunkCount(System.String)">
            <summary>
            >> ChunkCount
             Count indexed chunks for each block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.OnUpdateByteFee(System.String)">
            <summary>
            Implements any storage change for TransactionStorage.ByteFee
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.GetByteFee">
            <summary>
            >> ByteFee
             Storage fee per byte.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.OnUpdateEntryFee(System.String)">
            <summary>
            Implements any storage change for TransactionStorage.EntryFee
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.GetEntryFee">
            <summary>
            >> EntryFee
             Storage fee per transaction.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.OnUpdateMaxTransactionSize(System.String)">
            <summary>
            Implements any storage change for TransactionStorage.MaxTransactionSize
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.GetMaxTransactionSize">
            <summary>
            >> MaxTransactionSize
             Maximum data set in a single transaction in bytes.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.OnUpdateMaxBlockTransactions(System.String)">
            <summary>
            Implements any storage change for TransactionStorage.MaxBlockTransactions
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.GetMaxBlockTransactions">
            <summary>
            >> MaxBlockTransactions
             Maximum number of indexed transactions in the block.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.OnUpdateStoragePeriod(System.String)">
            <summary>
            Implements any storage change for TransactionStorage.StoragePeriod
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.GetStoragePeriod">
            <summary>
            >> StoragePeriod
             Storage period for data in blocks. Should match `sp_storage_proof::DEFAULT_STORAGE_PERIOD`
             for block authoring.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.OnUpdateBlockTransactions(System.String)">
            <summary>
            Implements any storage change for TransactionStorage.BlockTransactions
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.GetBlockTransactions">
            <summary>
            >> BlockTransactions
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.OnUpdateProofChecked(System.String)">
            <summary>
            Implements any storage change for TransactionStorage.ProofChecked
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TransactionStorageStorage.GetProofChecked">
            <summary>
            >> ProofChecked
             Was the proof checked in this block?
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.ITreasuryStorage">
            <summary>
            ITreasuryStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITreasuryStorage.GetProposalCount">
            <summary>
            >> ProposalCount
             Number of proposals that have been made.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITreasuryStorage.GetProposals(System.String)">
            <summary>
            >> Proposals
             Proposals that have been made.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.ITreasuryStorage.GetApprovals">
            <summary>
            >> Approvals
             Proposal indices that have been approved but not yet awarded.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.TreasuryStorage">
            <summary>
            TreasuryStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TreasuryStorage._proposalCountTypedStorage">
            <summary>
            _proposalCountTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TreasuryStorage._proposalsTypedStorage">
            <summary>
            _proposalsTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.TreasuryStorage._approvalsTypedStorage">
            <summary>
            _approvalsTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TreasuryStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            TreasuryStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TreasuryStorage.ProposalCountTypedStorage">
            <summary>
            _proposalCountTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TreasuryStorage.ProposalsTypedStorage">
            <summary>
            _proposalsTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.TreasuryStorage.ApprovalsTypedStorage">
            <summary>
            _approvalsTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TreasuryStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TreasuryStorage.OnUpdateProposalCount(System.String)">
            <summary>
            Implements any storage change for Treasury.ProposalCount
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TreasuryStorage.GetProposalCount">
            <summary>
            >> ProposalCount
             Number of proposals that have been made.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TreasuryStorage.OnUpdateProposals(System.String,System.String)">
            <summary>
            Implements any storage change for Treasury.Proposals
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TreasuryStorage.GetProposals(System.String)">
            <summary>
            >> Proposals
             Proposals that have been made.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TreasuryStorage.OnUpdateApprovals(System.String)">
            <summary>
            Implements any storage change for Treasury.Approvals
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.TreasuryStorage.GetApprovals">
            <summary>
            >> Approvals
             Proposal indices that have been approved but not yet awarded.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IUniquesStorage">
            <summary>
            IUniquesStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IUniquesStorage.GetClass(System.String)">
            <summary>
            >> Class
             Details of an asset class.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IUniquesStorage.GetAccount(System.String)">
            <summary>
            >> Account
             The assets held by any given account; set out this way so that assets owned by a single
             account can be enumerated.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IUniquesStorage.GetAsset(System.String)">
            <summary>
            >> Asset
             The assets in existence and their ownership details.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IUniquesStorage.GetClassMetadataOf(System.String)">
            <summary>
            >> ClassMetadataOf
             Metadata of an asset class.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IUniquesStorage.GetInstanceMetadataOf(System.String)">
            <summary>
            >> InstanceMetadataOf
             Metadata of an asset instance.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IUniquesStorage.GetAttribute(System.String)">
            <summary>
            >> Attribute
             Metadata of an asset class.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.UniquesStorage">
            <summary>
            UniquesStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.UniquesStorage._classTypedStorage">
            <summary>
            _classTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.UniquesStorage._accountTypedStorage">
            <summary>
            _accountTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.UniquesStorage._assetTypedStorage">
            <summary>
            _assetTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.UniquesStorage._classMetadataOfTypedStorage">
            <summary>
            _classMetadataOfTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.UniquesStorage._instanceMetadataOfTypedStorage">
            <summary>
            _instanceMetadataOfTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.UniquesStorage._attributeTypedStorage">
            <summary>
            _attributeTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.UniquesStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            UniquesStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.UniquesStorage.ClassTypedStorage">
            <summary>
            _classTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.UniquesStorage.AccountTypedStorage">
            <summary>
            _accountTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.UniquesStorage.AssetTypedStorage">
            <summary>
            _assetTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.UniquesStorage.ClassMetadataOfTypedStorage">
            <summary>
            _classMetadataOfTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.UniquesStorage.InstanceMetadataOfTypedStorage">
            <summary>
            _instanceMetadataOfTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.UniquesStorage.AttributeTypedStorage">
            <summary>
            _attributeTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.UniquesStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.UniquesStorage.OnUpdateClass(System.String,System.String)">
            <summary>
            Implements any storage change for Uniques.Class
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.UniquesStorage.GetClass(System.String)">
            <summary>
            >> Class
             Details of an asset class.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.UniquesStorage.OnUpdateAccount(System.String,System.String)">
            <summary>
            Implements any storage change for Uniques.Account
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.UniquesStorage.GetAccount(System.String)">
            <summary>
            >> Account
             The assets held by any given account; set out this way so that assets owned by a single
             account can be enumerated.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.UniquesStorage.OnUpdateAsset(System.String,System.String)">
            <summary>
            Implements any storage change for Uniques.Asset
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.UniquesStorage.GetAsset(System.String)">
            <summary>
            >> Asset
             The assets in existence and their ownership details.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.UniquesStorage.OnUpdateClassMetadataOf(System.String,System.String)">
            <summary>
            Implements any storage change for Uniques.ClassMetadataOf
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.UniquesStorage.GetClassMetadataOf(System.String)">
            <summary>
            >> ClassMetadataOf
             Metadata of an asset class.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.UniquesStorage.OnUpdateInstanceMetadataOf(System.String,System.String)">
            <summary>
            Implements any storage change for Uniques.InstanceMetadataOf
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.UniquesStorage.GetInstanceMetadataOf(System.String)">
            <summary>
            >> InstanceMetadataOf
             Metadata of an asset instance.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.UniquesStorage.OnUpdateAttribute(System.String,System.String)">
            <summary>
            Implements any storage change for Uniques.Attribute
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.UniquesStorage.GetAttribute(System.String)">
            <summary>
            >> Attribute
             Metadata of an asset class.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.IVestingStorage">
            <summary>
            IVestingStorage interface definition.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IVestingStorage.GetVesting(System.String)">
            <summary>
            >> Vesting
             Information regarding the vesting of a given account.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.IVestingStorage.GetStorageVersion">
            <summary>
            >> StorageVersion
             Storage version of the pallet.
            
             New networks start with latest version, as determined by the genesis build.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Generated.Storage.VestingStorage">
            <summary>
            VestingStorage class definition.
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.VestingStorage._vestingTypedStorage">
            <summary>
            _vestingTypedStorage typed storage field
            </summary>
        </member>
        <member name="F:Ajuna.RestService.Generated.Storage.VestingStorage._storageVersionTypedStorage">
            <summary>
            _storageVersionTypedStorage typed storage field
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.VestingStorage.#ctor(Ajuna.ServiceLayer.Storage.IStorageChangeDelegate)">
            <summary>
            VestingStorage constructor.
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.VestingStorage.VestingTypedStorage">
            <summary>
            _vestingTypedStorage property
            </summary>
        </member>
        <member name="P:Ajuna.RestService.Generated.Storage.VestingStorage.StorageVersionTypedStorage">
            <summary>
            _storageVersionTypedStorage property
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.VestingStorage.InitializeAsync(Ajuna.NetApi.SubstrateClient)">
            <summary>
            Connects to all storages and initializes the change subscription handling.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.VestingStorage.OnUpdateVesting(System.String,System.String)">
            <summary>
            Implements any storage change for Vesting.Vesting
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.VestingStorage.GetVesting(System.String)">
            <summary>
            >> Vesting
             Information regarding the vesting of a given account.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.VestingStorage.OnUpdateStorageVersion(System.String)">
            <summary>
            Implements any storage change for Vesting.StorageVersion
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Generated.Storage.VestingStorage.GetStorageVersion">
            <summary>
            >> StorageVersion
             Storage version of the pallet.
            
             New networks start with latest version, as determined by the genesis build.
            </summary>
        </member>
        <member name="T:Ajuna.RestService.Program">
            <summary>
            >> Program
            Setting up the Rest Service.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Program.Main(System.String[])">
            <summary>
            Entrypoint
            </summary>
            <param name="args">Command line arguments.</param>
        </member>
        <member name="M:Ajuna.RestService.Program.CreateHostBuilder(System.String[])">
            <summary>
            Setup the Rest Service host.
            </summary>
            <param name="args">Command line arguments.</param>
            <returns>The host.</returns>
        </member>
        <member name="T:Ajuna.RestService.Startup">
            <summary>
            This class implements configuration and setting up services.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            >> Startup
            Constructs and initializes the Startup class.
            Stores the configuration object
            </summary>
            <param name="configuration">The service configuration.</param>
        </member>
        <member name="P:Ajuna.RestService.Startup.Configuration">
            <summary>
            Retreives the service configuration.
            </summary>
        </member>
        <member name="M:Ajuna.RestService.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container. 
            </summary>
            <param name="services">Service collection to configure.</param>
        </member>
        <member name="M:Ajuna.RestService.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Ajuna.AspNetCore.StorageSubscriptionHandler)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline. 
            </summary>
            <param name="app">Application builder</param>
            <param name="env">Service hosting environment</param>
            <param name="handler">Middleware to handle web socket subscriptions</param>
        </member>
    </members>
</doc>
