//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.PalletStaking;
using Ajuna.NetApi.Model.SpArithmetic;
using Ajuna.NetApi.Model.SpCore;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using Ajuna.RestService.Generated.Storage;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Ajuna.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// StakingController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class StakingController : ControllerBase
    {
        
        private IStakingStorage _stakingStorage;
        
        /// <summary>
        /// StakingController constructor.
        /// </summary>
        public StakingController(IStakingStorage stakingStorage)
        {
            _stakingStorage = stakingStorage;
        }
        
        /// <summary>
        /// >> HistoryDepth
        ///  Number of eras to keep in history.
        /// 
        ///  Information is kept for eras in `[current_era - history_depth; current_era]`.
        /// 
        ///  Must be more than the number of eras delayed by session otherwise. I.e. active era must
        ///  always be in history. I.e. `active_era &gt; current_era - history_depth` must be
        ///  guaranteed.
        /// </summary>
        [HttpGet("HistoryDepth")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Primitive.U32), 200)]
        public IActionResult GetHistoryDepth()
        {
            return this.Ok(_stakingStorage.GetHistoryDepth());
        }
        
        /// <summary>
        /// >> ValidatorCount
        ///  The ideal number of staking participants.
        /// </summary>
        [HttpGet("ValidatorCount")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Primitive.U32), 200)]
        public IActionResult GetValidatorCount()
        {
            return this.Ok(_stakingStorage.GetValidatorCount());
        }
        
        /// <summary>
        /// >> MinimumValidatorCount
        ///  Minimum number of staking participants before emergency conditions are imposed.
        /// </summary>
        [HttpGet("MinimumValidatorCount")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Primitive.U32), 200)]
        public IActionResult GetMinimumValidatorCount()
        {
            return this.Ok(_stakingStorage.GetMinimumValidatorCount());
        }
        
        /// <summary>
        /// >> Invulnerables
        ///  Any validators that may never be slashed or forcibly kicked. It&#39;s a Vec since they&#39;re
        ///  easy to initialize and the performance hit is minimal (we expect no more than four
        ///  invulnerables) and restricted to testnets.
        /// </summary>
        [HttpGet("Invulnerables")]
        [ProducesResponseType(typeof(BaseVec<Ajuna.NetApi.Model.SpCore.AccountId32>), 200)]
        public IActionResult GetInvulnerables()
        {
            return this.Ok(_stakingStorage.GetInvulnerables());
        }
        
        /// <summary>
        /// >> Bonded
        ///  Map from all locked &quot;stash&quot; accounts to the controller account.
        /// </summary>
        [HttpGet("Bonded")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.SpCore.AccountId32), 200)]
        public IActionResult GetBonded(string key)
        {
            return this.Ok(_stakingStorage.GetBonded(key));
        }
        
        /// <summary>
        /// >> MinNominatorBond
        ///  The minimum active bond to become and maintain the role of a nominator.
        /// </summary>
        [HttpGet("MinNominatorBond")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Primitive.U128), 200)]
        public IActionResult GetMinNominatorBond()
        {
            return this.Ok(_stakingStorage.GetMinNominatorBond());
        }
        
        /// <summary>
        /// >> MinValidatorBond
        ///  The minimum active bond to become and maintain the role of a validator.
        /// </summary>
        [HttpGet("MinValidatorBond")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Primitive.U128), 200)]
        public IActionResult GetMinValidatorBond()
        {
            return this.Ok(_stakingStorage.GetMinValidatorBond());
        }
        
        /// <summary>
        /// >> Ledger
        ///  Map from all (unlocked) &quot;controller&quot; accounts to the info regarding the staking.
        /// </summary>
        [HttpGet("Ledger")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.PalletStaking.StakingLedger), 200)]
        public IActionResult GetLedger(string key)
        {
            return this.Ok(_stakingStorage.GetLedger(key));
        }
        
        /// <summary>
        /// >> Payee
        ///  Where the reward payment should be made. Keyed by stash.
        /// </summary>
        [HttpGet("Payee")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.PalletStaking.EnumRewardDestination), 200)]
        public IActionResult GetPayee(string key)
        {
            return this.Ok(_stakingStorage.GetPayee(key));
        }
        
        /// <summary>
        /// >> Validators
        ///  The map from (wannabe) validator stash key to the preferences of that validator.
        /// 
        ///  When updating this storage item, you must also update the `CounterForValidators`.
        /// </summary>
        [HttpGet("Validators")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.PalletStaking.ValidatorPrefs), 200)]
        public IActionResult GetValidators(string key)
        {
            return this.Ok(_stakingStorage.GetValidators(key));
        }
        
        /// <summary>
        /// >> CounterForValidators
        ///  A tracker to keep count of the number of items in the `Validators` map.
        /// </summary>
        [HttpGet("CounterForValidators")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Primitive.U32), 200)]
        public IActionResult GetCounterForValidators()
        {
            return this.Ok(_stakingStorage.GetCounterForValidators());
        }
        
        /// <summary>
        /// >> MaxValidatorsCount
        ///  The maximum validator count before we stop allowing new validators to join.
        /// 
        ///  When this value is not set, no limits are enforced.
        /// </summary>
        [HttpGet("MaxValidatorsCount")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Primitive.U32), 200)]
        public IActionResult GetMaxValidatorsCount()
        {
            return this.Ok(_stakingStorage.GetMaxValidatorsCount());
        }
        
        /// <summary>
        /// >> Nominators
        ///  The map from nominator stash key to the set of stash keys of all validators to nominate.
        /// 
        ///  When updating this storage item, you must also update the `CounterForNominators`.
        /// </summary>
        [HttpGet("Nominators")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.PalletStaking.Nominations), 200)]
        public IActionResult GetNominators(string key)
        {
            return this.Ok(_stakingStorage.GetNominators(key));
        }
        
        /// <summary>
        /// >> CounterForNominators
        ///  A tracker to keep count of the number of items in the `Nominators` map.
        /// </summary>
        [HttpGet("CounterForNominators")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Primitive.U32), 200)]
        public IActionResult GetCounterForNominators()
        {
            return this.Ok(_stakingStorage.GetCounterForNominators());
        }
        
        /// <summary>
        /// >> MaxNominatorsCount
        ///  The maximum nominator count before we stop allowing new validators to join.
        /// 
        ///  When this value is not set, no limits are enforced.
        /// </summary>
        [HttpGet("MaxNominatorsCount")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Primitive.U32), 200)]
        public IActionResult GetMaxNominatorsCount()
        {
            return this.Ok(_stakingStorage.GetMaxNominatorsCount());
        }
        
        /// <summary>
        /// >> CurrentEra
        ///  The current era index.
        /// 
        ///  This is the latest planned era, depending on how the Session pallet queues the validator
        ///  set, it might be active or not.
        /// </summary>
        [HttpGet("CurrentEra")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Primitive.U32), 200)]
        public IActionResult GetCurrentEra()
        {
            return this.Ok(_stakingStorage.GetCurrentEra());
        }
        
        /// <summary>
        /// >> ActiveEra
        ///  The active era information, it holds index and start.
        /// 
        ///  The active era is the era being currently rewarded. Validator set of this era must be
        ///  equal to [`SessionInterface::validators`].
        /// </summary>
        [HttpGet("ActiveEra")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.PalletStaking.ActiveEraInfo), 200)]
        public IActionResult GetActiveEra()
        {
            return this.Ok(_stakingStorage.GetActiveEra());
        }
        
        /// <summary>
        /// >> ErasStartSessionIndex
        ///  The session index at which the era start for the last `HISTORY_DEPTH` eras.
        /// 
        ///  Note: This tracks the starting session (i.e. session index when era start being active)
        ///  for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`.
        /// </summary>
        [HttpGet("ErasStartSessionIndex")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Primitive.U32), 200)]
        public IActionResult GetErasStartSessionIndex(string key)
        {
            return this.Ok(_stakingStorage.GetErasStartSessionIndex(key));
        }
        
        /// <summary>
        /// >> ErasStakers
        ///  Exposure of validator at era.
        /// 
        ///  This is keyed first by the era index to allow bulk deletion and then the stash account.
        /// 
        ///  Is it removed after `HISTORY_DEPTH` eras.
        ///  If stakers hasn&#39;t been set or has been removed then empty exposure is returned.
        /// </summary>
        [HttpGet("ErasStakers")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.PalletStaking.Exposure), 200)]
        public IActionResult GetErasStakers(string key)
        {
            return this.Ok(_stakingStorage.GetErasStakers(key));
        }
        
        /// <summary>
        /// >> ErasStakersClipped
        ///  Clipped Exposure of validator at era.
        /// 
        ///  This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the
        ///  `T::MaxNominatorRewardedPerValidator` biggest stakers.
        ///  (Note: the field `total` and `own` of the exposure remains unchanged).
        ///  This is used to limit the i/o cost for the nominator payout.
        /// 
        ///  This is keyed fist by the era index to allow bulk deletion and then the stash account.
        /// 
        ///  Is it removed after `HISTORY_DEPTH` eras.
        ///  If stakers hasn&#39;t been set or has been removed then empty exposure is returned.
        /// </summary>
        [HttpGet("ErasStakersClipped")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.PalletStaking.Exposure), 200)]
        public IActionResult GetErasStakersClipped(string key)
        {
            return this.Ok(_stakingStorage.GetErasStakersClipped(key));
        }
        
        /// <summary>
        /// >> ErasValidatorPrefs
        ///  Similar to `ErasStakers`, this holds the preferences of validators.
        /// 
        ///  This is keyed first by the era index to allow bulk deletion and then the stash account.
        /// 
        ///  Is it removed after `HISTORY_DEPTH` eras.
        /// </summary>
        [HttpGet("ErasValidatorPrefs")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.PalletStaking.ValidatorPrefs), 200)]
        public IActionResult GetErasValidatorPrefs(string key)
        {
            return this.Ok(_stakingStorage.GetErasValidatorPrefs(key));
        }
        
        /// <summary>
        /// >> ErasValidatorReward
        ///  The total validator era payout for the last `HISTORY_DEPTH` eras.
        /// 
        ///  Eras that haven&#39;t finished yet or has been removed doesn&#39;t have reward.
        /// </summary>
        [HttpGet("ErasValidatorReward")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Primitive.U128), 200)]
        public IActionResult GetErasValidatorReward(string key)
        {
            return this.Ok(_stakingStorage.GetErasValidatorReward(key));
        }
        
        /// <summary>
        /// >> ErasRewardPoints
        ///  Rewards for the last `HISTORY_DEPTH` eras.
        ///  If reward hasn&#39;t been set or has been removed then 0 reward is returned.
        /// </summary>
        [HttpGet("ErasRewardPoints")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.PalletStaking.EraRewardPoints), 200)]
        public IActionResult GetErasRewardPoints(string key)
        {
            return this.Ok(_stakingStorage.GetErasRewardPoints(key));
        }
        
        /// <summary>
        /// >> ErasTotalStake
        ///  The total amount staked for the last `HISTORY_DEPTH` eras.
        ///  If total hasn&#39;t been set or has been removed then 0 stake is returned.
        /// </summary>
        [HttpGet("ErasTotalStake")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Primitive.U128), 200)]
        public IActionResult GetErasTotalStake(string key)
        {
            return this.Ok(_stakingStorage.GetErasTotalStake(key));
        }
        
        /// <summary>
        /// >> ForceEra
        ///  Mode of era forcing.
        /// </summary>
        [HttpGet("ForceEra")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.PalletStaking.EnumForcing), 200)]
        public IActionResult GetForceEra()
        {
            return this.Ok(_stakingStorage.GetForceEra());
        }
        
        /// <summary>
        /// >> SlashRewardFraction
        ///  The percentage of the slash that is distributed to reporters.
        /// 
        ///  The rest of the slashed value is handled by the `Slash`.
        /// </summary>
        [HttpGet("SlashRewardFraction")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.SpArithmetic.Perbill), 200)]
        public IActionResult GetSlashRewardFraction()
        {
            return this.Ok(_stakingStorage.GetSlashRewardFraction());
        }
        
        /// <summary>
        /// >> CanceledSlashPayout
        ///  The amount of currency given to reporters of a slash event which was
        ///  canceled by extraordinary circumstances (e.g. governance).
        /// </summary>
        [HttpGet("CanceledSlashPayout")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Primitive.U128), 200)]
        public IActionResult GetCanceledSlashPayout()
        {
            return this.Ok(_stakingStorage.GetCanceledSlashPayout());
        }
        
        /// <summary>
        /// >> UnappliedSlashes
        ///  All unapplied slashes that are queued for later.
        /// </summary>
        [HttpGet("UnappliedSlashes")]
        [ProducesResponseType(typeof(BaseVec<Ajuna.NetApi.Model.PalletStaking.UnappliedSlash>), 200)]
        public IActionResult GetUnappliedSlashes(string key)
        {
            return this.Ok(_stakingStorage.GetUnappliedSlashes(key));
        }
        
        /// <summary>
        /// >> BondedEras
        ///  A mapping from still-bonded eras to the first session index of that era.
        /// 
        ///  Must contains information for eras for the range:
        ///  `[active_era - bounding_duration; active_era]`
        /// </summary>
        [HttpGet("BondedEras")]
        [ProducesResponseType(typeof(BaseVec<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U32>>), 200)]
        public IActionResult GetBondedEras()
        {
            return this.Ok(_stakingStorage.GetBondedEras());
        }
        
        /// <summary>
        /// >> ValidatorSlashInEra
        ///  All slashing events on validators, mapped by era to the highest slash proportion
        ///  and slash value of the era.
        /// </summary>
        [HttpGet("ValidatorSlashInEra")]
        [ProducesResponseType(typeof(BaseTuple<Ajuna.NetApi.Model.SpArithmetic.Perbill,Ajuna.NetApi.Model.Types.Primitive.U128>), 200)]
        public IActionResult GetValidatorSlashInEra(string key)
        {
            return this.Ok(_stakingStorage.GetValidatorSlashInEra(key));
        }
        
        /// <summary>
        /// >> NominatorSlashInEra
        ///  All slashing events on nominators, mapped by era to the highest slash value of the era.
        /// </summary>
        [HttpGet("NominatorSlashInEra")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Primitive.U128), 200)]
        public IActionResult GetNominatorSlashInEra(string key)
        {
            return this.Ok(_stakingStorage.GetNominatorSlashInEra(key));
        }
        
        /// <summary>
        /// >> SlashingSpans
        ///  Slashing spans for stash accounts.
        /// </summary>
        [HttpGet("SlashingSpans")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.PalletStaking.SlashingSpans), 200)]
        public IActionResult GetSlashingSpans(string key)
        {
            return this.Ok(_stakingStorage.GetSlashingSpans(key));
        }
        
        /// <summary>
        /// >> SpanSlash
        ///  Records information about the maximum slash of a stash within a slashing span,
        ///  as well as how much reward has been paid out.
        /// </summary>
        [HttpGet("SpanSlash")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.PalletStaking.SpanRecord), 200)]
        public IActionResult GetSpanSlash(string key)
        {
            return this.Ok(_stakingStorage.GetSpanSlash(key));
        }
        
        /// <summary>
        /// >> EarliestUnappliedSlash
        ///  The earliest era for which we have a pending, unapplied slash.
        /// </summary>
        [HttpGet("EarliestUnappliedSlash")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Primitive.U32), 200)]
        public IActionResult GetEarliestUnappliedSlash()
        {
            return this.Ok(_stakingStorage.GetEarliestUnappliedSlash());
        }
        
        /// <summary>
        /// >> CurrentPlannedSession
        ///  The last planned session scheduled by the session pallet.
        /// 
        ///  This is basically in sync with the call to [`pallet_session::SessionManager::new_session`].
        /// </summary>
        [HttpGet("CurrentPlannedSession")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Primitive.U32), 200)]
        public IActionResult GetCurrentPlannedSession()
        {
            return this.Ok(_stakingStorage.GetCurrentPlannedSession());
        }
        
        /// <summary>
        /// >> StorageVersion
        ///  True if network has been upgraded to this version.
        ///  Storage version of the pallet.
        /// 
        ///  This is set to v7.0.0 for new networks.
        /// </summary>
        [HttpGet("StorageVersion")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.PalletStaking.EnumReleases), 200)]
        public IActionResult GetStorageVersion()
        {
            return this.Ok(_stakingStorage.GetStorageVersion());
        }
        
        /// <summary>
        /// >> ChillThreshold
        ///  The threshold for when users can start calling `chill_other` for other validators /
        ///  nominators. The threshold is compared to the actual number of validators / nominators
        ///  (`CountFor*`) in the system compared to the configured max (`Max*Count`).
        /// </summary>
        [HttpGet("ChillThreshold")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.SpArithmetic.Percent), 200)]
        public IActionResult GetChillThreshold()
        {
            return this.Ok(_stakingStorage.GetChillThreshold());
        }
    }
}
