//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.PalletLottery;
using Ajuna.NetApi.Model.SpCore;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using Ajuna.ServiceLayer.Attributes;
using Ajuna.ServiceLayer.Storage;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Ajuna.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// ILotteryStorage interface definition.
    /// </summary>
    public interface ILotteryStorage : IStorage
    {
        
        /// <summary>
        /// >> LotteryIndex
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetLotteryIndex();
        
        /// <summary>
        /// >> Lottery
        ///  The configuration for the current lottery.
        /// </summary>
        Ajuna.NetApi.Model.PalletLottery.LotteryConfig GetLottery();
        
        /// <summary>
        /// >> Participants
        ///  Users who have purchased a ticket. (Lottery Index, Tickets Purchased)
        /// </summary>
        BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,BaseVec<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U8,Ajuna.NetApi.Model.Types.Primitive.U8>>> GetParticipants(string key);
        
        /// <summary>
        /// >> TicketsCount
        ///  Total number of tickets sold.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetTicketsCount();
        
        /// <summary>
        /// >> Tickets
        ///  Each ticket&#39;s owner.
        /// 
        ///  May have residual storage from previous lotteries. Use `TicketsCount` to see which ones
        ///  are actually valid ticket mappings.
        /// </summary>
        Ajuna.NetApi.Model.SpCore.AccountId32 GetTickets(string key);
        
        /// <summary>
        /// >> CallIndices
        ///  The calls stored in this pallet to be used in an active lottery if configured
        ///  by `Config::ValidateCall`.
        /// </summary>
        BaseVec<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U8,Ajuna.NetApi.Model.Types.Primitive.U8>> GetCallIndices();
    }
    
    /// <summary>
    /// LotteryStorage class definition.
    /// </summary>
    public sealed class LotteryStorage : ILotteryStorage
    {
        
        /// <summary>
        /// _lotteryIndexTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _lotteryIndexTypedStorage;
        
        /// <summary>
        /// _lotteryTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.PalletLottery.LotteryConfig> _lotteryTypedStorage;
        
        /// <summary>
        /// _participantsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,BaseVec<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U8,Ajuna.NetApi.Model.Types.Primitive.U8>>>> _participantsTypedStorage;
        
        /// <summary>
        /// _ticketsCountTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _ticketsCountTypedStorage;
        
        /// <summary>
        /// _ticketsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Ajuna.NetApi.Model.SpCore.AccountId32> _ticketsTypedStorage;
        
        /// <summary>
        /// _callIndicesTypedStorage typed storage field
        /// </summary>
        private TypedStorage<BaseVec<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U8,Ajuna.NetApi.Model.Types.Primitive.U8>>> _callIndicesTypedStorage;
        
        /// <summary>
        /// LotteryStorage constructor.
        /// </summary>
        public LotteryStorage(IStorageChangeDelegate storageChangeDelegate)
        {
            this.LotteryIndexTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("Lottery.LotteryIndex", storageChangeDelegate);
            this.LotteryTypedStorage = new TypedStorage<Ajuna.NetApi.Model.PalletLottery.LotteryConfig>("Lottery.Lottery", storageChangeDelegate);
            this.ParticipantsTypedStorage = new TypedMapStorage<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,BaseVec<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U8,Ajuna.NetApi.Model.Types.Primitive.U8>>>>("Lottery.Participants", storageChangeDelegate);
            this.TicketsCountTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("Lottery.TicketsCount", storageChangeDelegate);
            this.TicketsTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.SpCore.AccountId32>("Lottery.Tickets", storageChangeDelegate);
            this.CallIndicesTypedStorage = new TypedStorage<BaseVec<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U8,Ajuna.NetApi.Model.Types.Primitive.U8>>>("Lottery.CallIndices", storageChangeDelegate);
        }
        
        /// <summary>
        /// _lotteryIndexTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> LotteryIndexTypedStorage
        {
            get
            {
                return _lotteryIndexTypedStorage;
            }
            set
            {
                _lotteryIndexTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _lotteryTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.PalletLottery.LotteryConfig> LotteryTypedStorage
        {
            get
            {
                return _lotteryTypedStorage;
            }
            set
            {
                _lotteryTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _participantsTypedStorage property
        /// </summary>
        public TypedMapStorage<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,BaseVec<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U8,Ajuna.NetApi.Model.Types.Primitive.U8>>>> ParticipantsTypedStorage
        {
            get
            {
                return _participantsTypedStorage;
            }
            set
            {
                _participantsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _ticketsCountTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> TicketsCountTypedStorage
        {
            get
            {
                return _ticketsCountTypedStorage;
            }
            set
            {
                _ticketsCountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _ticketsTypedStorage property
        /// </summary>
        public TypedMapStorage<Ajuna.NetApi.Model.SpCore.AccountId32> TicketsTypedStorage
        {
            get
            {
                return _ticketsTypedStorage;
            }
            set
            {
                _ticketsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _callIndicesTypedStorage property
        /// </summary>
        public TypedStorage<BaseVec<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U8,Ajuna.NetApi.Model.Types.Primitive.U8>>> CallIndicesTypedStorage
        {
            get
            {
                return _callIndicesTypedStorage;
            }
            set
            {
                _callIndicesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Ajuna.NetApi.SubstrateClient client)
        {
            await LotteryIndexTypedStorage.InitializeAsync(client, "Lottery", "LotteryIndex");
            await LotteryTypedStorage.InitializeAsync(client, "Lottery", "Lottery");
            await ParticipantsTypedStorage.InitializeAsync(client, "Lottery", "Participants");
            await TicketsCountTypedStorage.InitializeAsync(client, "Lottery", "TicketsCount");
            await TicketsTypedStorage.InitializeAsync(client, "Lottery", "Tickets");
            await CallIndicesTypedStorage.InitializeAsync(client, "Lottery", "CallIndices");
        }
        
        /// <summary>
        /// Implements any storage change for Lottery.LotteryIndex
        /// </summary>
        [StorageChange("Lottery", "LotteryIndex")]
        public void OnUpdateLotteryIndex(string data)
        {
            LotteryIndexTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> LotteryIndex
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetLotteryIndex()
        {
            return LotteryIndexTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Lottery.Lottery
        /// </summary>
        [StorageChange("Lottery", "Lottery")]
        public void OnUpdateLottery(string data)
        {
            LotteryTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Lottery
        ///  The configuration for the current lottery.
        /// </summary>
        public Ajuna.NetApi.Model.PalletLottery.LotteryConfig GetLottery()
        {
            return LotteryTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Lottery.Participants
        /// </summary>
        [StorageChange("Lottery", "Participants")]
        public void OnUpdateParticipants(string key, string data)
        {
            ParticipantsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Participants
        ///  Users who have purchased a ticket. (Lottery Index, Tickets Purchased)
        /// </summary>
        public BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,BaseVec<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U8,Ajuna.NetApi.Model.Types.Primitive.U8>>> GetParticipants(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ParticipantsTypedStorage.Dictionary.TryGetValue(key, out BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,BaseVec<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U8,Ajuna.NetApi.Model.Types.Primitive.U8>>> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Lottery.TicketsCount
        /// </summary>
        [StorageChange("Lottery", "TicketsCount")]
        public void OnUpdateTicketsCount(string data)
        {
            TicketsCountTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> TicketsCount
        ///  Total number of tickets sold.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetTicketsCount()
        {
            return TicketsCountTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Lottery.Tickets
        /// </summary>
        [StorageChange("Lottery", "Tickets")]
        public void OnUpdateTickets(string key, string data)
        {
            TicketsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Tickets
        ///  Each ticket&#39;s owner.
        /// 
        ///  May have residual storage from previous lotteries. Use `TicketsCount` to see which ones
        ///  are actually valid ticket mappings.
        /// </summary>
        public Ajuna.NetApi.Model.SpCore.AccountId32 GetTickets(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (TicketsTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.SpCore.AccountId32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Lottery.CallIndices
        /// </summary>
        [StorageChange("Lottery", "CallIndices")]
        public void OnUpdateCallIndices(string data)
        {
            CallIndicesTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CallIndices
        ///  The calls stored in this pallet to be used in an active lottery if configured
        ///  by `Config::ValidateCall`.
        /// </summary>
        public BaseVec<BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U8,Ajuna.NetApi.Model.Types.Primitive.U8>> GetCallIndices()
        {
            return CallIndicesTypedStorage.Get();
        }
    }
}
