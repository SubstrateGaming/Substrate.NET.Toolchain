//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.SpCore;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.ServiceLayer.Attributes;
using Ajuna.ServiceLayer.Storage;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Ajuna.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// ISudoStorage interface definition.
    /// </summary>
    public interface ISudoStorage : IStorage
    {
        
        /// <summary>
        /// >> Key
        ///  The `AccountId` of the sudo key.
        /// </summary>
        Ajuna.NetApi.Model.SpCore.AccountId32 GetKey();
    }
    
    /// <summary>
    /// SudoStorage class definition.
    /// </summary>
    public sealed class SudoStorage : ISudoStorage
    {
        
        /// <summary>
        /// _keyTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.SpCore.AccountId32> _keyTypedStorage;
        
        /// <summary>
        /// SudoStorage constructor.
        /// </summary>
        public SudoStorage(IStorageChangeDelegate storageChangeDelegate)
        {
            this.KeyTypedStorage = new TypedStorage<Ajuna.NetApi.Model.SpCore.AccountId32>("Sudo.Key", storageChangeDelegate);
        }
        
        /// <summary>
        /// _keyTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.SpCore.AccountId32> KeyTypedStorage
        {
            get
            {
                return _keyTypedStorage;
            }
            set
            {
                _keyTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Ajuna.NetApi.SubstrateClient client)
        {
            await KeyTypedStorage.InitializeAsync(client, "Sudo", "Key");
        }
        
        /// <summary>
        /// Implements any storage change for Sudo.Key
        /// </summary>
        [StorageChange("Sudo", "Key")]
        public void OnUpdateKey(string data)
        {
            KeyTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Key
        ///  The `AccountId` of the sudo key.
        /// </summary>
        public Ajuna.NetApi.Model.SpCore.AccountId32 GetKey()
        {
            return KeyTypedStorage.Get();
        }
    }
}
