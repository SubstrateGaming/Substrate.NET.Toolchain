//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.PalletAssets;
using Ajuna.NetApi.Model.SpCore;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using Ajuna.ServiceLayer.Attributes;
using Ajuna.ServiceLayer.Storage;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Ajuna.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IAssetsStorage interface definition.
    /// </summary>
    public interface IAssetsStorage : IStorage
    {
        
        /// <summary>
        /// >> Asset
        ///  Details of an asset.
        /// </summary>
        Ajuna.NetApi.Model.PalletAssets.AssetDetails GetAsset(string key);
        
        /// <summary>
        /// >> Account
        ///  The number of units of assets held by any given account.
        /// </summary>
        Ajuna.NetApi.Model.PalletAssets.AssetBalance GetAccount(string key);
        
        /// <summary>
        /// >> Approvals
        ///  Approved balance transfers. First balance is the amount approved for transfer. Second
        ///  is the amount of `T::Currency` reserved for storing this.
        ///  First key is the asset ID, second key is the owner and third key is the delegate.
        /// </summary>
        Ajuna.NetApi.Model.PalletAssets.Approval GetApprovals(string key);
        
        /// <summary>
        /// >> Metadata
        ///  Metadata of an asset.
        /// </summary>
        Ajuna.NetApi.Model.PalletAssets.AssetMetadata GetMetadata(string key);
    }
    
    /// <summary>
    /// AssetsStorage class definition.
    /// </summary>
    public sealed class AssetsStorage : IAssetsStorage
    {
        
        /// <summary>
        /// _assetTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Ajuna.NetApi.Model.PalletAssets.AssetDetails> _assetTypedStorage;
        
        /// <summary>
        /// _accountTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Ajuna.NetApi.Model.PalletAssets.AssetBalance> _accountTypedStorage;
        
        /// <summary>
        /// _approvalsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Ajuna.NetApi.Model.PalletAssets.Approval> _approvalsTypedStorage;
        
        /// <summary>
        /// _metadataTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Ajuna.NetApi.Model.PalletAssets.AssetMetadata> _metadataTypedStorage;
        
        /// <summary>
        /// AssetsStorage constructor.
        /// </summary>
        public AssetsStorage(IStorageChangeDelegate storageChangeDelegate)
        {
            this.AssetTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.PalletAssets.AssetDetails>("Assets.Asset", storageChangeDelegate);
            this.AccountTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.PalletAssets.AssetBalance>("Assets.Account", storageChangeDelegate);
            this.ApprovalsTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.PalletAssets.Approval>("Assets.Approvals", storageChangeDelegate);
            this.MetadataTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.PalletAssets.AssetMetadata>("Assets.Metadata", storageChangeDelegate);
        }
        
        /// <summary>
        /// _assetTypedStorage property
        /// </summary>
        public TypedMapStorage<Ajuna.NetApi.Model.PalletAssets.AssetDetails> AssetTypedStorage
        {
            get
            {
                return _assetTypedStorage;
            }
            set
            {
                _assetTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _accountTypedStorage property
        /// </summary>
        public TypedMapStorage<Ajuna.NetApi.Model.PalletAssets.AssetBalance> AccountTypedStorage
        {
            get
            {
                return _accountTypedStorage;
            }
            set
            {
                _accountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _approvalsTypedStorage property
        /// </summary>
        public TypedMapStorage<Ajuna.NetApi.Model.PalletAssets.Approval> ApprovalsTypedStorage
        {
            get
            {
                return _approvalsTypedStorage;
            }
            set
            {
                _approvalsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _metadataTypedStorage property
        /// </summary>
        public TypedMapStorage<Ajuna.NetApi.Model.PalletAssets.AssetMetadata> MetadataTypedStorage
        {
            get
            {
                return _metadataTypedStorage;
            }
            set
            {
                _metadataTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Ajuna.NetApi.SubstrateClient client)
        {
            await AssetTypedStorage.InitializeAsync(client, "Assets", "Asset");
            await AccountTypedStorage.InitializeAsync(client, "Assets", "Account");
            await ApprovalsTypedStorage.InitializeAsync(client, "Assets", "Approvals");
            await MetadataTypedStorage.InitializeAsync(client, "Assets", "Metadata");
        }
        
        /// <summary>
        /// Implements any storage change for Assets.Asset
        /// </summary>
        [StorageChange("Assets", "Asset")]
        public void OnUpdateAsset(string key, string data)
        {
            AssetTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Asset
        ///  Details of an asset.
        /// </summary>
        public Ajuna.NetApi.Model.PalletAssets.AssetDetails GetAsset(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AssetTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.PalletAssets.AssetDetails result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Assets.Account
        /// </summary>
        [StorageChange("Assets", "Account")]
        public void OnUpdateAccount(string key, string data)
        {
            AccountTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Account
        ///  The number of units of assets held by any given account.
        /// </summary>
        public Ajuna.NetApi.Model.PalletAssets.AssetBalance GetAccount(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (AccountTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.PalletAssets.AssetBalance result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Assets.Approvals
        /// </summary>
        [StorageChange("Assets", "Approvals")]
        public void OnUpdateApprovals(string key, string data)
        {
            ApprovalsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Approvals
        ///  Approved balance transfers. First balance is the amount approved for transfer. Second
        ///  is the amount of `T::Currency` reserved for storing this.
        ///  First key is the asset ID, second key is the owner and third key is the delegate.
        /// </summary>
        public Ajuna.NetApi.Model.PalletAssets.Approval GetApprovals(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ApprovalsTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.PalletAssets.Approval result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Assets.Metadata
        /// </summary>
        [StorageChange("Assets", "Metadata")]
        public void OnUpdateMetadata(string key, string data)
        {
            MetadataTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Metadata
        ///  Metadata of an asset.
        /// </summary>
        public Ajuna.NetApi.Model.PalletAssets.AssetMetadata GetMetadata(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MetadataTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.PalletAssets.AssetMetadata result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
