//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.PalletConnectfour;
using Ajuna.NetApi.Model.PrimitiveTypes;
using Ajuna.NetApi.Model.SpCore;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using Ajuna.ServiceLayer.Attributes;
using Ajuna.ServiceLayer.Storage;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Ajuna.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IConnectFourStorage interface definition.
    /// </summary>
    public interface IConnectFourStorage : IStorage
    {
        
        /// <summary>
        /// >> Something
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetSomething();
        
        /// <summary>
        /// >> FounderKey
        /// </summary>
        Ajuna.NetApi.Model.SpCore.AccountId32 GetFounderKey();
        
        /// <summary>
        /// >> Boards
        ///  Store all boards that are currently being played.
        /// </summary>
        Ajuna.NetApi.Model.PalletConnectfour.BoardStruct GetBoards(string key);
        
        /// <summary>
        /// >> PlayerBoard
        ///  Store players active board, currently only one board per player allowed.
        /// </summary>
        Ajuna.NetApi.Model.PrimitiveTypes.H256 GetPlayerBoard(string key);
        
        /// <summary>
        /// >> BoardSchedules
        ///  Store boards open schedules.
        /// </summary>
        BaseOpt<BaseVec<Ajuna.NetApi.Model.Types.Primitive.U8>> GetBoardSchedules(string key);
        
        /// <summary>
        /// >> Nonce
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U64 GetNonce();
    }
    
    /// <summary>
    /// ConnectFourStorage class definition.
    /// </summary>
    public sealed class ConnectFourStorage : IConnectFourStorage
    {
        
        /// <summary>
        /// _somethingTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _somethingTypedStorage;
        
        /// <summary>
        /// _founderKeyTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.SpCore.AccountId32> _founderKeyTypedStorage;
        
        /// <summary>
        /// _boardsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Ajuna.NetApi.Model.PalletConnectfour.BoardStruct> _boardsTypedStorage;
        
        /// <summary>
        /// _playerBoardTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Ajuna.NetApi.Model.PrimitiveTypes.H256> _playerBoardTypedStorage;
        
        /// <summary>
        /// _boardSchedulesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<BaseOpt<BaseVec<Ajuna.NetApi.Model.Types.Primitive.U8>>> _boardSchedulesTypedStorage;
        
        /// <summary>
        /// _nonceTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U64> _nonceTypedStorage;
        
        /// <summary>
        /// ConnectFourStorage constructor.
        /// </summary>
        public ConnectFourStorage(IStorageChangeDelegate storageChangeDelegate)
        {
            this.SomethingTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("ConnectFour.Something", storageChangeDelegate);
            this.FounderKeyTypedStorage = new TypedStorage<Ajuna.NetApi.Model.SpCore.AccountId32>("ConnectFour.FounderKey", storageChangeDelegate);
            this.BoardsTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.PalletConnectfour.BoardStruct>("ConnectFour.Boards", storageChangeDelegate);
            this.PlayerBoardTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.PrimitiveTypes.H256>("ConnectFour.PlayerBoard", storageChangeDelegate);
            this.BoardSchedulesTypedStorage = new TypedMapStorage<BaseOpt<BaseVec<Ajuna.NetApi.Model.Types.Primitive.U8>>>("ConnectFour.BoardSchedules", storageChangeDelegate);
            this.NonceTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U64>("ConnectFour.Nonce", storageChangeDelegate);
        }
        
        /// <summary>
        /// _somethingTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> SomethingTypedStorage
        {
            get
            {
                return _somethingTypedStorage;
            }
            set
            {
                _somethingTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _founderKeyTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.SpCore.AccountId32> FounderKeyTypedStorage
        {
            get
            {
                return _founderKeyTypedStorage;
            }
            set
            {
                _founderKeyTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _boardsTypedStorage property
        /// </summary>
        public TypedMapStorage<Ajuna.NetApi.Model.PalletConnectfour.BoardStruct> BoardsTypedStorage
        {
            get
            {
                return _boardsTypedStorage;
            }
            set
            {
                _boardsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _playerBoardTypedStorage property
        /// </summary>
        public TypedMapStorage<Ajuna.NetApi.Model.PrimitiveTypes.H256> PlayerBoardTypedStorage
        {
            get
            {
                return _playerBoardTypedStorage;
            }
            set
            {
                _playerBoardTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _boardSchedulesTypedStorage property
        /// </summary>
        public TypedMapStorage<BaseOpt<BaseVec<Ajuna.NetApi.Model.Types.Primitive.U8>>> BoardSchedulesTypedStorage
        {
            get
            {
                return _boardSchedulesTypedStorage;
            }
            set
            {
                _boardSchedulesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nonceTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U64> NonceTypedStorage
        {
            get
            {
                return _nonceTypedStorage;
            }
            set
            {
                _nonceTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Ajuna.NetApi.SubstrateClient client)
        {
            await SomethingTypedStorage.InitializeAsync(client, "ConnectFour", "Something");
            await FounderKeyTypedStorage.InitializeAsync(client, "ConnectFour", "FounderKey");
            await BoardsTypedStorage.InitializeAsync(client, "ConnectFour", "Boards");
            await PlayerBoardTypedStorage.InitializeAsync(client, "ConnectFour", "PlayerBoard");
            await BoardSchedulesTypedStorage.InitializeAsync(client, "ConnectFour", "BoardSchedules");
            await NonceTypedStorage.InitializeAsync(client, "ConnectFour", "Nonce");
        }
        
        /// <summary>
        /// Implements any storage change for ConnectFour.Something
        /// </summary>
        [StorageChange("ConnectFour", "Something")]
        public void OnUpdateSomething(string data)
        {
            SomethingTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Something
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetSomething()
        {
            return SomethingTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ConnectFour.FounderKey
        /// </summary>
        [StorageChange("ConnectFour", "FounderKey")]
        public void OnUpdateFounderKey(string data)
        {
            FounderKeyTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> FounderKey
        /// </summary>
        public Ajuna.NetApi.Model.SpCore.AccountId32 GetFounderKey()
        {
            return FounderKeyTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ConnectFour.Boards
        /// </summary>
        [StorageChange("ConnectFour", "Boards")]
        public void OnUpdateBoards(string key, string data)
        {
            BoardsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Boards
        ///  Store all boards that are currently being played.
        /// </summary>
        public Ajuna.NetApi.Model.PalletConnectfour.BoardStruct GetBoards(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (BoardsTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.PalletConnectfour.BoardStruct result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ConnectFour.PlayerBoard
        /// </summary>
        [StorageChange("ConnectFour", "PlayerBoard")]
        public void OnUpdatePlayerBoard(string key, string data)
        {
            PlayerBoardTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> PlayerBoard
        ///  Store players active board, currently only one board per player allowed.
        /// </summary>
        public Ajuna.NetApi.Model.PrimitiveTypes.H256 GetPlayerBoard(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PlayerBoardTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.PrimitiveTypes.H256 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ConnectFour.BoardSchedules
        /// </summary>
        [StorageChange("ConnectFour", "BoardSchedules")]
        public void OnUpdateBoardSchedules(string key, string data)
        {
            BoardSchedulesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> BoardSchedules
        ///  Store boards open schedules.
        /// </summary>
        public BaseOpt<BaseVec<Ajuna.NetApi.Model.Types.Primitive.U8>> GetBoardSchedules(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (BoardSchedulesTypedStorage.Dictionary.TryGetValue(key, out BaseOpt<BaseVec<Ajuna.NetApi.Model.Types.Primitive.U8>> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ConnectFour.Nonce
        /// </summary>
        [StorageChange("ConnectFour", "Nonce")]
        public void OnUpdateNonce(string data)
        {
            NonceTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Nonce
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U64 GetNonce()
        {
            return NonceTypedStorage.Get();
        }
    }
}
