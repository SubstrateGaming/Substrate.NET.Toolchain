//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.PalletElectionsPhragmen;
using Ajuna.NetApi.Model.SpCore;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using Ajuna.ServiceLayer.Attributes;
using Ajuna.ServiceLayer.Storage;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Ajuna.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IElectionsStorage interface definition.
    /// </summary>
    public interface IElectionsStorage : IStorage
    {
        
        /// <summary>
        /// >> Members
        ///  The current elected members.
        /// 
        ///  Invariant: Always sorted based on account id.
        /// </summary>
        BaseVec<Ajuna.NetApi.Model.PalletElectionsPhragmen.SeatHolder> GetMembers();
        
        /// <summary>
        /// >> RunnersUp
        ///  The current reserved runners-up.
        /// 
        ///  Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the
        ///  last (i.e. _best_) runner-up will be replaced.
        /// </summary>
        BaseVec<Ajuna.NetApi.Model.PalletElectionsPhragmen.SeatHolder> GetRunnersUp();
        
        /// <summary>
        /// >> Candidates
        ///  The present candidate list. A current member or runner-up can never enter this vector
        ///  and is always implicitly assumed to be a candidate.
        /// 
        ///  Second element is the deposit.
        /// 
        ///  Invariant: Always sorted based on account id.
        /// </summary>
        BaseVec<BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32,Ajuna.NetApi.Model.Types.Primitive.U128>> GetCandidates();
        
        /// <summary>
        /// >> ElectionRounds
        ///  The total number of vote rounds that have happened, excluding the upcoming one.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetElectionRounds();
        
        /// <summary>
        /// >> Voting
        ///  Votes and locked stake of a particular voter.
        /// 
        ///  TWOX-NOTE: SAFE as `AccountId` is a crypto hash.
        /// </summary>
        Ajuna.NetApi.Model.PalletElectionsPhragmen.Voter GetVoting(string key);
    }
    
    /// <summary>
    /// ElectionsStorage class definition.
    /// </summary>
    public sealed class ElectionsStorage : IElectionsStorage
    {
        
        /// <summary>
        /// _membersTypedStorage typed storage field
        /// </summary>
        private TypedStorage<BaseVec<Ajuna.NetApi.Model.PalletElectionsPhragmen.SeatHolder>> _membersTypedStorage;
        
        /// <summary>
        /// _runnersUpTypedStorage typed storage field
        /// </summary>
        private TypedStorage<BaseVec<Ajuna.NetApi.Model.PalletElectionsPhragmen.SeatHolder>> _runnersUpTypedStorage;
        
        /// <summary>
        /// _candidatesTypedStorage typed storage field
        /// </summary>
        private TypedStorage<BaseVec<BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32,Ajuna.NetApi.Model.Types.Primitive.U128>>> _candidatesTypedStorage;
        
        /// <summary>
        /// _electionRoundsTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _electionRoundsTypedStorage;
        
        /// <summary>
        /// _votingTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Ajuna.NetApi.Model.PalletElectionsPhragmen.Voter> _votingTypedStorage;
        
        /// <summary>
        /// ElectionsStorage constructor.
        /// </summary>
        public ElectionsStorage(IStorageChangeDelegate storageChangeDelegate)
        {
            this.MembersTypedStorage = new TypedStorage<BaseVec<Ajuna.NetApi.Model.PalletElectionsPhragmen.SeatHolder>>("Elections.Members", storageChangeDelegate);
            this.RunnersUpTypedStorage = new TypedStorage<BaseVec<Ajuna.NetApi.Model.PalletElectionsPhragmen.SeatHolder>>("Elections.RunnersUp", storageChangeDelegate);
            this.CandidatesTypedStorage = new TypedStorage<BaseVec<BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32,Ajuna.NetApi.Model.Types.Primitive.U128>>>("Elections.Candidates", storageChangeDelegate);
            this.ElectionRoundsTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("Elections.ElectionRounds", storageChangeDelegate);
            this.VotingTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.PalletElectionsPhragmen.Voter>("Elections.Voting", storageChangeDelegate);
        }
        
        /// <summary>
        /// _membersTypedStorage property
        /// </summary>
        public TypedStorage<BaseVec<Ajuna.NetApi.Model.PalletElectionsPhragmen.SeatHolder>> MembersTypedStorage
        {
            get
            {
                return _membersTypedStorage;
            }
            set
            {
                _membersTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _runnersUpTypedStorage property
        /// </summary>
        public TypedStorage<BaseVec<Ajuna.NetApi.Model.PalletElectionsPhragmen.SeatHolder>> RunnersUpTypedStorage
        {
            get
            {
                return _runnersUpTypedStorage;
            }
            set
            {
                _runnersUpTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _candidatesTypedStorage property
        /// </summary>
        public TypedStorage<BaseVec<BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32,Ajuna.NetApi.Model.Types.Primitive.U128>>> CandidatesTypedStorage
        {
            get
            {
                return _candidatesTypedStorage;
            }
            set
            {
                _candidatesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _electionRoundsTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> ElectionRoundsTypedStorage
        {
            get
            {
                return _electionRoundsTypedStorage;
            }
            set
            {
                _electionRoundsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _votingTypedStorage property
        /// </summary>
        public TypedMapStorage<Ajuna.NetApi.Model.PalletElectionsPhragmen.Voter> VotingTypedStorage
        {
            get
            {
                return _votingTypedStorage;
            }
            set
            {
                _votingTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Ajuna.NetApi.SubstrateClient client)
        {
            await MembersTypedStorage.InitializeAsync(client, "Elections", "Members");
            await RunnersUpTypedStorage.InitializeAsync(client, "Elections", "RunnersUp");
            await CandidatesTypedStorage.InitializeAsync(client, "Elections", "Candidates");
            await ElectionRoundsTypedStorage.InitializeAsync(client, "Elections", "ElectionRounds");
            await VotingTypedStorage.InitializeAsync(client, "Elections", "Voting");
        }
        
        /// <summary>
        /// Implements any storage change for Elections.Members
        /// </summary>
        [StorageChange("Elections", "Members")]
        public void OnUpdateMembers(string data)
        {
            MembersTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Members
        ///  The current elected members.
        /// 
        ///  Invariant: Always sorted based on account id.
        /// </summary>
        public BaseVec<Ajuna.NetApi.Model.PalletElectionsPhragmen.SeatHolder> GetMembers()
        {
            return MembersTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Elections.RunnersUp
        /// </summary>
        [StorageChange("Elections", "RunnersUp")]
        public void OnUpdateRunnersUp(string data)
        {
            RunnersUpTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> RunnersUp
        ///  The current reserved runners-up.
        /// 
        ///  Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the
        ///  last (i.e. _best_) runner-up will be replaced.
        /// </summary>
        public BaseVec<Ajuna.NetApi.Model.PalletElectionsPhragmen.SeatHolder> GetRunnersUp()
        {
            return RunnersUpTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Elections.Candidates
        /// </summary>
        [StorageChange("Elections", "Candidates")]
        public void OnUpdateCandidates(string data)
        {
            CandidatesTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Candidates
        ///  The present candidate list. A current member or runner-up can never enter this vector
        ///  and is always implicitly assumed to be a candidate.
        /// 
        ///  Second element is the deposit.
        /// 
        ///  Invariant: Always sorted based on account id.
        /// </summary>
        public BaseVec<BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32,Ajuna.NetApi.Model.Types.Primitive.U128>> GetCandidates()
        {
            return CandidatesTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Elections.ElectionRounds
        /// </summary>
        [StorageChange("Elections", "ElectionRounds")]
        public void OnUpdateElectionRounds(string data)
        {
            ElectionRoundsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ElectionRounds
        ///  The total number of vote rounds that have happened, excluding the upcoming one.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetElectionRounds()
        {
            return ElectionRoundsTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Elections.Voting
        /// </summary>
        [StorageChange("Elections", "Voting")]
        public void OnUpdateVoting(string key, string data)
        {
            VotingTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Voting
        ///  Votes and locked stake of a particular voter.
        /// 
        ///  TWOX-NOTE: SAFE as `AccountId` is a crypto hash.
        /// </summary>
        public Ajuna.NetApi.Model.PalletElectionsPhragmen.Voter GetVoting(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (VotingTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.PalletElectionsPhragmen.Voter result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
