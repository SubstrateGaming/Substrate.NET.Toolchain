//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.Base;
using Ajuna.NetApi.Model.Extrinsics;
using Ajuna.NetApi.Model.FrameSupport;
using Ajuna.NetApi.Model.Meta;
using Ajuna.NetApi.Model.PalletElectionProviderMultiPhase;
using Ajuna.NetApi.Model.SpCore;
using Ajuna.NetApi.Model.SpNposElections;
using Ajuna.NetApi.Model.Types;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Ajuna.NetApi.Model.PalletElectionProviderMultiPhase
{
    
    
    public sealed class ElectionProviderMultiPhaseStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public ElectionProviderMultiPhaseStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ElectionProviderMultiPhase", "Round"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ElectionProviderMultiPhase", "CurrentPhase"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.PalletElectionProviderMultiPhase.EnumPhase)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ElectionProviderMultiPhase", "QueuedSolution"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.PalletElectionProviderMultiPhase.ReadySolution)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ElectionProviderMultiPhase", "Snapshot"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.PalletElectionProviderMultiPhase.RoundSnapshot)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ElectionProviderMultiPhase", "DesiredTargets"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ElectionProviderMultiPhase", "SnapshotMetadata"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.PalletElectionProviderMultiPhase.SolutionOrSnapshotSize)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ElectionProviderMultiPhase", "SignedSubmissionNextIndex"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ElectionProviderMultiPhase", "SignedSubmissionIndices"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.FrameSupport.BoundedBTreeMap)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ElectionProviderMultiPhase", "SignedSubmissionsMap"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Ajuna.NetApi.Model.Types.Primitive.U32), typeof(Ajuna.NetApi.Model.PalletElectionProviderMultiPhase.SignedSubmission)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ElectionProviderMultiPhase", "MinimumUntrustedScore"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Base.Arr3U128)));
        }
        
        /// <summary>
        /// >> RoundParams
        ///  Internal counter for the number of rounds.
        /// 
        ///  This is useful for de-duplication of transactions submitted to the pool, and general
        ///  diagnostics of the pallet.
        /// 
        ///  This is merely incremented once per every time that an upstream `elect` is called.
        /// </summary>
        public static string RoundParams()
        {
            return RequestGenerator.GetStorage("ElectionProviderMultiPhase", "Round", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Round
        ///  Internal counter for the number of rounds.
        /// 
        ///  This is useful for de-duplication of transactions submitted to the pool, and general
        ///  diagnostics of the pallet.
        /// 
        ///  This is merely incremented once per every time that an upstream `elect` is called.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U32> Round(CancellationToken token)
        {
            string parameters = ElectionProviderMultiPhaseStorage.RoundParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> CurrentPhaseParams
        ///  Current phase.
        /// </summary>
        public static string CurrentPhaseParams()
        {
            return RequestGenerator.GetStorage("ElectionProviderMultiPhase", "CurrentPhase", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrentPhase
        ///  Current phase.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.PalletElectionProviderMultiPhase.EnumPhase> CurrentPhase(CancellationToken token)
        {
            string parameters = ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.PalletElectionProviderMultiPhase.EnumPhase>(parameters, token);
        }
        
        /// <summary>
        /// >> QueuedSolutionParams
        ///  Current best solution, signed or unsigned, queued to be returned upon `elect`.
        /// </summary>
        public static string QueuedSolutionParams()
        {
            return RequestGenerator.GetStorage("ElectionProviderMultiPhase", "QueuedSolution", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> QueuedSolution
        ///  Current best solution, signed or unsigned, queued to be returned upon `elect`.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.PalletElectionProviderMultiPhase.ReadySolution> QueuedSolution(CancellationToken token)
        {
            string parameters = ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.PalletElectionProviderMultiPhase.ReadySolution>(parameters, token);
        }
        
        /// <summary>
        /// >> SnapshotParams
        ///  Snapshot data of the round.
        /// 
        ///  This is created at the beginning of the signed phase and cleared upon calling `elect`.
        /// </summary>
        public static string SnapshotParams()
        {
            return RequestGenerator.GetStorage("ElectionProviderMultiPhase", "Snapshot", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Snapshot
        ///  Snapshot data of the round.
        /// 
        ///  This is created at the beginning of the signed phase and cleared upon calling `elect`.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.PalletElectionProviderMultiPhase.RoundSnapshot> Snapshot(CancellationToken token)
        {
            string parameters = ElectionProviderMultiPhaseStorage.SnapshotParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.PalletElectionProviderMultiPhase.RoundSnapshot>(parameters, token);
        }
        
        /// <summary>
        /// >> DesiredTargetsParams
        ///  Desired number of targets to elect for this round.
        /// 
        ///  Only exists when [`Snapshot`] is present.
        /// </summary>
        public static string DesiredTargetsParams()
        {
            return RequestGenerator.GetStorage("ElectionProviderMultiPhase", "DesiredTargets", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> DesiredTargets
        ///  Desired number of targets to elect for this round.
        /// 
        ///  Only exists when [`Snapshot`] is present.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U32> DesiredTargets(CancellationToken token)
        {
            string parameters = ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> SnapshotMetadataParams
        ///  The metadata of the [`RoundSnapshot`]
        /// 
        ///  Only exists when [`Snapshot`] is present.
        /// </summary>
        public static string SnapshotMetadataParams()
        {
            return RequestGenerator.GetStorage("ElectionProviderMultiPhase", "SnapshotMetadata", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> SnapshotMetadata
        ///  The metadata of the [`RoundSnapshot`]
        /// 
        ///  Only exists when [`Snapshot`] is present.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.PalletElectionProviderMultiPhase.SolutionOrSnapshotSize> SnapshotMetadata(CancellationToken token)
        {
            string parameters = ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.PalletElectionProviderMultiPhase.SolutionOrSnapshotSize>(parameters, token);
        }
        
        /// <summary>
        /// >> SignedSubmissionNextIndexParams
        ///  The next index to be assigned to an incoming signed submission.
        /// 
        ///  Every accepted submission is assigned a unique index; that index is bound to that particular
        ///  submission for the duration of the election. On election finalization, the next index is
        ///  reset to 0.
        /// 
        ///  We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its
        ///  capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,
        ///  because iteration is slow. Instead, we store the value here.
        /// </summary>
        public static string SignedSubmissionNextIndexParams()
        {
            return RequestGenerator.GetStorage("ElectionProviderMultiPhase", "SignedSubmissionNextIndex", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> SignedSubmissionNextIndex
        ///  The next index to be assigned to an incoming signed submission.
        /// 
        ///  Every accepted submission is assigned a unique index; that index is bound to that particular
        ///  submission for the duration of the election. On election finalization, the next index is
        ///  reset to 0.
        /// 
        ///  We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its
        ///  capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,
        ///  because iteration is slow. Instead, we store the value here.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U32> SignedSubmissionNextIndex(CancellationToken token)
        {
            string parameters = ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> SignedSubmissionIndicesParams
        ///  A sorted, bounded set of `(score, index)`, where each `index` points to a value in
        ///  `SignedSubmissions`.
        /// 
        ///  We never need to process more than a single signed submission at a time. Signed submissions
        ///  can be quite large, so we're willing to pay the cost of multiple database accesses to access
        ///  them one at a time instead of reading and decoding all of them at once.
        /// </summary>
        public static string SignedSubmissionIndicesParams()
        {
            return RequestGenerator.GetStorage("ElectionProviderMultiPhase", "SignedSubmissionIndices", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> SignedSubmissionIndices
        ///  A sorted, bounded set of `(score, index)`, where each `index` points to a value in
        ///  `SignedSubmissions`.
        /// 
        ///  We never need to process more than a single signed submission at a time. Signed submissions
        ///  can be quite large, so we're willing to pay the cost of multiple database accesses to access
        ///  them one at a time instead of reading and decoding all of them at once.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.FrameSupport.BoundedBTreeMap> SignedSubmissionIndices(CancellationToken token)
        {
            string parameters = ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.FrameSupport.BoundedBTreeMap>(parameters, token);
        }
        
        /// <summary>
        /// >> SignedSubmissionsMapParams
        ///  Unchecked, signed solutions.
        /// 
        ///  Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while
        ///  allowing us to keep only a single one in memory at a time.
        /// 
        ///  Twox note: the key of the map is an auto-incrementing index which users cannot inspect or
        ///  affect; we shouldn't need a cryptographically secure hasher.
        /// </summary>
        public static string SignedSubmissionsMapParams(Ajuna.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("ElectionProviderMultiPhase", "SignedSubmissionsMap", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SignedSubmissionsMap
        ///  Unchecked, signed solutions.
        /// 
        ///  Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while
        ///  allowing us to keep only a single one in memory at a time.
        /// 
        ///  Twox note: the key of the map is an auto-incrementing index which users cannot inspect or
        ///  affect; we shouldn't need a cryptographically secure hasher.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.PalletElectionProviderMultiPhase.SignedSubmission> SignedSubmissionsMap(Ajuna.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            string parameters = ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.PalletElectionProviderMultiPhase.SignedSubmission>(parameters, token);
        }
        
        /// <summary>
        /// >> MinimumUntrustedScoreParams
        ///  The minimum score that each 'untrusted' solution must attain in order to be considered
        ///  feasible.
        /// 
        ///  Can be set via `set_minimum_untrusted_score`.
        /// </summary>
        public static string MinimumUntrustedScoreParams()
        {
            return RequestGenerator.GetStorage("ElectionProviderMultiPhase", "MinimumUntrustedScore", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MinimumUntrustedScore
        ///  The minimum score that each 'untrusted' solution must attain in order to be considered
        ///  feasible.
        /// 
        ///  Can be set via `set_minimum_untrusted_score`.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Base.Arr3U128> MinimumUntrustedScore(CancellationToken token)
        {
            string parameters = ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Base.Arr3U128>(parameters, token);
        }
    }
    
    public sealed class ElectionProviderMultiPhaseCalls
    {
        
        /// <summary>
        /// >> submit_unsigned
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SubmitUnsigned(Ajuna.NetApi.Model.PalletElectionProviderMultiPhase.RawSolution raw_solution, Ajuna.NetApi.Model.PalletElectionProviderMultiPhase.SolutionOrSnapshotSize witness)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(raw_solution.Encode());
            byteArray.AddRange(witness.Encode());
            return new Method(8, "ElectionProviderMultiPhase", 0, "submit_unsigned", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_minimum_untrusted_score
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetMinimumUntrustedScore(BaseOpt<Ajuna.NetApi.Model.Base.Arr3U128> maybe_next_score)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(maybe_next_score.Encode());
            return new Method(8, "ElectionProviderMultiPhase", 1, "set_minimum_untrusted_score", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_emergency_election_result
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetEmergencyElectionResult(BaseVec<BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32,Ajuna.NetApi.Model.SpNposElections.Support>> supports)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(supports.Encode());
            return new Method(8, "ElectionProviderMultiPhase", 2, "set_emergency_election_result", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> submit
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Submit(Ajuna.NetApi.Model.PalletElectionProviderMultiPhase.RawSolution raw_solution, Ajuna.NetApi.Model.Types.Primitive.U32 num_signed_submissions)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(raw_solution.Encode());
            byteArray.AddRange(num_signed_submissions.Encode());
            return new Method(8, "ElectionProviderMultiPhase", 3, "submit", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> SolutionStored
    /// A solution was stored with the given compute.
    /// 
    /// If the solution is signed, this means that it hasn't yet been processed. If the
    /// solution is unsigned, this means that it has also been processed.
    /// 
    /// The `bool` is `true` when a previous solution was ejected to make room for this one.
    /// </summary>
    public sealed class EventSolutionStored : BaseTuple<Ajuna.NetApi.Model.PalletElectionProviderMultiPhase.EnumElectionCompute, Ajuna.NetApi.Model.Types.Primitive.Bool>
    {
    }
    
    /// <summary>
    /// >> ElectionFinalized
    /// The election has been finalized, with `Some` of the given computation, or else if the
    /// election failed, `None`.
    /// </summary>
    public sealed class EventElectionFinalized : BaseTuple<BaseOpt<Ajuna.NetApi.Model.PalletElectionProviderMultiPhase.EnumElectionCompute>>
    {
    }
    
    /// <summary>
    /// >> Rewarded
    /// An account has been rewarded for their signed submission being finalized.
    /// </summary>
    public sealed class EventRewarded : BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32, Ajuna.NetApi.Model.Types.Primitive.U128>
    {
    }
    
    /// <summary>
    /// >> Slashed
    /// An account has been slashed for submitting an invalid signed submission.
    /// </summary>
    public sealed class EventSlashed : BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32, Ajuna.NetApi.Model.Types.Primitive.U128>
    {
    }
    
    /// <summary>
    /// >> SignedPhaseStarted
    /// The signed phase of the given round has started.
    /// </summary>
    public sealed class EventSignedPhaseStarted : BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32>
    {
    }
    
    /// <summary>
    /// >> UnsignedPhaseStarted
    /// The unsigned phase of the given round has started.
    /// </summary>
    public sealed class EventUnsignedPhaseStarted : BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32>
    {
    }
    
    public enum ElectionProviderMultiPhaseErrors
    {
        
        /// <summary>
        /// >> PreDispatchEarlySubmission
        /// Submission was too early.
        /// </summary>
        PreDispatchEarlySubmission,
        
        /// <summary>
        /// >> PreDispatchWrongWinnerCount
        /// Wrong number of winners presented.
        /// </summary>
        PreDispatchWrongWinnerCount,
        
        /// <summary>
        /// >> PreDispatchWeakSubmission
        /// Submission was too weak, score-wise.
        /// </summary>
        PreDispatchWeakSubmission,
        
        /// <summary>
        /// >> SignedQueueFull
        /// The queue was full, and the solution was not better than any of the existing ones.
        /// </summary>
        SignedQueueFull,
        
        /// <summary>
        /// >> SignedCannotPayDeposit
        /// The origin failed to pay the deposit.
        /// </summary>
        SignedCannotPayDeposit,
        
        /// <summary>
        /// >> SignedInvalidWitness
        /// Witness data to dispatchable is invalid.
        /// </summary>
        SignedInvalidWitness,
        
        /// <summary>
        /// >> SignedTooMuchWeight
        /// The signed submission consumes too much weight
        /// </summary>
        SignedTooMuchWeight,
        
        /// <summary>
        /// >> OcwCallWrongEra
        /// OCW submitted solution for wrong round
        /// </summary>
        OcwCallWrongEra,
        
        /// <summary>
        /// >> MissingSnapshotMetadata
        /// Snapshot metadata should exist but didn't.
        /// </summary>
        MissingSnapshotMetadata,
        
        /// <summary>
        /// >> InvalidSubmissionIndex
        /// `Self::insert_submission` returned an invalid index.
        /// </summary>
        InvalidSubmissionIndex,
        
        /// <summary>
        /// >> CallNotAllowed
        /// The call is not allowed at this point.
        /// </summary>
        CallNotAllowed,
    }
}
