//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.Base;
using Ajuna.NetApi.Model.Extrinsics;
using Ajuna.NetApi.Model.Meta;
using Ajuna.NetApi.Model.NodeRuntime;
using Ajuna.NetApi.Model.PalletMultisig;
using Ajuna.NetApi.Model.SpCore;
using Ajuna.NetApi.Model.Types;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Ajuna.NetApi.Model.PalletMultisig
{
    
    
    public sealed class MultisigStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public MultisigStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Multisig", "Multisigs"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32,Ajuna.NetApi.Model.Base.Arr32U8>), typeof(Ajuna.NetApi.Model.PalletMultisig.Multisig)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Multisig", "Calls"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Ajuna.NetApi.Model.Base.Arr32U8), typeof(BaseTuple<BaseVec<Ajuna.NetApi.Model.Types.Primitive.U8>,Ajuna.NetApi.Model.SpCore.AccountId32,Ajuna.NetApi.Model.Types.Primitive.U128>)));
        }
        
        /// <summary>
        /// >> MultisigsParams
        ///  The set of open multisig operations.
        /// </summary>
        public static string MultisigsParams(BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32,Ajuna.NetApi.Model.Base.Arr32U8> key)
        {
            return RequestGenerator.GetStorage("Multisig", "Multisigs", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> Multisigs
        ///  The set of open multisig operations.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.PalletMultisig.Multisig> Multisigs(BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32,Ajuna.NetApi.Model.Base.Arr32U8> key, CancellationToken token)
        {
            string parameters = MultisigStorage.MultisigsParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.PalletMultisig.Multisig>(parameters, token);
        }
        
        /// <summary>
        /// >> CallsParams
        /// </summary>
        public static string CallsParams(Ajuna.NetApi.Model.Base.Arr32U8 key)
        {
            return RequestGenerator.GetStorage("Multisig", "Calls", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> Calls
        /// </summary>
        public async Task<BaseTuple<BaseVec<Ajuna.NetApi.Model.Types.Primitive.U8>,Ajuna.NetApi.Model.SpCore.AccountId32,Ajuna.NetApi.Model.Types.Primitive.U128>> Calls(Ajuna.NetApi.Model.Base.Arr32U8 key, CancellationToken token)
        {
            string parameters = MultisigStorage.CallsParams(key);
            return await _client.GetStorageAsync<BaseTuple<BaseVec<Ajuna.NetApi.Model.Types.Primitive.U8>,Ajuna.NetApi.Model.SpCore.AccountId32,Ajuna.NetApi.Model.Types.Primitive.U128>>(parameters, token);
        }
    }
    
    public sealed class MultisigCalls
    {
        
        /// <summary>
        /// >> as_multi_threshold_1
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method AsMultiThreshold1(BaseVec<Ajuna.NetApi.Model.SpCore.AccountId32> other_signatories, Ajuna.NetApi.Model.NodeRuntime.EnumNodeCall call)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(other_signatories.Encode());
            byteArray.AddRange(call.Encode());
            return new Method(31, "Multisig", 0, "as_multi_threshold_1", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> as_multi
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method AsMulti(Ajuna.NetApi.Model.Types.Primitive.U16 threshold, BaseVec<Ajuna.NetApi.Model.SpCore.AccountId32> other_signatories, BaseOpt<Ajuna.NetApi.Model.PalletMultisig.Timepoint> maybe_timepoint, BaseVec<Ajuna.NetApi.Model.Types.Primitive.U8> call, Ajuna.NetApi.Model.Types.Primitive.Bool store_call, Ajuna.NetApi.Model.Types.Primitive.U64 max_weight)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(threshold.Encode());
            byteArray.AddRange(other_signatories.Encode());
            byteArray.AddRange(maybe_timepoint.Encode());
            byteArray.AddRange(call.Encode());
            byteArray.AddRange(store_call.Encode());
            byteArray.AddRange(max_weight.Encode());
            return new Method(31, "Multisig", 1, "as_multi", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> approve_as_multi
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ApproveAsMulti(Ajuna.NetApi.Model.Types.Primitive.U16 threshold, BaseVec<Ajuna.NetApi.Model.SpCore.AccountId32> other_signatories, BaseOpt<Ajuna.NetApi.Model.PalletMultisig.Timepoint> maybe_timepoint, Ajuna.NetApi.Model.Base.Arr32U8 call_hash, Ajuna.NetApi.Model.Types.Primitive.U64 max_weight)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(threshold.Encode());
            byteArray.AddRange(other_signatories.Encode());
            byteArray.AddRange(maybe_timepoint.Encode());
            byteArray.AddRange(call_hash.Encode());
            byteArray.AddRange(max_weight.Encode());
            return new Method(31, "Multisig", 2, "approve_as_multi", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_as_multi
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CancelAsMulti(Ajuna.NetApi.Model.Types.Primitive.U16 threshold, BaseVec<Ajuna.NetApi.Model.SpCore.AccountId32> other_signatories, Ajuna.NetApi.Model.PalletMultisig.Timepoint timepoint, Ajuna.NetApi.Model.Base.Arr32U8 call_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(threshold.Encode());
            byteArray.AddRange(other_signatories.Encode());
            byteArray.AddRange(timepoint.Encode());
            byteArray.AddRange(call_hash.Encode());
            return new Method(31, "Multisig", 3, "cancel_as_multi", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> NewMultisig
    /// A new multisig operation has begun. \[approving, multisig, call_hash\]
    /// </summary>
    public sealed class EventNewMultisig : BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32, Ajuna.NetApi.Model.SpCore.AccountId32, Ajuna.NetApi.Model.Base.Arr32U8>
    {
    }
    
    /// <summary>
    /// >> MultisigApproval
    /// A multisig operation has been approved by someone.
    /// \[approving, timepoint, multisig, call_hash\]
    /// </summary>
    public sealed class EventMultisigApproval : BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32, Ajuna.NetApi.Model.PalletMultisig.Timepoint, Ajuna.NetApi.Model.SpCore.AccountId32, Ajuna.NetApi.Model.Base.Arr32U8>
    {
    }
    
    /// <summary>
    /// >> MultisigExecuted
    /// A multisig operation has been executed. \[approving, timepoint, multisig, call_hash\]
    /// </summary>
    public sealed class EventMultisigExecuted : BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32, Ajuna.NetApi.Model.PalletMultisig.Timepoint, Ajuna.NetApi.Model.SpCore.AccountId32, Ajuna.NetApi.Model.Base.Arr32U8, BaseTuple<BaseTuple, Ajuna.NetApi.Model.SpRuntime.EnumDispatchError>>
    {
    }
    
    /// <summary>
    /// >> MultisigCancelled
    /// A multisig operation has been cancelled. \[cancelling, timepoint, multisig, call_hash\]
    /// </summary>
    public sealed class EventMultisigCancelled : BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32, Ajuna.NetApi.Model.PalletMultisig.Timepoint, Ajuna.NetApi.Model.SpCore.AccountId32, Ajuna.NetApi.Model.Base.Arr32U8>
    {
    }
    
    public enum MultisigErrors
    {
        
        /// <summary>
        /// >> MinimumThreshold
        /// Threshold must be 2 or greater.
        /// </summary>
        MinimumThreshold,
        
        /// <summary>
        /// >> AlreadyApproved
        /// Call is already approved by this signatory.
        /// </summary>
        AlreadyApproved,
        
        /// <summary>
        /// >> NoApprovalsNeeded
        /// Call doesn't need any (more) approvals.
        /// </summary>
        NoApprovalsNeeded,
        
        /// <summary>
        /// >> TooFewSignatories
        /// There are too few signatories in the list.
        /// </summary>
        TooFewSignatories,
        
        /// <summary>
        /// >> TooManySignatories
        /// There are too many signatories in the list.
        /// </summary>
        TooManySignatories,
        
        /// <summary>
        /// >> SignatoriesOutOfOrder
        /// The signatories were provided out of order; they should be ordered.
        /// </summary>
        SignatoriesOutOfOrder,
        
        /// <summary>
        /// >> SenderInSignatories
        /// The sender was contained in the other signatories; it shouldn't be.
        /// </summary>
        SenderInSignatories,
        
        /// <summary>
        /// >> NotFound
        /// Multisig operation not found when attempting to cancel.
        /// </summary>
        NotFound,
        
        /// <summary>
        /// >> NotOwner
        /// Only the account that originally created the multisig is able to cancel it.
        /// </summary>
        NotOwner,
        
        /// <summary>
        /// >> NoTimepoint
        /// No timepoint was given, yet the multisig operation is already underway.
        /// </summary>
        NoTimepoint,
        
        /// <summary>
        /// >> WrongTimepoint
        /// A different timepoint was given to the multisig operation that is underway.
        /// </summary>
        WrongTimepoint,
        
        /// <summary>
        /// >> UnexpectedTimepoint
        /// A timepoint was given, yet no multisig operation is underway.
        /// </summary>
        UnexpectedTimepoint,
        
        /// <summary>
        /// >> MaxWeightTooLow
        /// The maximum weight information provided was too low.
        /// </summary>
        MaxWeightTooLow,
        
        /// <summary>
        /// >> AlreadyStored
        /// The data to be stored is already stored.
        /// </summary>
        AlreadyStored,
    }
}
