//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.Extrinsics;
using Ajuna.NetApi.Model.Meta;
using Ajuna.NetApi.Model.PalletConnectfour;
using Ajuna.NetApi.Model.PrimitiveTypes;
using Ajuna.NetApi.Model.SpCore;
using Ajuna.NetApi.Model.Types;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Ajuna.NetApi.Model.PalletConnectFour
{
    
    
    public sealed class ConnectFourStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public ConnectFourStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ConnectFour", "Something"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ConnectFour", "FounderKey"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.SpCore.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ConnectFour", "Boards"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Ajuna.NetApi.Model.PrimitiveTypes.H256), typeof(Ajuna.NetApi.Model.PalletConnectfour.BoardStruct)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ConnectFour", "PlayerBoard"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Ajuna.NetApi.Model.SpCore.AccountId32), typeof(Ajuna.NetApi.Model.PrimitiveTypes.H256)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ConnectFour", "BoardSchedules"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Ajuna.NetApi.Model.PrimitiveTypes.H256), typeof(BaseOpt<BaseVec<Ajuna.NetApi.Model.Types.Primitive.U8>>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ConnectFour", "Nonce"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Primitive.U64)));
        }
        
        /// <summary>
        /// >> SomethingParams
        /// </summary>
        public static string SomethingParams()
        {
            return RequestGenerator.GetStorage("ConnectFour", "Something", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Something
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U32> Something(CancellationToken token)
        {
            string parameters = ConnectFourStorage.SomethingParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> FounderKeyParams
        /// </summary>
        public static string FounderKeyParams()
        {
            return RequestGenerator.GetStorage("ConnectFour", "FounderKey", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> FounderKey
        /// </summary>
        public async Task<Ajuna.NetApi.Model.SpCore.AccountId32> FounderKey(CancellationToken token)
        {
            string parameters = ConnectFourStorage.FounderKeyParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.SpCore.AccountId32>(parameters, token);
        }
        
        /// <summary>
        /// >> BoardsParams
        ///  Store all boards that are currently being played.
        /// </summary>
        public static string BoardsParams(Ajuna.NetApi.Model.PrimitiveTypes.H256 key)
        {
            return RequestGenerator.GetStorage("ConnectFour", "Boards", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> Boards
        ///  Store all boards that are currently being played.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.PalletConnectfour.BoardStruct> Boards(Ajuna.NetApi.Model.PrimitiveTypes.H256 key, CancellationToken token)
        {
            string parameters = ConnectFourStorage.BoardsParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.PalletConnectfour.BoardStruct>(parameters, token);
        }
        
        /// <summary>
        /// >> PlayerBoardParams
        ///  Store players active board, currently only one board per player allowed.
        /// </summary>
        public static string PlayerBoardParams(Ajuna.NetApi.Model.SpCore.AccountId32 key)
        {
            return RequestGenerator.GetStorage("ConnectFour", "PlayerBoard", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PlayerBoard
        ///  Store players active board, currently only one board per player allowed.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.PrimitiveTypes.H256> PlayerBoard(Ajuna.NetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            string parameters = ConnectFourStorage.PlayerBoardParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.PrimitiveTypes.H256>(parameters, token);
        }
        
        /// <summary>
        /// >> BoardSchedulesParams
        ///  Store boards open schedules.
        /// </summary>
        public static string BoardSchedulesParams(Ajuna.NetApi.Model.PrimitiveTypes.H256 key)
        {
            return RequestGenerator.GetStorage("ConnectFour", "BoardSchedules", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BoardSchedules
        ///  Store boards open schedules.
        /// </summary>
        public async Task<BaseOpt<BaseVec<Ajuna.NetApi.Model.Types.Primitive.U8>>> BoardSchedules(Ajuna.NetApi.Model.PrimitiveTypes.H256 key, CancellationToken token)
        {
            string parameters = ConnectFourStorage.BoardSchedulesParams(key);
            return await _client.GetStorageAsync<BaseOpt<BaseVec<Ajuna.NetApi.Model.Types.Primitive.U8>>>(parameters, token);
        }
        
        /// <summary>
        /// >> NonceParams
        /// </summary>
        public static string NonceParams()
        {
            return RequestGenerator.GetStorage("ConnectFour", "Nonce", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Nonce
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U64> Nonce(CancellationToken token)
        {
            string parameters = ConnectFourStorage.NonceParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U64>(parameters, token);
        }
    }
    
    public sealed class ConnectFourCalls
    {
        
        /// <summary>
        /// >> do_something
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method DoSomething(Ajuna.NetApi.Model.Types.Primitive.U32 something)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(something.Encode());
            return new Method(43, "ConnectFour", 0, "do_something", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cause_error
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CauseError()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(43, "ConnectFour", 1, "cause_error", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> queue
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Queue()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(43, "ConnectFour", 2, "queue", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> empty_queue
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method EmptyQueue()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(43, "ConnectFour", 3, "empty_queue", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> new_game
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method NewGame(Ajuna.NetApi.Model.SpCore.AccountId32 opponent)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(opponent.Encode());
            return new Method(43, "ConnectFour", 4, "new_game", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> play_turn
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method PlayTurn(Ajuna.NetApi.Model.Types.Primitive.U8 column)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(column.Encode());
            return new Method(43, "ConnectFour", 5, "play_turn", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> test_schedule
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method TestSchedule(Ajuna.NetApi.Model.Types.Primitive.U32 delay)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(delay.Encode());
            return new Method(43, "ConnectFour", 6, "test_schedule", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_end_turn
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ForceEndTurn(Ajuna.NetApi.Model.PrimitiveTypes.H256 board_id, Ajuna.NetApi.Model.Types.Primitive.U32 last_turn)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(board_id.Encode());
            byteArray.AddRange(last_turn.Encode());
            return new Method(43, "ConnectFour", 7, "force_end_turn", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> SomethingStored
    /// Event documentation should end with an array that provides descriptive names for event
    /// parameters. [something, who]
    /// </summary>
    public sealed class EventSomethingStored : BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> NewBoard
    /// A new board got created.
    /// </summary>
    public sealed class EventNewBoard : BaseTuple<Ajuna.NetApi.Model.PrimitiveTypes.H256>
    {
    }
    
    public enum ConnectFourErrors
    {
        
        /// <summary>
        /// >> NoneValue
        /// Error names should be descriptive.
        /// </summary>
        NoneValue,
        
        /// <summary>
        /// >> StorageOverflow
        /// Errors should have helpful documentation associated with them.
        /// </summary>
        StorageOverflow,
        
        /// <summary>
        /// >> BadMetadata
        /// Something went wrong during generating
        /// </summary>
        BadMetadata,
        
        /// <summary>
        /// >> ScheduleError
        /// Couldn't put off a scheduler task as planned.
        /// </summary>
        ScheduleError,
        
        /// <summary>
        /// >> PlayerBoardExists
        /// Player already has a board which is being played.
        /// </summary>
        PlayerBoardExists,
        
        /// <summary>
        /// >> NoPlayerBoard
        /// Player board doesn't exist for this player.
        /// </summary>
        NoPlayerBoard,
        
        /// <summary>
        /// >> NoFakePlay
        /// Player can't play against them self.
        /// </summary>
        NoFakePlay,
        
        /// <summary>
        /// >> NotPlayerTurn
        /// Wrong player for next turn.
        /// </summary>
        NotPlayerTurn,
        
        /// <summary>
        /// >> WrongLogic
        /// There was an error while trying to execute something in the logic mod.
        /// </summary>
        WrongLogic,
        
        /// <summary>
        /// >> AlreadyQueued
        /// Unable to queue, make sure you're not already queued.
        /// </summary>
        AlreadyQueued,
        
        /// <summary>
        /// >> OnlyFounderAllowed
        /// Extrinsic is limited to founder.
        /// </summary>
        OnlyFounderAllowed,
    }
}
