//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ajuna.RestClient.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Ajuna.NetApi.Model.Types.Primitive;
   using Ajuna.NetApi.Model.FrameSupport;
   using Ajuna.NetApi.Model.SpConsensusSlots;
   using Ajuna.NetApi.Model.Base;
   using Ajuna.NetApi.Model.SpConsensusBabe;
   using Ajuna.NetApi.Model.Types.Base;
   using Ajuna.RestClient.Interfaces;
   
   public sealed class BabeControllerClient : BaseClient, IBabeControllerClient
   {
      private HttpClient _httpClient;
      public BabeControllerClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<U64> GetEpochIndex()
      {
         return await SendRequestAsync<U64>(_httpClient, "babe/epochindex");
      }
      public async Task<WeakBoundedVecT1> GetAuthorities()
      {
         return await SendRequestAsync<WeakBoundedVecT1>(_httpClient, "babe/authorities");
      }
      public async Task<Slot> GetGenesisSlot()
      {
         return await SendRequestAsync<Slot>(_httpClient, "babe/genesisslot");
      }
      public async Task<Slot> GetCurrentSlot()
      {
         return await SendRequestAsync<Slot>(_httpClient, "babe/currentslot");
      }
      public async Task<Arr32U8> GetRandomness()
      {
         return await SendRequestAsync<Arr32U8>(_httpClient, "babe/randomness");
      }
      public async Task<EnumNextConfigDescriptor> GetPendingEpochConfigChange()
      {
         return await SendRequestAsync<EnumNextConfigDescriptor>(_httpClient, "babe/pendingepochconfigchange");
      }
      public async Task<Arr32U8> GetNextRandomness()
      {
         return await SendRequestAsync<Arr32U8>(_httpClient, "babe/nextrandomness");
      }
      public async Task<WeakBoundedVecT1> GetNextAuthorities()
      {
         return await SendRequestAsync<WeakBoundedVecT1>(_httpClient, "babe/nextauthorities");
      }
      public async Task<U32> GetSegmentIndex()
      {
         return await SendRequestAsync<U32>(_httpClient, "babe/segmentindex");
      }
      public async Task<BoundedVecT5> GetUnderConstruction(string key)
      {
         return await SendRequestAsync<BoundedVecT5>(_httpClient, "babe/underconstruction", key);
      }
      public async Task<BaseOpt<Arr32U8>> GetInitialized()
      {
         return await SendRequestAsync<BaseOpt<Arr32U8>>(_httpClient, "babe/initialized");
      }
      public async Task<BaseOpt<Arr32U8>> GetAuthorVrfRandomness()
      {
         return await SendRequestAsync<BaseOpt<Arr32U8>>(_httpClient, "babe/authorvrfrandomness");
      }
      public async Task<BaseTuple<U32, U32>> GetEpochStart()
      {
         return await SendRequestAsync<BaseTuple<U32, U32>>(_httpClient, "babe/epochstart");
      }
      public async Task<U32> GetLateness()
      {
         return await SendRequestAsync<U32>(_httpClient, "babe/lateness");
      }
      public async Task<BabeEpochConfiguration> GetEpochConfig()
      {
         return await SendRequestAsync<BabeEpochConfiguration>(_httpClient, "babe/epochconfig");
      }
      public async Task<BabeEpochConfiguration> GetNextEpochConfig()
      {
         return await SendRequestAsync<BabeEpochConfiguration>(_httpClient, "babe/nextepochconfig");
      }
   }
}
