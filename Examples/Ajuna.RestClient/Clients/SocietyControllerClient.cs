//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ajuna.RestClient.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Ajuna.NetApi.Model.SpCore;
   using Ajuna.NetApi.Model.PrimitiveTypes;
   using Ajuna.NetApi.Model.Types.Base;
   using Ajuna.NetApi.Model.Types.Primitive;
   using Ajuna.NetApi.Model.PalletSociety;
   using Ajuna.RestClient.Interfaces;
   
   public sealed class SocietyControllerClient : BaseClient, ISocietyControllerClient
   {
      private HttpClient _httpClient;
      public SocietyControllerClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<AccountId32> GetFounder()
      {
         return await SendRequestAsync<AccountId32>(_httpClient, "society/founder");
      }
      public async Task<H256> GetRules()
      {
         return await SendRequestAsync<H256>(_httpClient, "society/rules");
      }
      public async Task<BaseVec<Bid>> GetCandidates()
      {
         return await SendRequestAsync<BaseVec<Bid>>(_httpClient, "society/candidates");
      }
      public async Task<BaseTuple<U128, EnumBidKind>> GetSuspendedCandidates(string key)
      {
         return await SendRequestAsync<BaseTuple<U128, EnumBidKind>>(_httpClient, "society/suspendedcandidates", key);
      }
      public async Task<U128> GetPot()
      {
         return await SendRequestAsync<U128>(_httpClient, "society/pot");
      }
      public async Task<AccountId32> GetHead()
      {
         return await SendRequestAsync<AccountId32>(_httpClient, "society/head");
      }
      public async Task<BaseVec<AccountId32>> GetMembers()
      {
         return await SendRequestAsync<BaseVec<AccountId32>>(_httpClient, "society/members");
      }
      public async Task<Bool> GetSuspendedMembers(string key)
      {
         return await SendRequestAsync<Bool>(_httpClient, "society/suspendedmembers", key);
      }
      public async Task<BaseVec<Bid>> GetBids()
      {
         return await SendRequestAsync<BaseVec<Bid>>(_httpClient, "society/bids");
      }
      public async Task<EnumVouchingStatus> GetVouching(string key)
      {
         return await SendRequestAsync<EnumVouchingStatus>(_httpClient, "society/vouching", key);
      }
      public async Task<BaseVec<BaseTuple<U32, U128>>> GetPayouts(string key)
      {
         return await SendRequestAsync<BaseVec<BaseTuple<U32, U128>>>(_httpClient, "society/payouts", key);
      }
      public async Task<U32> GetStrikes(string key)
      {
         return await SendRequestAsync<U32>(_httpClient, "society/strikes", key);
      }
      public async Task<EnumVote> GetVotes(string key)
      {
         return await SendRequestAsync<EnumVote>(_httpClient, "society/votes", key);
      }
      public async Task<AccountId32> GetDefender()
      {
         return await SendRequestAsync<AccountId32>(_httpClient, "society/defender");
      }
      public async Task<EnumVote> GetDefenderVotes(string key)
      {
         return await SendRequestAsync<EnumVote>(_httpClient, "society/defendervotes", key);
      }
      public async Task<U32> GetMaxMembers()
      {
         return await SendRequestAsync<U32>(_httpClient, "society/maxmembers");
      }
   }
}
