//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ajuna.RestClient.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Ajuna.NetApi.Model.Types.Primitive;
   using Ajuna.NetApi.Model.Types.Base;
   using Ajuna.NetApi.Model.SpCore;
   using Ajuna.NetApi.Model.PalletStaking;
   using Ajuna.NetApi.Model.SpArithmetic;
   using Ajuna.RestClient.Interfaces;
   
   public sealed class StakingControllerClient : BaseClient, IStakingControllerClient
   {
      private HttpClient _httpClient;
      public StakingControllerClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<U32> GetHistoryDepth()
      {
         return await SendRequestAsync<U32>(_httpClient, "staking/historydepth");
      }
      public async Task<U32> GetValidatorCount()
      {
         return await SendRequestAsync<U32>(_httpClient, "staking/validatorcount");
      }
      public async Task<U32> GetMinimumValidatorCount()
      {
         return await SendRequestAsync<U32>(_httpClient, "staking/minimumvalidatorcount");
      }
      public async Task<BaseVec<AccountId32>> GetInvulnerables()
      {
         return await SendRequestAsync<BaseVec<AccountId32>>(_httpClient, "staking/invulnerables");
      }
      public async Task<AccountId32> GetBonded(string key)
      {
         return await SendRequestAsync<AccountId32>(_httpClient, "staking/bonded", key);
      }
      public async Task<U128> GetMinNominatorBond()
      {
         return await SendRequestAsync<U128>(_httpClient, "staking/minnominatorbond");
      }
      public async Task<U128> GetMinValidatorBond()
      {
         return await SendRequestAsync<U128>(_httpClient, "staking/minvalidatorbond");
      }
      public async Task<StakingLedger> GetLedger(string key)
      {
         return await SendRequestAsync<StakingLedger>(_httpClient, "staking/ledger", key);
      }
      public async Task<EnumRewardDestination> GetPayee(string key)
      {
         return await SendRequestAsync<EnumRewardDestination>(_httpClient, "staking/payee", key);
      }
      public async Task<ValidatorPrefs> GetValidators(string key)
      {
         return await SendRequestAsync<ValidatorPrefs>(_httpClient, "staking/validators", key);
      }
      public async Task<U32> GetCounterForValidators()
      {
         return await SendRequestAsync<U32>(_httpClient, "staking/counterforvalidators");
      }
      public async Task<U32> GetMaxValidatorsCount()
      {
         return await SendRequestAsync<U32>(_httpClient, "staking/maxvalidatorscount");
      }
      public async Task<Nominations> GetNominators(string key)
      {
         return await SendRequestAsync<Nominations>(_httpClient, "staking/nominators", key);
      }
      public async Task<U32> GetCounterForNominators()
      {
         return await SendRequestAsync<U32>(_httpClient, "staking/counterfornominators");
      }
      public async Task<U32> GetMaxNominatorsCount()
      {
         return await SendRequestAsync<U32>(_httpClient, "staking/maxnominatorscount");
      }
      public async Task<U32> GetCurrentEra()
      {
         return await SendRequestAsync<U32>(_httpClient, "staking/currentera");
      }
      public async Task<ActiveEraInfo> GetActiveEra()
      {
         return await SendRequestAsync<ActiveEraInfo>(_httpClient, "staking/activeera");
      }
      public async Task<U32> GetErasStartSessionIndex(string key)
      {
         return await SendRequestAsync<U32>(_httpClient, "staking/erasstartsessionindex", key);
      }
      public async Task<Exposure> GetErasStakers(string key)
      {
         return await SendRequestAsync<Exposure>(_httpClient, "staking/erasstakers", key);
      }
      public async Task<Exposure> GetErasStakersClipped(string key)
      {
         return await SendRequestAsync<Exposure>(_httpClient, "staking/erasstakersclipped", key);
      }
      public async Task<ValidatorPrefs> GetErasValidatorPrefs(string key)
      {
         return await SendRequestAsync<ValidatorPrefs>(_httpClient, "staking/erasvalidatorprefs", key);
      }
      public async Task<U128> GetErasValidatorReward(string key)
      {
         return await SendRequestAsync<U128>(_httpClient, "staking/erasvalidatorreward", key);
      }
      public async Task<EraRewardPoints> GetErasRewardPoints(string key)
      {
         return await SendRequestAsync<EraRewardPoints>(_httpClient, "staking/erasrewardpoints", key);
      }
      public async Task<U128> GetErasTotalStake(string key)
      {
         return await SendRequestAsync<U128>(_httpClient, "staking/erastotalstake", key);
      }
      public async Task<EnumForcing> GetForceEra()
      {
         return await SendRequestAsync<EnumForcing>(_httpClient, "staking/forceera");
      }
      public async Task<Perbill> GetSlashRewardFraction()
      {
         return await SendRequestAsync<Perbill>(_httpClient, "staking/slashrewardfraction");
      }
      public async Task<U128> GetCanceledSlashPayout()
      {
         return await SendRequestAsync<U128>(_httpClient, "staking/canceledslashpayout");
      }
      public async Task<BaseVec<UnappliedSlash>> GetUnappliedSlashes(string key)
      {
         return await SendRequestAsync<BaseVec<UnappliedSlash>>(_httpClient, "staking/unappliedslashes", key);
      }
      public async Task<BaseVec<BaseTuple<U32, U32>>> GetBondedEras()
      {
         return await SendRequestAsync<BaseVec<BaseTuple<U32, U32>>>(_httpClient, "staking/bondederas");
      }
      public async Task<BaseTuple<Perbill, U128>> GetValidatorSlashInEra(string key)
      {
         return await SendRequestAsync<BaseTuple<Perbill, U128>>(_httpClient, "staking/validatorslashinera", key);
      }
      public async Task<U128> GetNominatorSlashInEra(string key)
      {
         return await SendRequestAsync<U128>(_httpClient, "staking/nominatorslashinera", key);
      }
      public async Task<SlashingSpans> GetSlashingSpans(string key)
      {
         return await SendRequestAsync<SlashingSpans>(_httpClient, "staking/slashingspans", key);
      }
      public async Task<SpanRecord> GetSpanSlash(string key)
      {
         return await SendRequestAsync<SpanRecord>(_httpClient, "staking/spanslash", key);
      }
      public async Task<U32> GetEarliestUnappliedSlash()
      {
         return await SendRequestAsync<U32>(_httpClient, "staking/earliestunappliedslash");
      }
      public async Task<U32> GetCurrentPlannedSession()
      {
         return await SendRequestAsync<U32>(_httpClient, "staking/currentplannedsession");
      }
      public async Task<EnumReleases> GetStorageVersion()
      {
         return await SendRequestAsync<EnumReleases>(_httpClient, "staking/storageversion");
      }
      public async Task<Percent> GetChillThreshold()
      {
         return await SendRequestAsync<Percent>(_httpClient, "staking/chillthreshold");
      }
   }
}
