//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ajuna.RestClient.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Ajuna.NetApi.Model.Types.Base;
   using Ajuna.NetApi.Model.Types.Primitive;
   using Ajuna.RestClient.Interfaces;
   
   public sealed class TransactionStorageControllerClient : BaseClient, ITransactionStorageControllerClient
   {
      private HttpClient _httpClient;
      public TransactionStorageControllerClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<BaseVec<Ajuna.NetApi.Model.PalletTransactionStorage.TransactionInfo>> GetTransactions(string key)
      {
         return await SendRequestAsync<BaseVec<Ajuna.NetApi.Model.PalletTransactionStorage.TransactionInfo>>(_httpClient, "transactionstorage/transactions", key);
      }
      public async Task<U32> GetChunkCount(string key)
      {
         return await SendRequestAsync<U32>(_httpClient, "transactionstorage/chunkcount", key);
      }
      public async Task<U128> GetByteFee()
      {
         return await SendRequestAsync<U128>(_httpClient, "transactionstorage/bytefee");
      }
      public async Task<U128> GetEntryFee()
      {
         return await SendRequestAsync<U128>(_httpClient, "transactionstorage/entryfee");
      }
      public async Task<U32> GetMaxTransactionSize()
      {
         return await SendRequestAsync<U32>(_httpClient, "transactionstorage/maxtransactionsize");
      }
      public async Task<U32> GetMaxBlockTransactions()
      {
         return await SendRequestAsync<U32>(_httpClient, "transactionstorage/maxblocktransactions");
      }
      public async Task<U32> GetStoragePeriod()
      {
         return await SendRequestAsync<U32>(_httpClient, "transactionstorage/storageperiod");
      }
      public async Task<BaseVec<Ajuna.NetApi.Model.PalletTransactionStorage.TransactionInfo>> GetBlockTransactions()
      {
         return await SendRequestAsync<BaseVec<Ajuna.NetApi.Model.PalletTransactionStorage.TransactionInfo>>(_httpClient, "transactionstorage/blocktransactions");
      }
      public async Task<Bool> GetProofChecked()
      {
         return await SendRequestAsync<Bool>(_httpClient, "transactionstorage/proofchecked");
      }
   }
}
