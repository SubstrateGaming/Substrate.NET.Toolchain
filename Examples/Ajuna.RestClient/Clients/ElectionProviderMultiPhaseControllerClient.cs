//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ajuna.RestClient.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Ajuna.NetApi.Model.Types.Primitive;
   using Ajuna.NetApi.Model.PalletElectionProviderMultiPhase;
   using Ajuna.NetApi.Model.FrameSupport;
   using Ajuna.NetApi.Model.Base;
   using Ajuna.RestClient.Interfaces;
   
   public sealed class ElectionProviderMultiPhaseControllerClient : BaseClient, IElectionProviderMultiPhaseControllerClient
   {
      private HttpClient _httpClient;
      public ElectionProviderMultiPhaseControllerClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<U32> GetRound()
      {
         return await SendRequestAsync<U32>(_httpClient, "electionprovidermultiphase/round");
      }
      public async Task<EnumPhase> GetCurrentPhase()
      {
         return await SendRequestAsync<EnumPhase>(_httpClient, "electionprovidermultiphase/currentphase");
      }
      public async Task<ReadySolution> GetQueuedSolution()
      {
         return await SendRequestAsync<ReadySolution>(_httpClient, "electionprovidermultiphase/queuedsolution");
      }
      public async Task<RoundSnapshot> GetSnapshot()
      {
         return await SendRequestAsync<RoundSnapshot>(_httpClient, "electionprovidermultiphase/snapshot");
      }
      public async Task<U32> GetDesiredTargets()
      {
         return await SendRequestAsync<U32>(_httpClient, "electionprovidermultiphase/desiredtargets");
      }
      public async Task<SolutionOrSnapshotSize> GetSnapshotMetadata()
      {
         return await SendRequestAsync<SolutionOrSnapshotSize>(_httpClient, "electionprovidermultiphase/snapshotmetadata");
      }
      public async Task<U32> GetSignedSubmissionNextIndex()
      {
         return await SendRequestAsync<U32>(_httpClient, "electionprovidermultiphase/signedsubmissionnextindex");
      }
      public async Task<BoundedBTreeMap> GetSignedSubmissionIndices()
      {
         return await SendRequestAsync<BoundedBTreeMap>(_httpClient, "electionprovidermultiphase/signedsubmissionindices");
      }
      public async Task<SignedSubmission> GetSignedSubmissionsMap(string key)
      {
         return await SendRequestAsync<SignedSubmission>(_httpClient, "electionprovidermultiphase/signedsubmissionsmap", key);
      }
      public async Task<Arr3U128> GetMinimumUntrustedScore()
      {
         return await SendRequestAsync<Arr3U128>(_httpClient, "electionprovidermultiphase/minimumuntrustedscore");
      }
   }
}
