//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ajuna.RestClient.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Ajuna.NetApi.Model.Types.Base;
   using Ajuna.NetApi.Model.Types.Primitive;
   using Ajuna.NetApi.Model.NodeRuntime;
   using Ajuna.NetApi.Model.SpCore;
   using Ajuna.RestClient.Interfaces;
   
   public sealed class SessionControllerClient : BaseClient, ISessionControllerClient
   {
      private HttpClient _httpClient;
      public SessionControllerClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<BaseVec<AccountId32>> GetValidators()
      {
         return await SendRequestAsync<BaseVec<AccountId32>>(_httpClient, "session/validators");
      }
      public async Task<U32> GetCurrentIndex()
      {
         return await SendRequestAsync<U32>(_httpClient, "session/currentindex");
      }
      public async Task<Bool> GetQueuedChanged()
      {
         return await SendRequestAsync<Bool>(_httpClient, "session/queuedchanged");
      }
      public async Task<BaseVec<BaseTuple<AccountId32, SessionKeys>>> GetQueuedKeys()
      {
         return await SendRequestAsync<BaseVec<BaseTuple<AccountId32, SessionKeys>>>(_httpClient, "session/queuedkeys");
      }
      public async Task<BaseVec<U32>> GetDisabledValidators()
      {
         return await SendRequestAsync<BaseVec<U32>>(_httpClient, "session/disabledvalidators");
      }
      public async Task<SessionKeys> GetNextKeys(string key)
      {
         return await SendRequestAsync<SessionKeys>(_httpClient, "session/nextkeys", key);
      }
      public async Task<AccountId32> GetKeyOwner(string key)
      {
         return await SendRequestAsync<AccountId32>(_httpClient, "session/keyowner", key);
      }
   }
}
