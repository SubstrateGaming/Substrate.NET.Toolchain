//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ajuna.RestClient.Interfaces
{
   using System;
   using System.Threading.Tasks;
   using Ajuna.NetApi.Model.Types.Primitive;
   using Ajuna.NetApi.Model.Types.Base;
   using Ajuna.NetApi.Model.SpCore;
   using Ajuna.NetApi.Model.PalletStaking;
   using Ajuna.NetApi.Model.SpArithmetic;
   
   public interface IStakingControllerClient
   {
      Task<U32> GetHistoryDepth();
      Task<U32> GetValidatorCount();
      Task<U32> GetMinimumValidatorCount();
      Task<BaseVec<AccountId32>> GetInvulnerables();
      Task<AccountId32> GetBonded(string key);
      Task<U128> GetMinNominatorBond();
      Task<U128> GetMinValidatorBond();
      Task<StakingLedger> GetLedger(string key);
      Task<EnumRewardDestination> GetPayee(string key);
      Task<ValidatorPrefs> GetValidators(string key);
      Task<U32> GetCounterForValidators();
      Task<U32> GetMaxValidatorsCount();
      Task<Nominations> GetNominators(string key);
      Task<U32> GetCounterForNominators();
      Task<U32> GetMaxNominatorsCount();
      Task<U32> GetCurrentEra();
      Task<ActiveEraInfo> GetActiveEra();
      Task<U32> GetErasStartSessionIndex(string key);
      Task<Exposure> GetErasStakers(string key);
      Task<Exposure> GetErasStakersClipped(string key);
      Task<ValidatorPrefs> GetErasValidatorPrefs(string key);
      Task<U128> GetErasValidatorReward(string key);
      Task<EraRewardPoints> GetErasRewardPoints(string key);
      Task<U128> GetErasTotalStake(string key);
      Task<EnumForcing> GetForceEra();
      Task<Perbill> GetSlashRewardFraction();
      Task<U128> GetCanceledSlashPayout();
      Task<BaseVec<UnappliedSlash>> GetUnappliedSlashes(string key);
      Task<BaseVec<BaseTuple<U32, U32>>> GetBondedEras();
      Task<BaseTuple<Perbill, U128>> GetValidatorSlashInEra(string key);
      Task<U128> GetNominatorSlashInEra(string key);
      Task<SlashingSpans> GetSlashingSpans(string key);
      Task<SpanRecord> GetSpanSlash(string key);
      Task<U32> GetEarliestUnappliedSlash();
      Task<U32> GetCurrentPlannedSession();
      Task<EnumReleases> GetStorageVersion();
      Task<Percent> GetChillThreshold();
   }
}
